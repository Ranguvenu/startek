{"version":3,"file":"gamification.min.js","sources":["../src/gamification.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     block_gamification/gamification\n * @class      gamification\n * @package    block_gamification\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['local_courses/jquery.dataTables', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function (dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax) {\n    var levelsform = function(args){\n        this.contextid = args.contextid;\n        // this.id = args.id;\n        var self = this;\n        this.args = args;\n        self.init(args);\n    };\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    levelsform.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    levelsform.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    levelsform.prototype.init = function(args) {\n        //var triggers = $(selector);\n        var self = this;\n\n\n\n        // Fetch the title string.\n        // $('.'+args.selector).click(function(){\n            \n\n            // var editid = $(this).data('value');\n            if (this.args.configid > 0) {\n                self.configid = this.args.configid;\n            }\n            if(self.configid){\n                var head =  Str.get_string('editlevels', 'block_gamification');\n            }\n            else{\n               var head = Str.get_string('addnewlevels', 'block_gamification');\n            }\n            return head.then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n               \n                self.modal.getRoot().addClass('openLMStransition local_costcenter');\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody(self.getBody());\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                    \n                }.bind(this));\n    \n                \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n\n                this.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                return this.modal;\n            }.bind(this));       \n        \n        \n        // });\n        \n    };\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    levelsform.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // console.log(this.args);\n        // alert(this.args);\n        // alert(formdata);\n        // Get the content of the modal.\n        var params = {costcenterid:this.args.costcenterid,levels: this.args.levels, enabled:this.args.enabled, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('block_gamification', 'levelsform', this.contextid, params);\n    };\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    levelsform.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    levelsform.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    levelsform.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // alert(this.contextid);\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'block_gamification_submit_levels_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    levelsform.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n    var displaylevelscontent = function(args) {\n        //var triggers = $(selector);\n        var self = this;\n        // Fetch the title string.\n        // $(selector).click(function(){\n            \n            // var editid = $(this).data(\"value\");\n            // //alert(editid);\n            // if(typeof this.editid != 'undefined'){\n            //         editid=0;\n            // }\n            //  self.categoryid = editid;\n              //alert(self.courseid);\n            return Str.get_string('leveldconfigdata', 'block_gamification',self).then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: title,\n                    body: self.getlevelbody(args)\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n                self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody('');\n                }.bind(this));\n    \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                return this.modal;\n            }.bind(this));       \n        \n        \n        // });\n        \n    };\n    displaylevelscontent.prototype.getlevelbody = function(args){\n        return Fragment.loadFragment('block_gamification', 'levelscontent', 1, args);\n    };\n    var displayLevelUserPopup = function(args){\n        //var triggers = $(selector);\n        var self = this;\n        \n            return Str.get_string('levelusersdata', 'block_gamification',args).then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.DEFAULT,\n                    title: title,\n                    body: self.getlevelusersbody(args)\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n                self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody('');\n                }.bind(this));\n    \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                return this.modal;\n            }.bind(this));       \n        \n        \n        // });\n        \n    };\n    displayLevelUserPopup.prototype.getlevelusersbody = function(args){\n        return Fragment.loadFragment('block_gamification', 'levelsuserscontent', 1, args);\n    };\n    var validateGradeElement = function(element){\n        var htmlobj = $(element);\n        var flag1 = flag2 = flag3 = true;\n        var lowervalue = $(element).find('.lowervalue_element').val();\n        if(lowervalue == ''){\n            $(element).find('.error_lowervalue_element').show();\n            flag1 = false;\n        }else{\n            $(element).find('.error_lowervalue_element').hide();\n        }\n        var uppervalue = $(element).find('.uppervalue_element').val();\n        if(uppervalue == ''){\n            $(element).find('.error_uppervalue_element').show();\n            flag2 = false;\n        }else{\n            $(element).find('.error_uppervalue_element').hide();\n        }\n        if($(element).find('.select.custom-select').val() == null){\n            $(element).find('.error_completion_setting').show();\n            flag3 = false;\n        }else{\n            $(element).find('.error_completion_setting').hide();\n        }\n        console.log(lowervalue == '');\n        console.log(typeof(uppervalue));\n        console.log(lowervalue);\n        console.log(uppervalue);\n        console.log(flag1 && flag2 && (parseInt(lowervalue) > parseInt(uppervalue)));\n        if(flag1 && flag2 && (parseInt(lowervalue) > parseInt(uppervalue))){\n            $(element).find('.error_range_element_mismatch').show();\n            flag1 = false;\n            flag2 = false;\n        }else{\n            $(element).find('.error_range_element_mismatch').hide();\n        }\n\n        return (flag1 && flag2 && flag3);\n    };\n    var validateCompletionElement = function(element){\n        if($(element).find('.select.custom-select').val() != null){\n            $(element).find('.error_completion_setting').hide();\n            return true;\n        }else{\n            $(element).find('.error_completion_setting').show();\n            return false;\n        }\n    };\n    return {\n        load :function(){\n\n        },\n        levelsform: function(){\n            $(document).on('click', '.submitlevels', function(){\n                var levelsid = $(this).attr('id');\n                var levels = $('.'+levelsid).val();\n                var maxlevels = $(this).data('maxlevels');\n                if(levels > maxlevels){\n                    $('.errorlevel'+levelsid).removeClass('hidden');\n\t\t\t\t\t Str.get_string('maximum_number_of_levels', 'block_gamificationy').then(function(maxleveltext) {\n\t\t\t\t\t\t$('.errorlevel'+levelsid).html(maxleveltext+' '+maxlevels);\n\t\t\t\t\t });\n                    \n                }else if(levels >= 2){\n                    var costcenterid = $('.'+levelsid).data('costcenterid');\n                    var enabled = 1//$('.enabledgamification'+costcenterid).prop(\"checked\");\n                    var configid = $('.'+levelsid).data('configid');\n                    args = {costcenterid: costcenterid, contextid: 1, enabled: enabled, levels: levels, configid: configid};\n                    return new levelsform(args);\n                }else{\n                    $('.errorlevel'+levelsid).removeClass('hidden');\n                    if(levels && levels<2)\n\t\t\t\t\t\tStr.get_string('minimum_number_of_levels', 'block_gamificationy').then(function(minleveltext) {\n\t\t\t\t\t\t\t$('.errorlevel'+levelsid).html(minleveltext);\n\t\t\t\t\t\t});\n                    else\n\t\t\t\t\t\tStr.get_string('levelsmandatory', 'block_gamificationy').then(function(levelsmandatory) {\n\t\t\t\t\t\t\t$('.errorlevel'+levelsid).html(levelsmandatory);\n\t\t\t\t\t\t});\n                }\n            });\n            $(document).on('change', '.levelvalue' , function(){\n                var costcenterid = $(this).data('costcenterid');\n                var exist = $('.errorlevelsubmit'+costcenterid).hasClass('hidden');\n                if(!exist)\n                    $('.errorlevelsubmit'+costcenterid).addClass('hidden');\n            });\n            $(document).on('click', '.displaylevels', function(){\n                var costcenterid = $(this).data('costcenterid');\n                args = {costcenterid: costcenterid};\n                return new displaylevelscontent(args);\n            });\n            $(document).on('click', '.leveluserdisplaypopup', function(){\n                var value = $(this).data('value');\n                if(value){\n                    var costcenterid = $(this).data('costcenterid');\n                    var level = $(this).data('level');\n                    args = {costcenterid: costcenterid, level: level};\n                    return new displayLevelUserPopup(args);\n                }\n            });\n            // $(document).on('click', '.slider.round', function(){\n            //     var id = $(this).data('id');\n            //     var value = $('.enabledgamification'+id).prop(\"checked\");\n            //     alert(id);\n            //     alert(value);\n            //     if(value == 1){\n            //         $(this).html('No');\n            //     }else if(value == 0){\n            //         $(this).html('Yes');\n            //     }\n            // });\n        },\n        badgespreview: function(){\n            $(document).on('change', '#badgeaccountselect' , function(){\n                var costcenter = $(this).find(\"option:selected\").val();\n                $.ajax({\n                    method: \"GET\",\n                    dataType: \"json\",\n                    url: M.cfg.wwwroot + \"/blocks/gamification/customajax.php?action=get_costcenter_badges&costcenter=\"+costcenter,\n                    success: function(data){\n                        $('#badges_container').html(data);\n                    }\n                });\n            });\n        },\n        config_datatables: function(){\n            $('#config_table').dataTable( {\n                searching: true,\n                pageLength: 5,\n                responsive: true,\n                bLengthChange: false,\n                aaSorting: [],\n                oLanguage: {\n                    oPaginate: {\n                        sNext:   ' > ',\n                        bStateSave: true,\n                        sPrevious: ' < '\n                    }\n                }\n            });\n        },\n        ruleDefinationValidate: function(){\n            // $(document).ready(function(){\n            // $('.block-gamification-filters').find('[type=\"submit\"]').click(function(e){\n                // // $('.block-gamification-filters').find('[type=\"submit\"]').removeClass('hidden');\n                // // $('.block-gamification-filters').find('[type=\"submit\"]').removeClass('hidden');\n                // $(document).on('click', '#filter_from_submit', function(e){\n                //     var returnval = true;\n                //     e.stopPropagation();\n                //     var rules = $('.custom_gamification_rule');\n                //     rules.each(function(index, value){\n                //         // alert(value.attr('class'));\n                //         if($(value).hasClass('ruletype_grade')){\n                //             // console.log('flag');\n                //             flag = validateGradeElement(value);\n                //             // console.log(flag);\n                //         }else if ($(value).hasClass('ruletype_completetion')){\n                //             // console.log('flag');\n                //             flag = validateCompletionElement(value);\n                //             // console.log(flag);\n                //         }\n                //         console.log('flag');\n                //         console.log(flag);\n                //         if(!flag){\n                //             returnval = false;\n                //             console.log(returnval);\n                //         }\n                //     });\n                //     // if(returnval){\n                //     //     console.log('herecheck');\n                //         return returnval;\n                //     // }else{\n                //         // return false;\n                //     // }\n                // });\n            // });\n            // $('.block-gamification-filters').find('[type=\"submit\"]').removeClass('hidden');\n            $('.block-gamification-filters').on('submit', function(e) {\n                // alert('hi');\n                if (!skipClientValidation) {\n                    var returnval = true;\n                    var rules = $('.custom_gamification_rule');\n                    rules.each(function(index, value){\n                        // alert(value.attr('class'));\n                        if($(value).hasClass('ruletype_grade')){\n                            // console.log('flag');\n                            flag = validateGradeElement(value);\n                            // console.log(flag);\n                        }else if ($(value).hasClass('ruletype_completetion')){\n                            // console.log('flag');\n                            flag = validateCompletionElement(value);\n                            console.log(flag);\n                        }\n                        console.log('flag');\n                        console.log(flag);\n                        if(!flag){\n                            returnval = false;\n                            console.log(returnval);\n                        }\n                    });\n                    // if(returnval){\n                    //     console.log('herecheck');\n                        return returnval;\n                }else{\n                    window.location.reload();\n                    // return true;\n                }\n            });\n        }\n    };\n});"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","levelsform","args","contextid","this","init","prototype","modal","self","configid","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","addClass","setLarge","on","hidden","setBody","animate","setTimeout","destroy","shown","append","save","submitForm","submitFormAjax","show","formdata","params","costcenterid","levels","enabled","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","Y","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","call","methodname","done","fail","submit","displaylevelscontent","CANCEL","getlevelbody","displayLevelUserPopup","DEFAULT","getlevelusersbody","load","levelsid","attr","val","maxlevels","removeClass","maxleveltext","html","minleveltext","levelsmandatory","hasClass","level","badgespreview","costcenter","ajax","method","dataType","url","cfg","wwwroot","success","config_datatables","searching","pageLength","responsive","bLengthChange","aaSorting","oLanguage","oPaginate","sNext","bStateSave","sPrevious","ruleDefinationValidate","skipClientValidation","returnval","each","index","value","element","flag","flag1","flag2","flag3","lowervalue","uppervalue","console","log","parseInt","validateGradeElement","window"],"mappings":"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"}