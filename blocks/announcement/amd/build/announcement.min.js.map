{"version":3,"file":"announcement.min.js","sources":["../src/announcement.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     blocks_announcement/announcement\n * @class      Announcement\n * @package    blocks_announcement\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/str',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/fragment',\n    'core/ajax',\n    'core/yui',\n    'block_announcement/jquery.dataTables'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y, dataTable) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var Announcement = function(args) {\n        this.contextid = args.contextid;\n        this.id = args.id;\n        var self = this;\n        self.init(args.selector);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    Announcement.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    Announcement.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    Announcement.prototype.init = function(args) {\n        // console.log(args);\n        //var triggers = $(selector);\n        var self = this;\n\n        // Fetch the title string.\n        // $('.'+args.selector).click(function(){\n            \n\n            // var editid = $(this).data('value');\n            // if (editid) {\n                // self.planid = editid;\n                if(self.id){\n                    console.log(self.id);\n                    var head = Str.get_string('editannouncement', 'block_announcement');\n                }\n                else{\n                   var head = Str.get_string('adnewannouncement', 'block_announcement');\n                }\n                //console.log(self.costcenterid);\n                //alert(self.costcenterid);\n            // }\n            return head.then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n               \n                self.modal.getRoot().addClass('openLMStransition');\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody(self.getBody());\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                    \n                }.bind(this));\n    \n                \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n\n                this.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                return this.modal;\n            }.bind(this));       \n        \n        \n        // });\n        \n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    Announcement.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // alert(JSON.stringify(formdata));\n        // alert(this.planid);\n        // alert(this.contextid);\n        // Get the content of the modal.\n        var params = {id:this.id, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('block_announcement', 'announcement_form',this.contextid, params);\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    Announcement.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    Announcement.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    Announcement.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        //alert(this.id);\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'block_announcement_submit_create_announcement_form',\n            args: {id:this.id, contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    Announcement.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n    return /** @alias module:local_costcenter/newcostcenter */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function(args) {\n              // console.log(args);\n                // alert(args.contextid);\n                return new Announcement(args);\n            },\n            load: function(){\n\n            },\n            deleteConfirm: function(args){\n                return Str.get_strings([{\n                key: 'confirm'\n                },\n                {\n                key: 'deleteconfirm',\n                component: 'block_announcement',\n                param : args\n                },\n                {   \n                    key: 'delete'\n                }]).then(function(s) {\n                    ModalFactory.create({\n                        title: s[0],\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: s[1]\n                    }).done(function(modal) {\n                        this.modal = modal;\n                        modal.setSaveButtonText(s[2]);\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            e.preventDefault();\n                            args.confirm = true;\n                            $.ajax({\n                                method: \"POST\",\n                                dataType: \"json\",\n                                url: M.cfg.wwwroot + \"/blocks/announcement/ajax.php?reason=\"+args.selector+\"&id=\"+args.id,\n                                success: function(data){\n                                    window.location.reload();\n                                }\n                            });\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            },\n            statusConfirm: function(args){\n                return Str.get_strings([{\n                    key: 'confirm'\n                },\n                {\n                    key: 'statusconfirm',\n                    component: 'block_announcement',\n                    param : args\n                }]).then(function(s) {\n                    ModalFactory.create({\n                        title: s[0],\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: s[1]\n                    }).done(function(modal) {\n                        this.modal = modal;\n                        modal.setSaveButtonText(s[0]);\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            e.preventDefault();\n                            args.confirm = true;\n                            $.ajax({\n                                method: \"POST\",\n                                dataType: \"json\",\n                                url: M.cfg.wwwroot + \"/blocks/announcement/ajax.php?reason=\"+args.selector+\"&id=\"+args.id+\"&visible=\"+args.visible,\n                                success: function(data){\n                                    window.location.reload();\n                                }\n                            });\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            },\n            DatatablesAnnounce: function(args){\n                $('#table_block_announcement').dataTable({\n                    'pageLength': 10,\n                    'bLengthChange': false,\n                    'language': {\n                        'emptyTable': 'No Records Found',\n                        paginate: {\n                            'previous': '<',\n                            'next': '>'\n                        }\n                    },\n                    ordering: false\n                });\n            }\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","dataTable","Announcement","args","contextid","id","this","init","selector","prototype","modal","self","console","log","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","addClass","setLarge","on","hidden","setBody","animate","setTimeout","destroy","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","call","methodname","done","fail","submit","load","deleteConfirm","get_strings","key","component","param","s","setSaveButtonText","confirm","ajax","method","dataType","url","cfg","wwwroot","success","window","statusConfirm","visible","DatatablesAnnounce","paginate","ordering"],"mappings":"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"}