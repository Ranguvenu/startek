{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Toggling the visibility of the secondary navigation on mobile.\r\n *\r\n * @module     theme_epsilon/drawers\r\n * @copyright  2021 Bas Brands\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport ModalBackdrop from 'core/modal_backdrop';\r\nimport Templates from 'core/templates';\r\nimport * as Aria from 'core/aria';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport {debounce} from 'core/utils';\r\nimport {isSmall, isLarge} from 'core/pagehelpers';\r\nimport Pending from 'core/pending';\r\nimport {setUserPreference} from 'core_user/repository';\r\n// The jQuery module is only used for interacting with epsilonrap 4. It can we removed when MDL-71979 is integrated.\r\nimport jQuery from 'jquery';\r\n\r\nlet backdropPromise = null;\r\n\r\nconst drawerMap = new Map();\r\n\r\nconst SELECTORS = {\r\n    BUTTONS: '[data-toggler=\"drawers\"]',\r\n    CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\r\n    OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\r\n    TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\r\n    DRAWERS: '[data-region=\"fixed-drawer\"]',\r\n    DRAWERCONTENT: '.drawercontent',\r\n    PAGECONTENT: '#page-content',\r\n    HEADERCONTENT: '.drawerheadercontent',\r\n};\r\n\r\nconst CLASSES = {\r\n    SCROLLED: 'scrolled',\r\n    SHOW: 'show',\r\n    NOTINITIALISED: 'not-initialized',\r\n};\r\n\r\n/**\r\n * Pixel thresshold to auto-hide drawers.\r\n *\r\n * @type {Number}\r\n */\r\nconst THRESHOLD = 20;\r\n\r\n/**\r\n * Try to get the drawer z-index from the page content.\r\n *\r\n * @returns {Number|null} the z-index of the drawer.\r\n * @private\r\n */\r\nconst getDrawerZIndex = () => {\r\n    const drawer = document.querySelector(SELECTORS.DRAWERS);\r\n    if (!drawer) {\r\n        return null;\r\n    }\r\n    return parseInt(window.getComputedStyle(drawer).zIndex, 10);\r\n};\r\n\r\n/**\r\n * Add a backdrop to the page.\r\n *\r\n * @returns {Promise} rendering of modal backdrop.\r\n * @private\r\n */\r\nconst getBackdrop = () => {\r\n    if (!backdropPromise) {\r\n        backdropPromise = Templates.render('core/modal_backdrop', {})\r\n        .then(html => new ModalBackdrop(html))\r\n        .then(modalBackdrop => {\r\n            const drawerZindex = getDrawerZIndex();\r\n            if (drawerZindex) {\r\n                modalBackdrop.setZIndex(getDrawerZIndex() - 1);\r\n            }\r\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\r\n                e.preventDefault();\r\n                Drawers.closeAllDrawers();\r\n            });\r\n            return modalBackdrop;\r\n        })\r\n        .catch();\r\n    }\r\n    return backdropPromise;\r\n};\r\n\r\n/**\r\n * Get the button element to open a specific drawer.\r\n *\r\n * @param {String} drawerId the drawer element Id\r\n * @return {HTMLElement|undefined} the open button element\r\n * @private\r\n */\r\nconst getDrawerOpenButton = (drawerId) => {\r\n    let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\r\n    if (!openButton) {\r\n        openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\r\n    }\r\n    return openButton;\r\n};\r\n\r\n/**\r\n * Disable drawer tooltips.\r\n *\r\n * @param {HTMLElement} drawerNode the drawer main node\r\n * @private\r\n */\r\nconst disableDrawerTooltips = (drawerNode) => {\r\n    const buttons = [\r\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\r\n        getDrawerOpenButton(drawerNode.id),\r\n    ];\r\n    buttons.forEach(button => {\r\n        if (!button) {\r\n            return;\r\n        }\r\n        disableButtonTooltip(button);\r\n    });\r\n};\r\n\r\n/**\r\n * Disable the button tooltips.\r\n *\r\n * @param {HTMLElement} button the button element\r\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\r\n * @private\r\n */\r\nconst disableButtonTooltip = (button, enableOnBlur) => {\r\n    if (button.hasAttribute('data-original-title')) {\r\n        // The jQuery is still used in epsilonrap 4. It can we removed when MDL-71979 is integrated.\r\n        jQuery(button).tooltip('disable');\r\n        button.setAttribute('title', button.dataset.originalTitle);\r\n    } else {\r\n        button.dataset.disabledToggle = button.dataset.toggle;\r\n        button.removeAttribute('data-toggle');\r\n    }\r\n    if (enableOnBlur) {\r\n        button.dataset.restoreTooltipOnBlur = true;\r\n    }\r\n};\r\n\r\n/**\r\n * Enable drawer tooltips.\r\n *\r\n * @param {HTMLElement} drawerNode the drawer main node\r\n * @private\r\n */\r\nconst enableDrawerTooltips = (drawerNode) => {\r\n    const buttons = [\r\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\r\n        getDrawerOpenButton(drawerNode.id),\r\n    ];\r\n    buttons.forEach(button => {\r\n        if (!button) {\r\n            return;\r\n        }\r\n        enableButtonTooltip(button);\r\n    });\r\n};\r\n\r\n/**\r\n * Enable the button tooltips.\r\n *\r\n * @param {HTMLElement} button the button element\r\n * @private\r\n */\r\nconst enableButtonTooltip = (button) => {\r\n    // The jQuery is still used in epsilonrap 4. It can we removed when MDL-71979 is integrated.\r\n    if (button.hasAttribute('data-original-title')) {\r\n        jQuery(button).tooltip('enable');\r\n        button.removeAttribute('title');\r\n    } else if (button.dataset.disabledToggle) {\r\n        button.dataset.toggle = button.dataset.disabledToggle;\r\n        jQuery(button).tooltip();\r\n    }\r\n    delete button.dataset.restoreTooltipOnBlur;\r\n};\r\n\r\n/**\r\n * Add scroll listeners to a drawer element.\r\n *\r\n * @param {HTMLElement} drawerNode the drawer main node\r\n * @private\r\n */\r\nconst addInnerScrollListener = (drawerNode) => {\r\n    const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\r\n    if (!content) {\r\n        return;\r\n    }\r\n    content.addEventListener(\"scroll\", () => {\r\n        drawerNode.classList.toggle(\r\n            CLASSES.SCROLLED,\r\n            content.scrollTop != 0\r\n        );\r\n    });\r\n};\r\n\r\n/**\r\n * The Drawers class is used to control on-screen drawer elements.\r\n *\r\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\r\n * another drawer is opened, and supports closing a drawer when the screen is resized.\r\n *\r\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\r\n * or close button.\r\n *\r\n * A range of show and hide events are also dispatched as detailed in the class\r\n * {@link module:theme_epsilon/drawers#eventTypes eventTypes} object.\r\n *\r\n * @example <caption>Standard usage</caption>\r\n *\r\n * // The module just needs to be included to add drawer support.\r\n * import 'theme_epsilon/drawers';\r\n *\r\n * @example <caption>Manually open or close any drawer</caption>\r\n *\r\n * import Drawers from 'theme_epsilon/drawers';\r\n *\r\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\r\n * myDrawer.closeDrawer();\r\n *\r\n * @example <caption>Listen to the before show event and cancel it</caption>\r\n *\r\n * import Drawers from 'theme_epsilon/drawers';\r\n *\r\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\r\n *     // The drawer which will be shown.\r\n *     window.console.log(e.target);\r\n *\r\n *     // The instance of the Drawers class for this drawer.\r\n *     window.console.log(e.detail.drawerInstance);\r\n *\r\n *     // Prevent this drawer from being shown.\r\n *     e.preventDefault();\r\n * });\r\n *\r\n * @example <caption>Listen to the shown event</caption>\r\n *\r\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\r\n *     // The drawer which was shown.\r\n *     window.console.log(e.target);\r\n *\r\n *     // The instance of the Drawers class for this drawer.\r\n *     window.console.log(e.detail.drawerInstance);\r\n * });\r\n */\r\nexport default class Drawers {\r\n    /**\r\n     * The underlying HTMLElement which is controlled.\r\n     */\r\n    drawerNode = null;\r\n\r\n    /**\r\n     * The drawer page bounding box dimensions.\r\n     * @var {DOMRect} boundingRect\r\n     */\r\n    boundingRect = null;\r\n\r\n    constructor(drawerNode) {\r\n        // Some behat tests may use fake drawer divs to test components in drawers.\r\n        if (drawerNode.dataset.behatFakeDrawer !== undefined) {\r\n            return;\r\n        }\r\n\r\n        this.drawerNode = drawerNode;\r\n\r\n        if (isSmall()) {\r\n            this.closeDrawer({focusOnOpenButton: false, updatePreferences: false});\r\n        }\r\n\r\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\r\n            this.openDrawer({focusOnCloseButton: false});\r\n        } else if (this.drawerNode.dataset.forceopen == 1) {\r\n            if (!isSmall()) {\r\n                this.openDrawer({focusOnCloseButton: false});\r\n            }\r\n        } else {\r\n            Aria.hide(this.drawerNode);\r\n        }\r\n\r\n        // Disable tooltips in small screens.\r\n        if (isSmall()) {\r\n            disableDrawerTooltips(this.drawerNode);\r\n        }\r\n\r\n        addInnerScrollListener(this.drawerNode);\r\n\r\n        drawerMap.set(drawerNode, this);\r\n\r\n        drawerNode.classList.remove(CLASSES.NOTINITIALISED);\r\n    }\r\n\r\n    /**\r\n     * Whether the drawer is open.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get isOpen() {\r\n        return this.drawerNode.classList.contains(CLASSES.SHOW);\r\n    }\r\n\r\n    /**\r\n     * Whether the drawer should close when the window is resized\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get closeOnResize() {\r\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\r\n    }\r\n\r\n    /**\r\n     * The list of event types.\r\n     *\r\n     * @static\r\n     * @property {String} drawerShow See {@link event:theme_epsilon/drawers:show}\r\n     * @property {String} drawerShown See {@link event:theme_epsilon/drawers:shown}\r\n     * @property {String} drawerHide See {@link event:theme_epsilon/drawers:hide}\r\n     * @property {String} drawerHidden See {@link event:theme_epsilon/drawers:hidden}\r\n     */\r\n    static eventTypes = {\r\n        /**\r\n         * An event triggered before a drawer is shown.\r\n         *\r\n         * @event theme_epsilon/drawers:show\r\n         * @type {CustomEvent}\r\n         * @property {HTMLElement} target The drawer that will be opened.\r\n         */\r\n        drawerShow: 'theme_epsilon/drawers:show',\r\n\r\n        /**\r\n         * An event triggered after a drawer is shown.\r\n         *\r\n         * @event theme_epsilon/drawers:shown\r\n         * @type {CustomEvent}\r\n         * @property {HTMLElement} target The drawer that was be opened.\r\n         */\r\n        drawerShown: 'theme_epsilon/drawers:shown',\r\n\r\n        /**\r\n         * An event triggered before a drawer is hidden.\r\n         *\r\n         * @event theme_epsilon/drawers:hide\r\n         * @type {CustomEvent}\r\n         * @property {HTMLElement} target The drawer that will be hidden.\r\n         */\r\n        drawerHide: 'theme_epsilon/drawers:hide',\r\n\r\n        /**\r\n         * An event triggered after a drawer is hidden.\r\n         *\r\n         * @event theme_epsilon/drawers:hidden\r\n         * @type {CustomEvent}\r\n         * @property {HTMLElement} target The drawer that was be hidden.\r\n         */\r\n        drawerHidden: 'theme_epsilon/drawers:hidden',\r\n    };\r\n\r\n\r\n    /**\r\n     * Get the drawer instance for the specified node\r\n     *\r\n     * @param {HTMLElement} drawerNode\r\n     * @returns {module:theme_epsilon/drawers}\r\n     */\r\n    static getDrawerInstanceForNode(drawerNode) {\r\n        if (!drawerMap.has(drawerNode)) {\r\n            new Drawers(drawerNode);\r\n        }\r\n\r\n        return drawerMap.get(drawerNode);\r\n    }\r\n\r\n    /**\r\n     * Dispatch a drawer event.\r\n     *\r\n     * @param {string} eventname the event name\r\n     * @param {boolean} cancelable if the event is cancelable\r\n     * @returns {CustomEvent} the resulting custom event\r\n     */\r\n    dispatchEvent(eventname, cancelable = false) {\r\n        return dispatchEvent(\r\n            eventname,\r\n            {\r\n                drawerInstance: this,\r\n            },\r\n            this.drawerNode,\r\n            {\r\n                cancelable,\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Open the drawer.\r\n     *\r\n     * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\r\n     * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\r\n     * focusOnCloseButton parameter can be set to false to prevent this behaviour.\r\n     *\r\n     * @param {object} args\r\n     * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\r\n     */\r\n    openDrawer({focusOnCloseButton = true} = {}) {\r\n\r\n        const pendingPromise = new Pending('theme_epsilon/drawers:open');\r\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\r\n        if (showEvent.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        // Hide close button and header content while the drawer is showing to prevent glitchy effects.\r\n        this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle('hidden', true);\r\n        this.drawerNode.querySelector(SELECTORS.HEADERCONTENT)?.classList.toggle('hidden', true);\r\n\r\n\r\n        // Remove open tooltip if still visible.\r\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\r\n        if (openButton && openButton.hasAttribute('data-original-title')) {\r\n            // The jQuery is still used in epsilonrap 4. It can we removed when MDL-71979 is integrated.\r\n            jQuery(openButton)?.tooltip('hide');\r\n        }\r\n\r\n        Aria.unhide(this.drawerNode);\r\n        this.drawerNode.classList.add(CLASSES.SHOW);\r\n\r\n        const preference = this.drawerNode.dataset.preference;\r\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\r\n            setUserPreference(preference, true);\r\n        }\r\n\r\n        const state = this.drawerNode.dataset.state;\r\n        if (state) {\r\n            const page = document.getElementById('page');\r\n            page.classList.add(state);\r\n        }\r\n\r\n        this.boundingRect = this.drawerNode.getBoundingClientRect();\r\n\r\n        if (isSmall()) {\r\n            getBackdrop().then(backdrop => {\r\n                backdrop.show();\r\n\r\n                const pageWrapper = document.getElementById('page');\r\n                pageWrapper.style.overflow = 'hidden';\r\n                return backdrop;\r\n            })\r\n            .catch();\r\n        }\r\n\r\n        // Show close button and header content once the drawer is fully opened.\r\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\r\n        const headerContent = this.drawerNode.querySelector(SELECTORS.HEADERCONTENT);\r\n        if (focusOnCloseButton && closeButton) {\r\n            disableButtonTooltip(closeButton, true);\r\n        }\r\n        setTimeout(() => {\r\n            closeButton.classList.toggle('hidden', false);\r\n            headerContent.classList.toggle('hidden', false);\r\n            if (focusOnCloseButton) {\r\n                closeButton.focus();\r\n            }\r\n            pendingPromise.resolve();\r\n        }, 300);\r\n\r\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\r\n    }\r\n\r\n    /**\r\n     * Close the drawer.\r\n     *\r\n     * @param {object} args\r\n     * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\r\n     * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\r\n     */\r\n    closeDrawer({focusOnOpenButton = true, updatePreferences = true} = {}) {\r\n\r\n        const pendingPromise = new Pending('theme_epsilon/drawers:close');\r\n\r\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\r\n        if (hideEvent.defaultPrevented) {\r\n            return;\r\n        }\r\n\r\n        // Hide close button and header content while the drawer is hiding to prevent glitchy effects.\r\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\r\n        closeButton?.classList.toggle('hidden', true);\r\n        const headerContent = this.drawerNode.querySelector(SELECTORS.HEADERCONTENT);\r\n        headerContent?.classList.toggle('hidden', true);\r\n        // Remove the close button tooltip if visible.\r\n        if (closeButton.hasAttribute('data-original-title')) {\r\n            // The jQuery is still used in epsilonrap 4. It can we removed when MDL-71979 is integrated.\r\n            jQuery(closeButton)?.tooltip('hide');\r\n        }\r\n\r\n        const preference = this.drawerNode.dataset.preference;\r\n        if (preference && updatePreferences && !isSmall()) {\r\n            setUserPreference(preference, false);\r\n        }\r\n\r\n        const state = this.drawerNode.dataset.state;\r\n        if (state) {\r\n            const page = document.getElementById('page');\r\n            page.classList.remove(state);\r\n        }\r\n\r\n        Aria.hide(this.drawerNode);\r\n        this.drawerNode.classList.remove(CLASSES.SHOW);\r\n\r\n        getBackdrop().then(backdrop => {\r\n            backdrop.hide();\r\n\r\n            if (isSmall()) {\r\n                const pageWrapper = document.getElementById('page');\r\n                pageWrapper.style.overflow = 'visible';\r\n            }\r\n            return backdrop;\r\n        })\r\n        .catch();\r\n\r\n        // Move focus to the open drawer (or toggler) button once the drawer is hidden.\r\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\r\n        if (openButton) {\r\n            disableButtonTooltip(openButton, true);\r\n        }\r\n        setTimeout(() => {\r\n            if (openButton && focusOnOpenButton) {\r\n                openButton.focus();\r\n            }\r\n            pendingPromise.resolve();\r\n        }, 300);\r\n\r\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\r\n    }\r\n\r\n    /**\r\n     * Toggle visibility of the drawer.\r\n     */\r\n    toggleVisibility() {\r\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\r\n            this.closeDrawer();\r\n        } else {\r\n            this.openDrawer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Displaces the drawer outsite the page.\r\n     *\r\n     * @param {Number} scrollPosition the page current scroll position\r\n     */\r\n    displace(scrollPosition) {\r\n        let displace = scrollPosition;\r\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\r\n        if (scrollPosition === 0) {\r\n            this.drawerNode.style.transform = '';\r\n            if (openButton) {\r\n                openButton.style.transform = '';\r\n            }\r\n            return;\r\n        }\r\n        const state = this.drawerNode.dataset?.state;\r\n        const drawrWidth = this.drawerNode.offsetWidth;\r\n        let scrollThreshold = drawrWidth;\r\n        let direction = -1;\r\n        if (state === 'show-drawer-right') {\r\n            direction = 1;\r\n            scrollThreshold = THRESHOLD;\r\n        }\r\n        // LTR scroll is positive while RTL scroll is negative.\r\n        if (Math.abs(scrollPosition) > scrollThreshold) {\r\n            displace = Math.sign(scrollPosition) * (drawrWidth + THRESHOLD);\r\n        }\r\n        displace *= direction;\r\n        const transform = `translateX(${displace}px)`;\r\n        if (openButton) {\r\n            openButton.style.transform = transform;\r\n        }\r\n        this.drawerNode.style.transform = transform;\r\n    }\r\n\r\n    /**\r\n     * Prevent drawer from overlapping an element.\r\n     *\r\n     * @param {HTMLElement} currentFocus\r\n     */\r\n    preventOverlap(currentFocus) {\r\n        // Start position drawer (aka. left drawer) will never overlap with the page content.\r\n        if (!this.isOpen || this.drawerNode.dataset?.state === 'show-drawer-left') {\r\n            return;\r\n        }\r\n        const drawrWidth = this.drawerNode.offsetWidth;\r\n        const element = currentFocus.getBoundingClientRect();\r\n\r\n        // The this.boundingRect is calculated only once and it is reliable\r\n        // for horizontal overlapping (which is the most common). However,\r\n        // it is not reliable for vertical overlapping because the drawer\r\n        // height can be changed by other elements like sticky footer.\r\n        // To prevent recalculating the boundingRect on every\r\n        // focusin event, we use horizontal overlapping as first fast check.\r\n        let overlapping = (\r\n            (element.right + THRESHOLD) > this.boundingRect.left &&\r\n            (element.left - THRESHOLD) < this.boundingRect.right\r\n        );\r\n        if (overlapping) {\r\n            const currentBoundingRect = this.drawerNode.getBoundingClientRect();\r\n            overlapping = (\r\n                (element.bottom) > currentBoundingRect.top &&\r\n                (element.top) < currentBoundingRect.bottom\r\n            );\r\n        }\r\n\r\n        if (overlapping) {\r\n            // Force drawer to displace out of the page.\r\n            let displaceOut = drawrWidth + 1;\r\n            if (window.right_to_left()) {\r\n                displaceOut *= -1;\r\n            }\r\n            this.displace(displaceOut);\r\n        } else {\r\n            // Reset drawer displacement.\r\n            this.displace(window.scrollX);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close all drawers.\r\n     */\r\n    static closeAllDrawers() {\r\n        drawerMap.forEach(drawerInstance => {\r\n            drawerInstance.closeDrawer();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close all drawers except for the specified drawer.\r\n     *\r\n     * @param {module:theme_epsilon/drawers} comparisonInstance\r\n     */\r\n    static closeOtherDrawers(comparisonInstance) {\r\n        drawerMap.forEach(drawerInstance => {\r\n            if (drawerInstance === comparisonInstance) {\r\n                return;\r\n            }\r\n\r\n            drawerInstance.closeDrawer();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prevent drawers from covering the focused element.\r\n     */\r\n    static preventCoveringFocusedElement() {\r\n        const currentFocus = document.activeElement;\r\n        // Focus on page layout elements should be ignored.\r\n        const pagecontent = document.querySelector(SELECTORS.PAGECONTENT);\r\n        if (!currentFocus || !pagecontent?.contains(currentFocus)) {\r\n            Drawers.displaceDrawers(window.scrollX);\r\n            return;\r\n        }\r\n        drawerMap.forEach(drawerInstance => {\r\n            drawerInstance.preventOverlap(currentFocus);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prevent drawer from covering the content when the page content covers the full page.\r\n     *\r\n     * @param {Number} displace\r\n     */\r\n    static displaceDrawers(displace) {\r\n        drawerMap.forEach(drawerInstance => {\r\n            drawerInstance.displace(displace);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Set the last used attribute for the last used toggle button for a drawer.\r\n *\r\n * @param {object} toggleButton The clicked button.\r\n */\r\nconst setLastUsedToggle = (toggleButton) => {\r\n    if (toggleButton.dataset.target) {\r\n        document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`)\r\n        .forEach(btn => {\r\n            btn.dataset.lastused = false;\r\n        });\r\n        toggleButton.dataset.lastused = true;\r\n    }\r\n};\r\n\r\n/**\r\n * Set the focus to the last used button to open this drawer.\r\n * @param {string} target The drawer target.\r\n */\r\nconst focusLastUsedToggle = (target) => {\r\n    const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\r\n    if (lastUsedButton) {\r\n        lastUsedButton.focus();\r\n    }\r\n};\r\n\r\n/**\r\n * Register the event listeners for the drawer.\r\n *\r\n * @private\r\n */\r\nconst registerListeners = () => {\r\n    // Listen for show/hide events.\r\n    document.addEventListener('click', e => {\r\n        const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\r\n        if (toggleButton && toggleButton.dataset.target) {\r\n            e.preventDefault();\r\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\r\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\r\n            setLastUsedToggle(toggleButton);\r\n\r\n            drawerInstance.toggleVisibility();\r\n        }\r\n\r\n        const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\r\n        if (openDrawerButton && openDrawerButton.dataset.target) {\r\n            e.preventDefault();\r\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\r\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\r\n            setLastUsedToggle(toggleButton);\r\n\r\n            drawerInstance.openDrawer();\r\n        }\r\n\r\n        const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\r\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\r\n            e.preventDefault();\r\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\r\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\r\n\r\n            drawerInstance.closeDrawer();\r\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\r\n        }\r\n    });\r\n\r\n    // Close drawer when another drawer opens.\r\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\r\n        if (isLarge()) {\r\n            return;\r\n        }\r\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\r\n    });\r\n\r\n    // Tooglers and openers blur listeners.\r\n    const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\r\n    document.addEventListener('focusout', (e) => {\r\n        const button = e.target.closest(btnSelector);\r\n        if (button?.dataset.restoreTooltipOnBlur !== undefined) {\r\n            enableButtonTooltip(button);\r\n        }\r\n    });\r\n\r\n    const closeOnResizeListener = () => {\r\n        if (isSmall()) {\r\n            let anyOpen = false;\r\n            drawerMap.forEach(drawerInstance => {\r\n                disableDrawerTooltips(drawerInstance.drawerNode);\r\n                if (drawerInstance.isOpen) {\r\n                    if (drawerInstance.closeOnResize) {\r\n                        drawerInstance.closeDrawer();\r\n                    } else {\r\n                        anyOpen = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (anyOpen) {\r\n                getBackdrop().then(backdrop => backdrop.show()).catch();\r\n            }\r\n        } else {\r\n            drawerMap.forEach(drawerInstance => {\r\n                enableDrawerTooltips(drawerInstance.drawerNode);\r\n            });\r\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\r\n        }\r\n    };\r\n\r\n    document.addEventListener('scroll', () => {\r\n        const body = document.querySelector('body');\r\n        if (window.scrollY >= window.innerHeight) {\r\n            body.classList.add(CLASSES.SCROLLED);\r\n        } else {\r\n            body.classList.remove(CLASSES.SCROLLED);\r\n        }\r\n        // Horizontal scroll listener to displace the drawers to prevent covering\r\n        // any possible sticky content.\r\n        Drawers.displaceDrawers(window.scrollX);\r\n    });\r\n\r\n    const preventOverlap = debounce(Drawers.preventCoveringFocusedElement, 100);\r\n    document.addEventListener('focusin', preventOverlap);\r\n    document.addEventListener('focusout', preventOverlap);\r\n\r\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\r\n};\r\n\r\nregisterListeners();\r\n\r\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\r\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\r\n"],"names":["backdropPromise","drawerMap","Map","SELECTORS","CLASSES","getDrawerZIndex","drawer","document","querySelector","parseInt","window","getComputedStyle","zIndex","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","setZIndex","getAttachmentPoint","get","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","constructor","undefined","behatFakeDrawer","closeDrawer","focusOnOpenButton","updatePreferences","this","classList","contains","openDrawer","focusOnCloseButton","forceopen","Aria","hide","content","scrollTop","addInnerScrollListener","set","remove","isOpen","closeOnResize","has","dispatchEvent","eventname","cancelable","drawerInstance","pendingPromise","Pending","eventTypes","drawerShow","defaultPrevented","unhide","add","preference","state","getElementById","boundingRect","getBoundingClientRect","backdrop","show","style","overflow","closeButton","headerContent","setTimeout","focus","resolve","drawerShown","drawerHide","drawerHidden","toggleVisibility","displace","scrollPosition","transform","_this$drawerNode$data","drawrWidth","offsetWidth","scrollThreshold","direction","Math","abs","sign","preventOverlap","currentFocus","element","overlapping","right","left","currentBoundingRect","bottom","top","displaceOut","right_to_left","scrollX","comparisonInstance","activeElement","pagecontent","displaceDrawers","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","closest","targetDrawer","getDrawerInstanceForNode","openDrawerButton","closeDrawerButton","lastUsedButton","focusLastUsedToggle","closeOtherDrawers","detail","btnSelector","body","scrollY","innerHeight","preventCoveringFocusedElement","anyOpen","registerListeners"],"mappings":"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"}