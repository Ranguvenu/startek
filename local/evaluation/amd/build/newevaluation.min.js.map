{"version":3,"file":"newevaluation.min.js","sources":["../src/newevaluation.js"],"sourcesContent":["/**\n * Add a create new feedback modal to the page.\n *\n * @module     local_evaluation/newevaluation\n * @class      NewEvaluation\n * @package    local_evaluation\n * @copyright  2019 eabyas\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui', 'local_evaluation/jquery.dataTables'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewEvaluation = function(selector, contextid, evalid, instance, plugin) {\n        this.contextid = contextid;\n        this.evalid = evalid;\n        this.instance = instance;\n        this.plugin = plugin;\n        var self = this;\n        self.init(selector,plugin,evalid);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewEvaluation.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewEvaluation.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewEvaluation.prototype.init = function(selector,plugin,evalid) {\n\n        var self = this;       \n        // Fetch the title string.\n        if (plugin === 'classroom'||plugin === 'program'||plugin === 'certification') {\n            var editid = evalid;\n                if (editid>0) {\n                    self.evalid = editid;\n                    update_string = Str.get_string('update_evaluation', 'local_evaluation');\n                } else {\n                    self.evalid = -1;\n                    update_string = Str.get_string('create_evaluation', 'local_evaluation');\n                }\n                \n                return update_string.then(function(title) {\n                    // Create the modal.\n                    return ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: title,\n                        body: self.getBody()\n                    });\n                }.bind(self)).then(function(modal) {\n                    \n                    // Keep a reference to the modal.\n                    self.modal = modal;\n                    self.modal.show();\n                    // Forms are big, we want a big modal.\n                    self.modal.setLarge();\n                    self.modal.getRoot().addClass('openLMStransition local_evaluation');\n                    self.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n         \n                    // We want to reset the form every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\n                        //self.modal.setBody(self.getBody());\n                        self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                        setTimeout(function(){\n                            modal.destroy();\n                        }, 1000);\n                        self.modal.setBody('');\n                    }.bind(this));\n        \n                    // We want to hide the submit buttons every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.shown, function() {\n                        self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    }.bind(this));\n         \n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                    return this.modal;\n                }.bind(this));   \n        }\n        else {\n            $(document).on('click', selector, function(){\n                \n                var editid = $(this).data(\"value\");\n                if (editid>0) {\n                    self.evalid = editid;\n                    update_string = Str.get_string('update_evaluation', 'local_evaluation');\n                } else {\n                    self.evalid = -1;\n                    update_string = Str.get_string('create_evaluation', 'local_evaluation');\n                }\n                return update_string.then(function(title) {\n                    // Create the modal.\n                    return ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: title,\n                        body: self.getBody()\n                    });\n                }.bind(self)).then(function(modal) {\n                    \n                    // Keep a reference to the modal.\n                    self.modal = modal;\n                    self.modal.show();\n                    // Forms are big, we want a big modal.\n                    self.modal.setLarge();\n                    self.modal.getRoot().addClass('openLMStransition local_evaluation');\n                    self.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n         \n                    // We want to reset the form every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\n                        //self.modal.setBody(self.getBody());\n                        self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                        setTimeout(function(){\n                            modal.destroy();\n                        }, 1000);\n                        self.modal.setBody('');\n                    }.bind(this));\n        \n                    // We want to hide the submit buttons every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.shown, function() {\n                        self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    }.bind(this));\n         \n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                    return this.modal;\n                }.bind(this));       \n            \n            });\n        }\n        \n    };\n    \n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewEvaluation.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        \n        // Get the content of the modal.\n        var params = {evalid:this.evalid, instance:this.instance, plugin:this.plugin, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('local_evaluation', 'new_evaluation_form', this.contextid, params);\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewEvaluation.prototype.handleFormSubmissionResponse = function(evalid) {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n\n        // modal to show the procedure thereof\n        var params = { id: evalid, sesskey: M.cfg.sesskey};\n        var returndata =  Fragment.loadFragment('local_evaluation', 'addquestions_or_enrol', this.contextid, params);\n\n        ModalFactory.create({\n            title: Str.get_string('pluginname', 'local_evaluation'),\n            body: returndata\n        }).done(function(modal) {\n            // Do what you want with your new modal.\n            modal.show();\n            modal.getRoot().find('[data-action=\"hide\"]').on('click', function() {\n            modal.hide();\n            setTimeout(function(){\n                 window.location.reload();\n            }, 500);\n            });\n        });\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewEvaluation.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewEvaluation.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        var promise = Ajax.call([{\n            methodname: 'local_evaluation_submit_create_evaluation_form',\n            //args: {evalid:this.evalid, contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n        var self =this;\n        promise[0].done(function(resp){\n            self.handleFormSubmissionResponse(resp);        \n        });\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewEvaluation.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_evaluation/newevaluation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(selector, contextid,evalid, instance, plugin) {\n            return new NewEvaluation(selector, contextid, evalid, instance, plugin);\n        },\n        enrolledusers: function(id, type, contextid,testname) {\n            // modal to show the procedure thereof\n            var params = { id: id, type:type};\n            var returndata =  Fragment.loadFragment('local_evaluation', 'enrolledusers', contextid, params);\n\n            ModalFactory.create({\n                title: testname,\n                body: returndata\n            }).done(function(modal) {\n                // Do what you want with your new modal.\n                modal.show();\n                modal.setLarge();\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    modal.setBody('');\n                }.bind(this));\n                modal.getRoot().find('[data-action=\"hide\"]').on('click', function() {\n                    modal.hide();\n                    setTimeout(function(){\n                         modal.destroy();\n                    }, 500);\n                });\n            });\n        },\n        deleteevaluation: function(elem,name) {\n            return Str.get_strings([{\n                key: 'deleteevalaution',\n                component: 'local_evaluation'\n            }, {\n                key: 'confirmdelete',\n                component: 'local_evaluation',\n                param:name\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+M.util.get_string(\"yes\", \"moodle\")+'</button>&nbsp;' +\n                    '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+M.util.get_string(\"no\", \"moodle\")+'</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        window.location.href ='index.php?id='+elem+'&confirm=1&delete=1&sesskey=' + M.cfg.sesskey;\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n        getdepartmentlist: function() {\n            $(document).on('change', '#id_costcenterid', function() {\n                var costcentervalue = $(this).find(\"option:selected\").val();\n                var title = M.util.get_string(\"select_department\", \"local_onlinetests\");\n                if (costcentervalue && costcentervalue != 'null') {\n                    var promise = Ajax.call([{\n                        methodname: 'local_costcenter_departmentlist',\n                        args: {\n                            orgid: costcentervalue\n                        },\n                    }]);\n                    promise[0].done(function(resp) {\n                       var template =  '<option value=null>'+M.util.get_string(\"select_department\", \"local_evaluation\")+'</option>';                                    \n                            $.each(JSON.parse(resp.departments), function( index, value) {\n                                template += '<option value = ' + index.id + ' >' +value.fullname + '</option>';\n                            });\n                            $('#id_departmentid').html(template);\n                    }).fail(function() {\n                        // do something with the exception\n                        alert('Error occured while processing request');\n                        window.location.reload();\n                    });\n                } else {\n                    var template =  '<option value=null>Select Department</option>';\n                    $('#id_departmentid').html(template);\n                }\n            });            \n        },\n\n        displayquestion: function(itemid, evalid) {\n            if (evalid) {\n                var promise = Ajax.call([{\n                methodname: 'local_evaluation_displayquestion',\n                args: {\n                    itemid: itemid,\n                    evalid: evalid,\n                    typ:0\n                },\n                }]);\n                promise[0].done(function(resp) {\n                        $('#displayform').html(resp.formdata);\n                }).fail(function() {\n                    // do something with the exception\n                    alert('Error occured while processing request');\n                    // window.location.reload();\n                });\n            } else {\n                $(document).on(\"change\", \".target\", function() {\n                // $( \".target\" ).change(function() {\n                    var cmid = $( \"#id_questiontyp\" ).attr( \"value\" ); // evalid\n                    var typ = $( \"#id_questiontyp option:selected\" ).val();\n                    if(typ == 'pagebreak'){\n                        window.location.reload();\n                    } \n                    var promise = Ajax.call([{\n                    methodname: 'local_evaluation_displayquestion',\n                    args: {\n                        itemid: itemid,\n                        evalid: cmid,\n                        typ: typ\n                    },\n                    }]);\n                    promise[0].done(function(resp) {\n                            $('#displayform').html(resp.formdata);\n                    }).fail(function() {\n                        // do something with the exception\n                        alert('Error occured while processing request');\n                        // window.location.reload();\n                    });   \n                });\n            }                   \n        },\n        displaytemplate: function(itemid, evalid) {\n            $( \"#id_templateid\" ).change(function() {\n                var id = $( \"#id_templateid\" ).attr( \"value\" );\n                var templateid = $( \"#id_templateid option:selected\" ).val();  \n                var promise = Ajax.call([{\n                    methodname: 'local_evaluation_displaytemplate',\n                    args: {\n                        id: id,\n                        templateid: templateid\n                    },\n                }]);\n                promise[0].done(function(resp) {\n                        $('#displaytempalteform').html(resp.formdata);\n                }).fail(function() {\n                    // do something with the exception\n                    alert('Error occured while processing request');\n                    // window.location.reload();\n                });\n            });\n               \n        },\n        load: function () {\n            $(document).on('click', '#page_reload_forced', function(){\n                window.location.reload();\n            });\n        }\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewEvaluation","selector","contextid","evalid","instance","plugin","this","init","prototype","modal","self","editid","update_string","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","show","setLarge","getRoot","addClass","animate","on","hidden","setTimeout","destroy","setBody","shown","append","save","submitForm","submitFormAjax","document","data","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","id","sesskey","cfg","returndata","done","find","window","location","reload","handleFormSubmissionFailure","e","preventDefault","formData","serialize","promise","call","methodname","args","fail","resp","submit","enrolledusers","testname","deleteevaluation","elem","name","get_strings","key","component","param","s","DEFAULT","footer","util","href","getFooter","getdepartmentlist","costcentervalue","val","orgid","template","each","parse","departments","index","value","fullname","html","alert","displayquestion","itemid","typ","cmid","attr","displaytemplate","change","templateid","load"],"mappings":";;;;;;;;;AASAA,wCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,WAAY,uCAC3G,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAU5DC,cAAgB,SAASC,SAAUC,UAAWC,OAAQC,SAAUC,aAC3DH,UAAYA,eACZC,OAASA,YACTC,SAAWA,cACXC,OAASA,OACHC,KACNC,KAAKN,SAASI,OAAOF,gBAO9BH,cAAcQ,UAAUC,MAAQ,KAMhCT,cAAcQ,UAAUN,WAAa,EASrCF,cAAcQ,UAAUD,KAAO,SAASN,SAASI,OAAOF,YAEhDO,KAAOJ,QAEI,cAAXD,QAAmC,YAAXA,QAAiC,kBAAXA,OAA4B,KACtEM,OAASR,cACLQ,OAAO,GACPD,KAAKP,OAASQ,OACdC,cAAgBlB,IAAImB,WAAW,oBAAqB,sBAEpDH,KAAKP,QAAU,EACfS,cAAgBlB,IAAImB,WAAW,oBAAqB,qBAGjDD,cAAcE,KAAK,SAASC,cAExBpB,aAAaqB,OAAO,CACvBC,KAAMtB,aAAauB,MAAMC,YACzBJ,MAAOA,MACPK,KAAMV,KAAKW,aAEjBC,KAAKZ,OAAOI,KAAK,SAASL,cAGxBC,KAAKD,MAAQA,MACbC,KAAKD,MAAMc,OAEXb,KAAKD,MAAMe,WACXd,KAAKD,MAAMgB,UAAUC,SAAS,sCAC9BhB,KAAKD,MAAMgB,UAAUE,QAAQ,OAAS,MAAO,KAG7CjB,KAAKD,MAAMgB,UAAUG,GAAGhC,YAAYiC,OAAQ,WAExCnB,KAAKD,MAAMgB,UAAUE,QAAQ,OAAS,QAAS,KAC/CG,YAAW,WACPrB,MAAMsB,YACP,KACHrB,KAAKD,MAAMuB,QAAQ,KACrBV,KAAKhB,OAGPI,KAAKD,MAAMgB,UAAUG,GAAGhC,YAAYqC,MAAO,WACvCvB,KAAKD,MAAMgB,UAAUS,OAAO,0EAC9BZ,KAAKhB,OAIPI,KAAKD,MAAMgB,UAAUG,GAAGhC,YAAYuC,KAAMzB,KAAK0B,WAAWd,KAAKZ,OAE/DA,KAAKD,MAAMgB,UAAUG,GAAG,SAAU,OAAQlB,KAAK2B,eAAef,KAAKZ,OAC5DJ,KAAKG,OACda,KAAKhB,OAGXb,EAAE6C,UAAUV,GAAG,QAAS3B,UAAU,eAE1BU,OAASlB,EAAEa,MAAMiC,KAAK,gBACtB5B,OAAO,GACPD,KAAKP,OAASQ,OACdC,cAAgBlB,IAAImB,WAAW,oBAAqB,sBAEpDH,KAAKP,QAAU,EACfS,cAAgBlB,IAAImB,WAAW,oBAAqB,qBAEjDD,cAAcE,KAAK,SAASC,cAExBpB,aAAaqB,OAAO,CACvBC,KAAMtB,aAAauB,MAAMC,YACzBJ,MAAOA,MACPK,KAAMV,KAAKW,aAEjBC,KAAKZ,OAAOI,KAAK,SAASL,cAGxBC,KAAKD,MAAQA,MACbC,KAAKD,MAAMc,OAEXb,KAAKD,MAAMe,WACXd,KAAKD,MAAMgB,UAAUC,SAAS,sCAC9BhB,KAAKD,MAAMgB,UAAUE,QAAQ,OAAS,MAAO,KAG7CjB,KAAKD,MAAMgB,UAAUG,GAAGhC,YAAYiC,OAAQ,WAExCnB,KAAKD,MAAMgB,UAAUE,QAAQ,OAAS,QAAS,KAC/CG,YAAW,WACPrB,MAAMsB,YACP,KACHrB,KAAKD,MAAMuB,QAAQ,KACrBV,KAAKhB,OAGPI,KAAKD,MAAMgB,UAAUG,GAAGhC,YAAYqC,MAAO,WACvCvB,KAAKD,MAAMgB,UAAUS,OAAO,0EAC9BZ,KAAKhB,OAIPI,KAAKD,MAAMgB,UAAUG,GAAGhC,YAAYuC,KAAMzB,KAAK0B,WAAWd,KAAKZ,OAE/DA,KAAKD,MAAMgB,UAAUG,GAAG,SAAU,OAAQlB,KAAK2B,eAAef,KAAKZ,OAC5DJ,KAAKG,OACda,KAAKhB,WAanBN,cAAcQ,UAAUa,QAAU,SAASmB,eACf,IAAbA,WACPA,SAAW,QAIXC,OAAS,CAACtC,OAAOG,KAAKH,OAAQC,SAASE,KAAKF,SAAUC,OAAOC,KAAKD,OAAQqC,aAAcC,KAAKC,UAAUJ,kBACpG3C,SAASgD,aAAa,mBAAoB,sBAAuBvC,KAAKJ,UAAWuC,SAQ5FzC,cAAcQ,UAAUsC,6BAA+B,SAAS3C,aACvDM,MAAMsC,OAGXhD,EAAEiD,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,gCAIzBV,OAAS,CAAEW,GAAIjD,OAAQkD,QAASJ,EAAEK,IAAID,SACtCE,WAAc1D,SAASgD,aAAa,mBAAoB,wBAAyBvC,KAAKJ,UAAWuC,QAErG9C,aAAaqB,OAAO,CAChBD,MAAOrB,IAAImB,WAAW,aAAc,oBACpCO,KAAMmC,aACPC,MAAK,SAAS/C,OAEbA,MAAMc,OACNd,MAAMgB,UAAUgC,KAAK,wBAAwB7B,GAAG,SAAS,WACzDnB,MAAMsC,OACNjB,YAAW,WACN4B,OAAOC,SAASC,WAClB,YAUX5D,cAAcQ,UAAUqD,4BAA8B,SAAStB,WAGtD9B,MAAMuB,QAAQ1B,KAAKe,QAAQkB,QAUpCvC,cAAcQ,UAAU6B,eAAiB,SAASyB,GAE9CA,EAAEC,qBAGEC,SAAW1D,KAAKG,MAAMgB,UAAUgC,KAAK,QAAQQ,YAG7CC,QAAUpE,KAAKqE,KAAK,CAAC,CACrBC,WAAY,iDAEZC,KAAM,CAACnE,UAAWI,KAAKJ,UAAWwC,aAAcC,KAAKC,UAAUoB,WAC/DM,KAAMhE,KAAKuD,4BAA4BvC,KAAKhB,KAAM0D,aAElDtD,KAAMJ,KACV4D,QAAQ,GAAGV,MAAK,SAASe,MACrB7D,KAAKoC,6BAA6ByB,UAW1CvE,cAAcQ,UAAU4B,WAAa,SAAS0B,GAC1CA,EAAEC,iBACSzD,KACNG,MAAMgB,UAAUgC,KAAK,QAAQe,UAGqB,CAUvDjE,KAAM,SAASN,SAAUC,UAAUC,OAAQC,SAAUC,eAC1C,IAAIL,cAAcC,SAAUC,UAAWC,OAAQC,SAAUC,SAEpEoE,cAAe,SAASrB,GAAInC,KAAMf,UAAUwE,cAEpCjC,OAAS,CAAEW,GAAIA,GAAInC,KAAKA,MACxBsC,WAAc1D,SAASgD,aAAa,mBAAoB,gBAAiB3C,UAAWuC,QAExF9C,aAAaqB,OAAO,CAChBD,MAAO2D,SACPtD,KAAMmC,aACPC,MAAK,SAAS/C,OAEbA,MAAMc,OACNd,MAAMe,WACNf,MAAMgB,UAAUG,GAAGhC,YAAYiC,OAAQ,WACnCpB,MAAMuB,QAAQ,KAChBV,KAAKhB,OACPG,MAAMgB,UAAUgC,KAAK,wBAAwB7B,GAAG,SAAS,WACrDnB,MAAMsC,OACNjB,YAAW,WACNrB,MAAMsB,YACR,YAIf4C,iBAAkB,SAASC,KAAKC,aACrBnF,IAAIoF,YAAY,CAAC,CACpBC,IAAK,mBACLC,UAAW,oBACZ,CACCD,IAAK,gBACLC,UAAW,mBACXC,MAAMJ,QACN/D,KAAK,SAASoE,GACdvF,aAAaqB,OAAO,CAChBD,MAAOmE,EAAE,GACTjE,KAAMtB,aAAauB,MAAMiE,QACzB/D,KAAM8D,EAAE,GACRE,OAAQ,oEAAoEnC,EAAEoC,KAAKxE,WAAW,MAAO,UAA7F,uFACgEoC,EAAEoC,KAAKxE,WAAW,KAAM,UAAU,cAC3G2C,KAAK,SAAS/C,YACRA,MAAQA,MACbA,MAAMgB,UAAUgC,KAAK,wBAAwB7B,GAAG,QAAS,WACrD8B,OAAOC,SAAS2B,KAAM,gBAAgBV,KAAK,+BAAiC3B,EAAEK,IAAID,SACpF/B,KAAKhB,OACPG,MAAM8E,YAAY9B,KAAK,0BAA0B7B,GAAG,SAAS,WACzDnB,MAAMuB,QAAQ,IACdvB,MAAMsC,UAEVtC,MAAMc,QACRD,KAAKhB,QACTgB,KAAKhB,QAEXkF,kBAAmB,WACf/F,EAAE6C,UAAUV,GAAG,SAAU,oBAAoB,eACrC6D,gBAAkBhG,EAAEa,MAAMmD,KAAK,mBAAmBiC,MAC1CzC,EAAEoC,KAAKxE,WAAW,oBAAqB,wBAC/C4E,iBAAsC,QAAnBA,gBAA2B,CAChC3F,KAAKqE,KAAK,CAAC,CACrBC,WAAY,kCACZC,KAAM,CACFsB,MAAOF,oBAGP,GAAGjC,MAAK,SAASe,UAClBqB,SAAY,sBAAsB3C,EAAEoC,KAAKxE,WAAW,oBAAqB,oBAAoB,YAC5FpB,EAAEoG,KAAKlD,KAAKmD,MAAMvB,KAAKwB,cAAc,SAAUC,MAAOC,OAClDL,UAAY,mBAAqBI,MAAM5C,GAAK,KAAM6C,MAAMC,SAAW,eAEvEzG,EAAE,oBAAoB0G,KAAKP,aAChCtB,MAAK,WAEJ8B,MAAM,0CACN1C,OAAOC,SAASC,gBAEjB,CAEHnE,EAAE,oBAAoB0G,KADN,sDAM5BE,gBAAiB,SAASC,OAAQnG,QAC1BA,OACcL,KAAKqE,KAAK,CAAC,CACzBC,WAAY,mCACZC,KAAM,CACFiC,OAAQA,OACRnG,OAAQA,OACRoG,IAAI,MAGA,GAAG/C,MAAK,SAASe,MACjB9E,EAAE,gBAAgB0G,KAAK5B,KAAK/B,aACjC8B,MAAK,WAEJ8B,MAAM,6CAIV3G,EAAE6C,UAAUV,GAAG,SAAU,WAAW,eAE5B4E,KAAO/G,EAAG,mBAAoBgH,KAAM,SACpCF,IAAM9G,EAAG,mCAAoCiG,MACvC,aAAPa,KACC7C,OAAOC,SAASC,SAEN9D,KAAKqE,KAAK,CAAC,CACzBC,WAAY,mCACZC,KAAM,CACFiC,OAAQA,OACRnG,OAAQqG,KACRD,IAAKA,QAGD,GAAG/C,MAAK,SAASe,MACjB9E,EAAE,gBAAgB0G,KAAK5B,KAAK/B,aACjC8B,MAAK,WAEJ8B,MAAM,iDAMtBM,gBAAiB,SAASJ,OAAQnG,QAC9BV,EAAG,kBAAmBkH,QAAO,eACrBvD,GAAK3D,EAAG,kBAAmBgH,KAAM,SACjCG,WAAanH,EAAG,kCAAmCiG,MACzC5F,KAAKqE,KAAK,CAAC,CACrBC,WAAY,mCACZC,KAAM,CACFjB,GAAIA,GACJwD,WAAYA,eAGZ,GAAGpD,MAAK,SAASe,MACjB9E,EAAE,wBAAwB0G,KAAK5B,KAAK/B,aACzC8B,MAAK,WAEJ8B,MAAM,iDAMlBS,KAAM,WACFpH,EAAE6C,UAAUV,GAAG,QAAS,uBAAuB,WAC3C8B,OAAOC,SAASC"}