{"version":3,"file":"newonlinetests.min.js","sources":["../src/newonlinetests.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_onlinetests/NewOnlinetest\n * @class      NewOnlinetest\n * @package    local_onlinetests\n * @copyright  2019 Sreenivas\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui', 'local_onlinetests/jquery.dataTables'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewOnlinetest = function(selector, contextid, testid) {\n        this.contextid = contextid;\n        this.testid = testid;\n        var self = this;\n        self.init(selector);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewOnlinetest.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewOnlinetest.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewOnlinetest.prototype.init = function(selector) {\n        var self = this;\n        $(document).on('click', selector, function(){\n            \n            var editid = $(this).data(\"value\");\n            if (editid) {\n                self.testid = editid;\n                update_string = Str.get_string('editonlinetests', 'local_onlinetests');\n            } else {\n                self.testid = -1;\n                update_string = Str.get_string('createonlinetest', 'local_onlinetests');\n            }\n            return update_string.then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n                self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n                self.modal.getRoot().addClass('openLMStransition local_onlinetests');\n                self.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                    self.modal.setBody('');\n                }.bind(this));\n    \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                \n                return this.modal;\n            }.bind(this));\n        });        \n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewOnlinetest.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {testid:this.testid, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('local_onlinetests', 'new_onlinetest_form', this.contextid, params);\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {modal}\n     */\n    NewOnlinetest.prototype.handleFormSubmissionResponse = function(testid) {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n\n        // modal to show the procedure thereof\n        var params = { id: testid, sesskey: M.cfg.sesskey};\n        var returndata =  Fragment.loadFragment('local_onlinetests', 'addquestions_or_enrol', this.contextid, params);\n\n\n        ModalFactory.create({\n            title: Str.get_string('pluginname', 'local_onlinetests'),\n            body: returndata\n        }).done(function(modal) {\n            // Do what you want with your new modal.\n            modal.show();\n            modal.getRoot().find('[data-action=\"hide\"]').on('click', function() {\n            modal.hide();\n            setTimeout(function(){\n                 window.location.reload();\n            }, 500);\n            });\n        });\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewOnlinetest.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewOnlinetest.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        var promise = Ajax.call([{\n            methodname: 'local_onlinetests_submit_create_onlinetest_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n        var self =this;\n        promise[0].done(function(resp){\n            self.handleFormSubmissionResponse(resp);        \n        });\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewOnlinetest.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_onlinetests/NewOnlinetest */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the test.\n         * @param {int} testid examid\n         * @return {Promise}\n         */\n        init: function(selector, contextid, testid) {\n            return new NewOnlinetest(selector, contextid, testid);\n        },\n        getdepartmentlist: function() {\n            // $(document).on('change', '#id_costcenterid', function() {\n            //     var costcentervalue = $(this).find(\"option:selected\").val();\n            //     var title = M.util.get_string(\"select_department\", \"local_onlinetests\");\n            //     if (costcentervalue && costcentervalue != 'null') {\n            //         var promise = Ajax.call([{\n            //             methodname: 'local_costcenter_departmentlist',\n            //             args: {\n            //                 orgid: costcentervalue\n            //             },\n            //         }]);\n            //         promise[0].done(function(resp) {\n            //             var template =  '<option value=null>Select Department</option>';                                    \n            //             $.each(JSON.parse(resp.departments), function( index, value) {\n            //                 template += '<option value = ' + value.id + ' >' +value.fullname + '</option>';\n            //             });\n            //             $('#id_departmentid').html(template);\n            //         }).fail(function() {\n            //                 // do something with the exception\n            //             alert('Error occured while processing request');\n            //             window.location.reload();\n            //         });\n            //     } else {\n            //         var template =  '<option value=0>All</option>';\n            //         $('#id_departmentid').html(template);\n            //     }\n            // });\n            // $(document).on('change', '#id_costcenterid', function() {\n            //     var costcentervalue = $(this).find(\"option:selected\").val();\n            //     var title = M.util.get_string(\"select_department\", \"local_onlinetests\");\n            //     if (costcentervalue && costcentervalue != 'null') {\n            //         var promise = Ajax.call([{\n            //             methodname: 'local_costcenter_subdepartmentlist',\n            //             args: {\n            //                 orgid: costcentervalue\n            //             },\n            //         }]);\n            //         promise[0].done(function(resp) {\n            //             var template =  '<option value=null>All</option>';                                    \n            //             $.each(JSON.parse(resp.departments), function( index, value) {\n            //                 template += '<option value = ' + value.id + ' >' +value.fullname + '</option>';\n            //             });\n            //             $('#id_departmentid').html(template);\n            //         }).fail(function() {\n            //                 // do something with the exception\n            //             alert('Error occured while processing request');\n            //             window.location.reload();\n            //         });\n            //     } else {\n            //         var template =  '<option value=0>All</option>';\n            //         $('#id_departmentid').html(template);\n            //     }\n            // });\n            // $(document).on('change', '#id_departmentid', function() {\n            //     var departmentvalue = $(this).find(\"option:selected\").val();\n            //     var title = M.util.get_string(\"select_department\", \"local_onlinetests\");\n            //     if (departmentvalue && departmentvalue != 'null') {\n            //         var promise = Ajax.call([{\n            //             methodname: 'local_costcenter_subdepartmentlist',\n            //             args: {\n            //                 orgid: costcentervalue\n            //             },\n            //         }]);\n            //         promise[0].done(function(resp) {\n            //             var template =  '<option value=0>All</option>';                                    \n            //             $.each(JSON.parse(resp.subdepartments), function( index, value) {\n            //                 template += '<option value = ' + value.id + ' >' +value.fullname + '</option>';\n            //             });\n            //             $('#id_departmentid').html(template);\n            //         }).fail(function() {\n            //                 // do something with the exception\n            //             alert('Error occured while processing request');\n            //             window.location.reload();\n            //         });\n            //     } else {\n            //         var template =  '<option value=null>Select Department</option>';\n            //         $('#id_departmentid').html(template);\n            //     }\n            // });\n        },\n        enrolledusers: function(args) {\n            var clicked = $('.onlinetest_users_count').hasClass('clicked');\n            $('.onlinetest_users_count').addClass('clicked');\n            if(!clicked){\n                // modal to show the procedure thereof\n                var params = { testid: args.testid, type:args.type};\n                var returndata =  Fragment.loadFragment('local_onlinetests', 'enrolled_users', args.contextid, params);\n\n                ModalFactory.create({\n                    title: args.testname,\n                    body: returndata\n                }).done(function(modal) {\n                    // Do what you want with your new modal.\n                    modal.show();\n                    modal.setLarge();\n                    modal.getRoot().on(ModalEvents.hidden, function() {\n                        modal.setBody('');\n                    }.bind(this));\n                    modal.getRoot().find('[data-action=\"hide\"]').on('click', function() {\n                        modal.hide();\n                        $('.onlinetest_users_count').removeClass('clicked');\n                        setTimeout(function(){\n                             modal.destroy();\n                        }, 500);\n                    });\n                });\n            }\n        },\n        deleteonlinetest: function(elem) {\n            return Str.get_strings([{\n                key: 'deleteonlinetest',\n                component: 'local_onlinetests'\n            }, {\n                key: 'confirmdelete',\n                component: 'local_onlinetests'\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+M.util.get_string(\"yes\", \"moodle\")+'</button>&nbsp;' +\n            '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+M.util.get_string(\"no\", \"moodle\")+'</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        window.location.href ='index.php?delete='+elem+'&confirm=1&sesskey=' + M.cfg.sesskey;\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n          suspendonlinetest: function(elem,visible,args) {\n            console.log\n            return Str.get_strings([{\n                key: 'suspendconfirm',\n                component: 'local_onlinetests',\n                param: args,\n            },\n            {\n                key: 'inactiveconfirm',\n                component: 'local_onlinetests',\n                param: args,\n             \n            },\n            {\n                key: 'activeconfirm',\n                component: 'local_onlinetests',\n                param: args,\n            }]).then(function(s) {\n                if (elem.status == \"enable\") {\n                    s[1] = s[1];\n                   // var confirm = ModalFactory.types.CONFIRM;\n                 } else if (elem.status == \"disable\") {\n                    s[1] = s[2];\n                    //var confirm = ModalFactory.types.CONFIRM;\n                 }\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+M.util.get_string(\"yes\", \"local_onlinetests\")+'</button>&nbsp;' +\n            '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+M.util.get_string(\"no\", \"local_onlinetests\")+'</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        window.location.href = M.cfg.wwwroot+'/local/onlinetests/index.php?id='+elem.id+'&visible='+elem.visible+'&hide=1&sesskey='+ M.cfg.sesskey;\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewOnlinetest","selector","contextid","testid","this","init","prototype","modal","self","document","on","editid","data","update_string","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","show","setLarge","getRoot","addClass","animate","hidden","setTimeout","destroy","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","id","sesskey","cfg","returndata","done","find","window","location","reload","handleFormSubmissionFailure","e","preventDefault","formData","serialize","promise","call","methodname","args","fail","resp","submit","getdepartmentlist","enrolledusers","clicked","hasClass","testname","removeClass","deleteonlinetest","elem","get_strings","key","component","s","DEFAULT","footer","util","href","getFooter","suspendonlinetest","visible","console","log","param","status","wwwroot"],"mappings":"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"}