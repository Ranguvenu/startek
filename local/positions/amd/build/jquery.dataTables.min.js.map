{"version":3,"file":"jquery.dataTables.min.js","sources":["../src/jquery.dataTables.js"],"sourcesContent":["/*! DataTables 1.10.15\r\n * Â©2008-2017 SpryMedia Ltd - datatables.net/license\r\n */\r\n\r\n/**\r\n * @summary     DataTables\r\n * @description Paginate, search and order HTML tables\r\n * @version     1.10.15\r\n * @file        jquery.dataTables.js\r\n * @author      SpryMedia Ltd\r\n * @contact     www.datatables.net\r\n * @copyright   Copyright 2008-2017 SpryMedia Ltd.\r\n *\r\n * This source file is free software, available under the following license:\r\n *   MIT license - http://datatables.net/license\r\n *\r\n * This source file is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\r\n *\r\n * For details please refer to: http://www.datatables.net\r\n */\r\n\r\n/*jslint evil: true, undef: true, browser: true */\r\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\r\n\r\n(function( factory ) {\r\n    \"use strict\";\r\n\r\n    if ( typeof define === 'function' && define.amd ) {\r\n        // AMD\r\n        define( ['jquery'], function ( $ ) {\r\n            return factory( $, window, document );\r\n        } );\r\n    }\r\n    else if ( typeof exports === 'object' ) {\r\n        // CommonJS\r\n        module.exports = function (root, $) {\r\n            if ( ! root ) {\r\n                // CommonJS environments without a window global must pass a\r\n                // root. This will give an error otherwise\r\n                root = window;\r\n            }\r\n\r\n            if ( ! $ ) {\r\n                $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\r\n                    require('jquery') :\r\n                    require('jquery')( root );\r\n            }\r\n\r\n            return factory( $, root, root.document );\r\n        };\r\n    }\r\n    else {\r\n        // Browser\r\n        factory( jQuery, window, document );\r\n    }\r\n}\r\n(function( $, window, document, undefined ) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * DataTables is a plug-in for the jQuery Javascript library. It is a highly\r\n     * flexible tool, based upon the foundations of progressive enhancement,\r\n     * which will add advanced interaction controls to any HTML table. For a\r\n     * full list of features please refer to\r\n     * [DataTables.net](href=\"http://datatables.net).\r\n     *\r\n     * Note that the `DataTable` object is not a global variable but is aliased\r\n     * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\r\n     * be  accessed.\r\n     *\r\n     *  @class\r\n     *  @param {object} [init={}] Configuration object for DataTables. Options\r\n     *    are defined by {@link DataTable.defaults}\r\n     *  @requires jQuery 1.7+\r\n     *\r\n     *  @example\r\n     *    // Basic initialisation\r\n     *    $(document).ready( function {\r\n     *      $('#example').dataTable();\r\n     *    } );\r\n     *\r\n     *  @example\r\n     *    // Initialisation with configuration options - in this case, disable\r\n     *    // pagination and sorting.\r\n     *    $(document).ready( function {\r\n     *      $('#example').dataTable( {\r\n     *        \"paginate\": false,\r\n     *        \"sort\": false\r\n     *      } );\r\n     *    } );\r\n     */\r\n    var DataTable = function ( options )\r\n    {\r\n        /**\r\n         * Perform a jQuery selector action on the table's TR elements (from the tbody) and\r\n         * return the resulting jQuery object.\r\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n         *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\r\n         *    criterion (\"applied\") or all TR elements (i.e. no filter).\r\n         *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\r\n         *    Can be either 'current', whereby the current sorting of the table is used, or\r\n         *    'original' whereby the original order the data was read into the table is used.\r\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n         *    'current' and filter is 'applied', regardless of what they might be given as.\r\n         *  @returns {object} jQuery object, filtered by the given selector.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Highlight every second row\r\n         *      oTable.$('tr:odd').css('backgroundColor', 'blue');\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Filter to rows with 'Webkit' in them, add a background colour and then\r\n         *      // remove the filter, thus highlighting the 'Webkit' rows only.\r\n         *      oTable.fnFilter('Webkit');\r\n         *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\r\n         *      oTable.fnFilter('');\r\n         *    } );\r\n         */\r\n        this.$ = function ( sSelector, oOpts )\r\n        {\r\n            return this.api(true).$( sSelector, oOpts );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Almost identical to $ in operation, but in this case returns the data for the matched\r\n         * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\r\n         * rather than any descendants, so the data can be obtained for the row/cell. If matching\r\n         * rows are found, the data returned is the original data array/object that was used to\r\n         * create the row (or a generated array if from a DOM source).\r\n         *\r\n         * This method is often useful in-combination with $ where both functions are given the\r\n         * same parameters and the array indexes will match identically.\r\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n         *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\r\n         *    criterion (\"applied\") or all elements (i.e. no filter).\r\n         *  @param {string} [oOpts.order=current] Order of the data in the processed array.\r\n         *    Can be either 'current', whereby the current sorting of the table is used, or\r\n         *    'original' whereby the original order the data was read into the table is used.\r\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n         *    'current' and filter is 'applied', regardless of what they might be given as.\r\n         *  @returns {array} Data for the matched elements. If any elements, as a result of the\r\n         *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\r\n         *    entry in the array.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Get the data from the first row in the table\r\n         *      var data = oTable._('tr:first');\r\n         *\r\n         *      // Do something useful with the data\r\n         *      alert( \"First cell is: \"+data[0] );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Filter to 'Webkit' and get all data for\r\n         *      oTable.fnFilter('Webkit');\r\n         *      var data = oTable._('tr', {\"search\": \"applied\"});\r\n         *\r\n         *      // Do something with the data\r\n         *      alert( data.length+\" rows matched the search\" );\r\n         *    } );\r\n         */\r\n        this._ = function ( sSelector, oOpts )\r\n        {\r\n            return this.api(true).rows( sSelector, oOpts ).data();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Create a DataTables Api instance, with the currently selected tables for\r\n         * the Api's context.\r\n         * @param {boolean} [traditional=false] Set the API instance's context to be\r\n         *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\r\n         *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\r\n         *   or if all tables captured in the jQuery object should be used.\r\n         * @return {DataTables.Api}\r\n         */\r\n        this.api = function ( traditional )\r\n        {\r\n            return traditional ?\r\n                new _Api(\r\n                    _fnSettingsFromNode( this[ _ext.iApiIndex ] )\r\n                ) :\r\n                new _Api( this );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Add a single new row or multiple rows of data to the table. Please note\r\n         * that this is suitable for client-side processing only - if you are using\r\n         * server-side processing (i.e. \"bServerSide\": true), then to add data, you\r\n         * must add it to the data source, i.e. the server-side, through an Ajax call.\r\n         *  @param {array|object} data The data to be added to the table. This can be:\r\n         *    <ul>\r\n         *      <li>1D array of data - add a single row with the data provided</li>\r\n         *      <li>2D array of arrays - add multiple rows in a single call</li>\r\n         *      <li>object - data object when using <i>mData</i></li>\r\n         *      <li>array of objects - multiple data objects when using <i>mData</i></li>\r\n         *    </ul>\r\n         *  @param {bool} [redraw=true] redraw the table or not\r\n         *  @returns {array} An array of integers, representing the list of indexes in\r\n         *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\r\n         *    the table.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    // Global var for counter\r\n         *    var giCount = 2;\r\n         *\r\n         *    $(document).ready(function() {\r\n         *      $('#example').dataTable();\r\n         *    } );\r\n         *\r\n         *    function fnClickAddRow() {\r\n         *      $('#example').dataTable().fnAddData( [\r\n         *        giCount+\".1\",\r\n         *        giCount+\".2\",\r\n         *        giCount+\".3\",\r\n         *        giCount+\".4\" ]\r\n         *      );\r\n         *\r\n         *      giCount++;\r\n         *    }\r\n         */\r\n        this.fnAddData = function( data, redraw )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            /* Check if we want to add multiple rows or not */\r\n            var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\r\n                api.rows.add( data ) :\r\n                api.row.add( data );\r\n        \r\n            if ( redraw === undefined || redraw ) {\r\n                api.draw();\r\n            }\r\n        \r\n            return rows.flatten().toArray();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * This function will make DataTables recalculate the column sizes, based on the data\r\n         * contained in the table and the sizes applied to the columns (in the DOM, CSS or\r\n         * through the sWidth parameter). This can be useful when the width of the table's\r\n         * parent element changes (for example a window resize).\r\n         *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable( {\r\n         *        \"sScrollY\": \"200px\",\r\n         *        \"bPaginate\": false\r\n         *      } );\r\n         *\r\n         *      $(window).on('resize', function () {\r\n         *        oTable.fnAdjustColumnSizing();\r\n         *      } );\r\n         *    } );\r\n         */\r\n        this.fnAdjustColumnSizing = function ( bRedraw )\r\n        {\r\n            var api = this.api( true ).columns.adjust();\r\n            var settings = api.settings()[0];\r\n            var scroll = settings.oScroll;\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw( false );\r\n            }\r\n            else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\r\n                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\r\n                _fnScrollDraw( settings );\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Quickly and simply clear a table\r\n         *  @param {bool} [bRedraw=true] redraw the table or not\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\r\n         *      oTable.fnClearTable();\r\n         *    } );\r\n         */\r\n        this.fnClearTable = function( bRedraw )\r\n        {\r\n            var api = this.api( true ).clear();\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw();\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * The exact opposite of 'opening' a row, this function will close any rows which\r\n         * are currently 'open'.\r\n         *  @param {node} nTr the table row to 'close'\r\n         *  @returns {int} 0 on success, or 1 if failed (can't find the row)\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable;\r\n         *\r\n         *      // 'open' an information row when a row is clicked on\r\n         *      $('#example tbody tr').click( function () {\r\n         *        if ( oTable.fnIsOpen(this) ) {\r\n         *          oTable.fnClose( this );\r\n         *        } else {\r\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n         *        }\r\n         *      } );\r\n         *\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnClose = function( nTr )\r\n        {\r\n            this.api( true ).row( nTr ).child.hide();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Remove a row for the table\r\n         *  @param {mixed} target The index of the row from aoData to be deleted, or\r\n         *    the TR element you want to delete\r\n         *  @param {function|null} [callBack] Callback function\r\n         *  @param {bool} [redraw=true] Redraw the table or not\r\n         *  @returns {array} The row that was deleted\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Immediately remove the first row\r\n         *      oTable.fnDeleteRow( 0 );\r\n         *    } );\r\n         */\r\n        this.fnDeleteRow = function( target, callback, redraw )\r\n        {\r\n            var api = this.api( true );\r\n            var rows = api.rows( target );\r\n            var settings = rows.settings()[0];\r\n            var data = settings.aoData[ rows[0][0] ];\r\n        \r\n            rows.remove();\r\n        \r\n            if ( callback ) {\r\n                callback.call( this, settings, data );\r\n            }\r\n        \r\n            if ( redraw === undefined || redraw ) {\r\n                api.draw();\r\n            }\r\n        \r\n            return data;\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Restore the table to it's original state in the DOM by removing all of DataTables\r\n         * enhancements, alterations to the DOM structure of the table and event listeners.\r\n         *  @param {boolean} [remove=false] Completely remove the table from the DOM\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\r\n         *      var oTable = $('#example').dataTable();\r\n         *      oTable.fnDestroy();\r\n         *    } );\r\n         */\r\n        this.fnDestroy = function ( remove )\r\n        {\r\n            this.api( true ).destroy( remove );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Redraw the table\r\n         *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\r\n         *      oTable.fnDraw();\r\n         *    } );\r\n         */\r\n        this.fnDraw = function( complete )\r\n        {\r\n            // Note that this isn't an exact match to the old call to _fnDraw - it takes\r\n            // into account the new data, but can hold position.\r\n            this.api( true ).draw( complete );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Filter the input based on data\r\n         *  @param {string} sInput String to filter the table on\r\n         *  @param {int|null} [iColumn] Column to limit filtering to\r\n         *  @param {bool} [bRegex=false] Treat as regular expression or not\r\n         *  @param {bool} [bSmart=true] Perform smart filtering or not\r\n         *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\r\n         *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Sometime later - filter...\r\n         *      oTable.fnFilter( 'test string' );\r\n         *    } );\r\n         */\r\n        this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            if ( iColumn === null || iColumn === undefined ) {\r\n                api.search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n            }\r\n            else {\r\n                api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n            }\r\n        \r\n            api.draw();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get the data for the whole table, an individual row or an individual cell based on the\r\n         * provided parameters.\r\n         *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\r\n         *    a TR node then the data source for the whole row will be returned. If given as a\r\n         *    TD/TH cell node then iCol will be automatically calculated and the data for the\r\n         *    cell returned. If given as an integer, then this is treated as the aoData internal\r\n         *    data index for the row (see fnGetPosition) and the data for that row used.\r\n         *  @param {int} [col] Optional column index that you want the data of.\r\n         *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\r\n         *    returned. If mRow is defined, just data for that row, and is iCol is\r\n         *    defined, only data for the designated cell is returned.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    // Row data\r\n         *    $(document).ready(function() {\r\n         *      oTable = $('#example').dataTable();\r\n         *\r\n         *      oTable.$('tr').click( function () {\r\n         *        var data = oTable.fnGetData( this );\r\n         *        // ... do something with the array / object of data for the row\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Individual cell data\r\n         *    $(document).ready(function() {\r\n         *      oTable = $('#example').dataTable();\r\n         *\r\n         *      oTable.$('td').click( function () {\r\n         *        var sData = oTable.fnGetData( this );\r\n         *        alert( 'The cell clicked on had the value of '+sData );\r\n         *      } );\r\n         *    } );\r\n         */\r\n        this.fnGetData = function( src, col )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            if ( src !== undefined ) {\r\n                var type = src.nodeName ? src.nodeName.toLowerCase() : '';\r\n        \r\n                return col !== undefined || type == 'td' || type == 'th' ?\r\n                    api.cell( src, col ).data() :\r\n                    api.row( src ).data() || null;\r\n            }\r\n        \r\n            return api.data().toArray();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get an array of the TR nodes that are used in the table's body. Note that you will\r\n         * typically want to use the '$' API method in preference to this as it is more\r\n         * flexible.\r\n         *  @param {int} [iRow] Optional row index for the TR element you want\r\n         *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\r\n         *    in the table's body, or iRow is defined, just the TR element requested.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Get the nodes from the table\r\n         *      var nNodes = oTable.fnGetNodes( );\r\n         *    } );\r\n         */\r\n        this.fnGetNodes = function( iRow )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            return iRow !== undefined ?\r\n                api.row( iRow ).node() :\r\n                api.rows().nodes().flatten().toArray();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get the array indexes of a particular cell from it's DOM element\r\n         * and column index including hidden columns\r\n         *  @param {node} node this can either be a TR, TD or TH in the table's body\r\n         *  @returns {int} If nNode is given as a TR, then a single index is returned, or\r\n         *    if given as a cell, an array of [row index, column index (visible),\r\n         *    column index (all)] is given.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      $('#example tbody td').click( function () {\r\n         *        // Get the position of the current data from the node\r\n         *        var aPos = oTable.fnGetPosition( this );\r\n         *\r\n         *        // Get the data array for this row\r\n         *        var aData = oTable.fnGetData( aPos[0] );\r\n         *\r\n         *        // Update the data array and return the value\r\n         *        aData[ aPos[1] ] = 'clicked';\r\n         *        this.innerHTML = 'clicked';\r\n         *      } );\r\n         *\r\n         *      // Init DataTables\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnGetPosition = function( node )\r\n        {\r\n            var api = this.api( true );\r\n            var nodeName = node.nodeName.toUpperCase();\r\n        \r\n            if ( nodeName == 'TR' ) {\r\n                return api.row( node ).index();\r\n            }\r\n            else if ( nodeName == 'TD' || nodeName == 'TH' ) {\r\n                var cell = api.cell( node ).index();\r\n        \r\n                return [\r\n                    cell.row,\r\n                    cell.columnVisible,\r\n                    cell.column\r\n                ];\r\n            }\r\n            return null;\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Check to see if a row is 'open' or not.\r\n         *  @param {node} nTr the table row to check\r\n         *  @returns {boolean} true if the row is currently open, false otherwise\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable;\r\n         *\r\n         *      // 'open' an information row when a row is clicked on\r\n         *      $('#example tbody tr').click( function () {\r\n         *        if ( oTable.fnIsOpen(this) ) {\r\n         *          oTable.fnClose( this );\r\n         *        } else {\r\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n         *        }\r\n         *      } );\r\n         *\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnIsOpen = function( nTr )\r\n        {\r\n            return this.api( true ).row( nTr ).child.isShown();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * This function will place a new row directly after a row which is currently\r\n         * on display on the page, with the HTML contents that is passed into the\r\n         * function. This can be used, for example, to ask for confirmation that a\r\n         * particular record should be deleted.\r\n         *  @param {node} nTr The table row to 'open'\r\n         *  @param {string|node|jQuery} mHtml The HTML to put into the row\r\n         *  @param {string} sClass Class to give the new TD cell\r\n         *  @returns {node} The row opened. Note that if the table row passed in as the\r\n         *    first parameter, is not found in the table, this method will silently\r\n         *    return.\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable;\r\n         *\r\n         *      // 'open' an information row when a row is clicked on\r\n         *      $('#example tbody tr').click( function () {\r\n         *        if ( oTable.fnIsOpen(this) ) {\r\n         *          oTable.fnClose( this );\r\n         *        } else {\r\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n         *        }\r\n         *      } );\r\n         *\r\n         *      oTable = $('#example').dataTable();\r\n         *    } );\r\n         */\r\n        this.fnOpen = function( nTr, mHtml, sClass )\r\n        {\r\n            return this.api( true )\r\n                .row( nTr )\r\n                .child( mHtml, sClass )\r\n                .show()\r\n                .child()[0];\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Change the pagination - provides the internal logic for pagination in a simple API\r\n         * function. With this function you can have a DataTables table go to the next,\r\n         * previous, first or last pages.\r\n         *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\r\n         *    or page number to jump to (integer), note that page 0 is the first page.\r\n         *  @param {bool} [bRedraw=true] Redraw the table or not\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      oTable.fnPageChange( 'next' );\r\n         *    } );\r\n         */\r\n        this.fnPageChange = function ( mAction, bRedraw )\r\n        {\r\n            var api = this.api( true ).page( mAction );\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw(false);\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Show a particular column\r\n         *  @param {int} iCol The column whose display should be changed\r\n         *  @param {bool} bShow Show (true) or hide (false) the column\r\n         *  @param {bool} [bRedraw=true] Redraw the table or not\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Hide the second column after initialisation\r\n         *      oTable.fnSetColumnVis( 1, false );\r\n         *    } );\r\n         */\r\n        this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\r\n        {\r\n            var api = this.api( true ).column( iCol ).visible( bShow );\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.columns.adjust().draw();\r\n            }\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Get the settings for a particular table for external manipulation\r\n         *  @returns {object} DataTables settings object. See\r\n         *    {@link DataTable.models.oSettings}\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      var oSettings = oTable.fnSettings();\r\n         *\r\n         *      // Show an example parameter from the settings\r\n         *      alert( oSettings._iDisplayStart );\r\n         *    } );\r\n         */\r\n        this.fnSettings = function()\r\n        {\r\n            return _fnSettingsFromNode( this[_ext.iApiIndex] );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Sort the table by a particular column\r\n         *  @param {int} iCol the data index to sort on. Note that this will not match the\r\n         *    'display index' if you have hidden data entries\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Sort immediately with columns 0 and 1\r\n         *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\r\n         *    } );\r\n         */\r\n        this.fnSort = function( aaSort )\r\n        {\r\n            this.api( true ).order( aaSort ).draw();\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Attach a sort listener to an element for a given column\r\n         *  @param {node} nNode the element to attach the sort listener to\r\n         *  @param {int} iColumn the column that a click on this node will sort on\r\n         *  @param {function} [fnCallback] callback function when sort is run\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *\r\n         *      // Sort on column 1, when 'sorter' is clicked on\r\n         *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\r\n         *    } );\r\n         */\r\n        this.fnSortListener = function( nNode, iColumn, fnCallback )\r\n        {\r\n            this.api( true ).order.listener( nNode, iColumn, fnCallback );\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Update a table cell or row - this method will accept either a single value to\r\n         * update the cell with, an array of values with one element for each column or\r\n         * an object in the same format as the original data source. The function is\r\n         * self-referencing in order to make the multi column updates easier.\r\n         *  @param {object|array|string} mData Data to update the cell/row with\r\n         *  @param {node|int} mRow TR element you want to update or the aoData index\r\n         *  @param {int} [iColumn] The column to update, give as null or undefined to\r\n         *    update a whole row.\r\n         *  @param {bool} [bRedraw=true] Redraw the table or not\r\n         *  @param {bool} [bAction=true] Perform pre-draw actions or not\r\n         *  @returns {int} 0 on success, 1 on error\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\r\n         *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\r\n         *    } );\r\n         */\r\n        this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\r\n        {\r\n            var api = this.api( true );\r\n        \r\n            if ( iColumn === undefined || iColumn === null ) {\r\n                api.row( mRow ).data( mData );\r\n            }\r\n            else {\r\n                api.cell( mRow, iColumn ).data( mData );\r\n            }\r\n        \r\n            if ( bAction === undefined || bAction ) {\r\n                api.columns.adjust();\r\n            }\r\n        \r\n            if ( bRedraw === undefined || bRedraw ) {\r\n                api.draw();\r\n            }\r\n            return 0;\r\n        };\r\n        \r\n        \r\n        /**\r\n         * Provide a common method for plug-ins to check the version of DataTables being used, in order\r\n         * to ensure compatibility.\r\n         *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\r\n         *    formats \"X\" and \"X.Y\" are also acceptable.\r\n         *  @returns {boolean} true if this version of DataTables is greater or equal to the required\r\n         *    version, or false if this version of DataTales is not suitable\r\n         *  @method\r\n         *  @dtopt API\r\n         *  @deprecated Since v1.10\r\n         *\r\n         *  @example\r\n         *    $(document).ready(function() {\r\n         *      var oTable = $('#example').dataTable();\r\n         *      alert( oTable.fnVersionCheck( '1.9.0' ) );\r\n         *    } );\r\n         */\r\n        this.fnVersionCheck = _ext.fnVersionCheck;\r\n        \r\n\r\n        var _that = this;\r\n        var emptyInit = options === undefined;\r\n        var len = this.length;\r\n\r\n        if ( emptyInit ) {\r\n            options = {};\r\n        }\r\n\r\n        this.oApi = this.internal = _ext.internal;\r\n\r\n        // Extend with old style plug-in API methods\r\n        for ( var fn in DataTable.ext.internal ) {\r\n            if ( fn ) {\r\n                this[fn] = _fnExternApiFunc(fn);\r\n            }\r\n        }\r\n\r\n        this.each(function() {\r\n            // For each initialisation we want to give it a clean initialisation\r\n            // object that can be bashed around\r\n            var o = {};\r\n            var oInit = len > 1 ? // optimisation for single table case\r\n                _fnExtend( o, options, true ) :\r\n                options;\r\n\r\n            /*global oInit,_that,emptyInit*/\r\n            var i=0, iLen, j, jLen, k, kLen;\r\n            var sId = this.getAttribute( 'id' );\r\n            var bInitHandedOff = false;\r\n            var defaults = DataTable.defaults;\r\n            var $this = $(this);\r\n            \r\n            \r\n            /* Sanity check */\r\n            if ( this.nodeName.toLowerCase() != 'table' )\r\n            {\r\n                _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\r\n                return;\r\n            }\r\n            \r\n            /* Backwards compatibility for the defaults */\r\n            _fnCompatOpts( defaults );\r\n            _fnCompatCols( defaults.column );\r\n            \r\n            /* Convert the camel-case defaults to Hungarian */\r\n            _fnCamelToHungarian( defaults, defaults, true );\r\n            _fnCamelToHungarian( defaults.column, defaults.column, true );\r\n            \r\n            /* Setting up the initialisation object */\r\n            _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\r\n            \r\n            \r\n            \r\n            /* Check to see if we are re-initialising a table */\r\n            var allSettings = DataTable.settings;\r\n            for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\r\n            {\r\n                var s = allSettings[i];\r\n            \r\n                /* Base check on table node */\r\n                if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\r\n                {\r\n                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\r\n                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\r\n            \r\n                    if ( emptyInit || bRetrieve )\r\n                    {\r\n                        return s.oInstance;\r\n                    }\r\n                    else if ( bDestroy )\r\n                    {\r\n                        s.oInstance.fnDestroy();\r\n                        break;\r\n                    }\r\n                    else\r\n                    {\r\n                        _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\r\n                        return;\r\n                    }\r\n                }\r\n            \r\n                /* If the element we are initialising has the same ID as a table which was previously\r\n                 * initialised, but the table nodes don't match (from before) then we destroy the old\r\n                 * instance by simply deleting it. This is under the assumption that the table has been\r\n                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually\r\n                 */\r\n                if ( s.sTableId == this.id )\r\n                {\r\n                    allSettings.splice( i, 1 );\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            /* Ensure the table has an ID - required for accessibility */\r\n            if ( sId === null || sId === \"\" )\r\n            {\r\n                sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\r\n                this.id = sId;\r\n            }\r\n            \r\n            /* Create the settings object for this table and set some of the default parameters */\r\n            var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\r\n                \"sDestroyWidth\": $this[0].style.width,\r\n                \"sInstance\":     sId,\r\n                \"sTableId\":      sId\r\n            } );\r\n            oSettings.nTable = this;\r\n            oSettings.oApi   = _that.internal;\r\n            oSettings.oInit  = oInit;\r\n            \r\n            allSettings.push( oSettings );\r\n            \r\n            // Need to add the instance after the instance after the settings object has been added\r\n            // to the settings array, so we can self reference the table instance if more than one\r\n            oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\r\n            \r\n            // Backwards compatibility, before we apply all the defaults\r\n            _fnCompatOpts( oInit );\r\n            \r\n            if ( oInit.oLanguage )\r\n            {\r\n                _fnLanguageCompat( oInit.oLanguage );\r\n            }\r\n            \r\n            // If the length menu is given, but the init display length is not, use the length menu\r\n            if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\r\n            {\r\n                oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\r\n                    oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\r\n            }\r\n            \r\n            // Apply the defaults and init options to make a single init object will all\r\n            // options defined from defaults and instance options.\r\n            oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\r\n            \r\n            \r\n            // Map the initialisation options onto the settings object\r\n            _fnMap( oSettings.oFeatures, oInit, [\r\n                \"bPaginate\",\r\n                \"bLengthChange\",\r\n                \"bFilter\",\r\n                \"bSort\",\r\n                \"bSortMulti\",\r\n                \"bInfo\",\r\n                \"bProcessing\",\r\n                \"bAutoWidth\",\r\n                \"bSortClasses\",\r\n                \"bServerSide\",\r\n                \"bDeferRender\"\r\n            ] );\r\n            _fnMap( oSettings, oInit, [\r\n                \"asStripeClasses\",\r\n                \"ajax\",\r\n                \"fnServerData\",\r\n                \"fnFormatNumber\",\r\n                \"sServerMethod\",\r\n                \"aaSorting\",\r\n                \"aaSortingFixed\",\r\n                \"aLengthMenu\",\r\n                \"sPaginationType\",\r\n                \"sAjaxSource\",\r\n                \"sAjaxDataProp\",\r\n                \"iStateDuration\",\r\n                \"sDom\",\r\n                \"bSortCellsTop\",\r\n                \"iTabIndex\",\r\n                \"fnStateLoadCallback\",\r\n                \"fnStateSaveCallback\",\r\n                \"renderer\",\r\n                \"searchDelay\",\r\n                \"rowId\",\r\n                [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\r\n                [ \"oSearch\", \"oPreviousSearch\" ],\r\n                [ \"aoSearchCols\", \"aoPreSearchCols\" ],\r\n                [ \"iDisplayLength\", \"_iDisplayLength\" ],\r\n                [ \"bJQueryUI\", \"bJUI\" ]\r\n            ] );\r\n            _fnMap( oSettings.oScroll, oInit, [\r\n                [ \"sScrollX\", \"sX\" ],\r\n                [ \"sScrollXInner\", \"sXInner\" ],\r\n                [ \"sScrollY\", \"sY\" ],\r\n                [ \"bScrollCollapse\", \"bCollapse\" ]\r\n            ] );\r\n            _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\r\n            \r\n            /* Callback functions which are array driven */\r\n            _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\r\n            _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\r\n            _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\r\n            _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\r\n            _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\r\n            _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\r\n            _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\r\n            _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\r\n            _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\r\n            _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\r\n            _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\r\n            \r\n            oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\r\n            \r\n            /* Browser support detection */\r\n            _fnBrowserDetect( oSettings );\r\n            \r\n            var oClasses = oSettings.oClasses;\r\n            \r\n            // @todo Remove in 1.11\r\n            if ( oInit.bJQueryUI )\r\n            {\r\n                /* Use the JUI classes object for display. You could clone the oStdClasses object if\r\n                 * you want to have multiple tables with multiple independent classes\r\n                 */\r\n                $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\r\n            \r\n                if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\r\n                {\r\n                    /* Set the DOM to use a layout suitable for jQuery UI's theming */\r\n                    oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\r\n                }\r\n            \r\n                if ( ! oSettings.renderer ) {\r\n                    oSettings.renderer = 'jqueryui';\r\n                }\r\n                else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\r\n                    oSettings.renderer.header = 'jqueryui';\r\n                }\r\n            }\r\n            else\r\n            {\r\n                $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\r\n            }\r\n            $this.addClass( oClasses.sTable );\r\n            \r\n            \r\n            if ( oSettings.iInitDisplayStart === undefined )\r\n            {\r\n                /* Display start point, taking into account the save saving */\r\n                oSettings.iInitDisplayStart = oInit.iDisplayStart;\r\n                oSettings._iDisplayStart = oInit.iDisplayStart;\r\n            }\r\n            \r\n            if ( oInit.iDeferLoading !== null )\r\n            {\r\n                oSettings.bDeferLoading = true;\r\n                var tmp = $.isArray( oInit.iDeferLoading );\r\n                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\r\n                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\r\n            }\r\n            \r\n            /* Language definitions */\r\n            var oLanguage = oSettings.oLanguage;\r\n            $.extend( true, oLanguage, oInit.oLanguage );\r\n            \r\n            if ( oLanguage.sUrl )\r\n            {\r\n                /* Get the language definitions from a file - because this Ajax call makes the language\r\n                 * get async to the remainder of this function we use bInitHandedOff to indicate that\r\n                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\r\n                 */\r\n                $.ajax( {\r\n                    dataType: 'json',\r\n                    url: oLanguage.sUrl,\r\n                    success: function ( json ) {\r\n                        _fnLanguageCompat( json );\r\n                        _fnCamelToHungarian( defaults.oLanguage, json );\r\n                        $.extend( true, oLanguage, json );\r\n                        _fnInitialise( oSettings );\r\n                    },\r\n                    error: function () {\r\n                        // Error occurred loading language file, continue on as best we can\r\n                        _fnInitialise( oSettings );\r\n                    }\r\n                } );\r\n                bInitHandedOff = true;\r\n            }\r\n            \r\n            /*\r\n             * Stripes\r\n             */\r\n            if ( oInit.asStripeClasses === null )\r\n            {\r\n                oSettings.asStripeClasses =[\r\n                    oClasses.sStripeOdd,\r\n                    oClasses.sStripeEven\r\n                ];\r\n            }\r\n            \r\n            /* Remove row stripe classes if they are already on the table row */\r\n            var stripeClasses = oSettings.asStripeClasses;\r\n            var rowOne = $this.children('tbody').find('tr').eq(0);\r\n            if ( $.inArray( true, $.map( stripeClasses, function(el, i) {\r\n                return rowOne.hasClass(el);\r\n            } ) ) !== -1 ) {\r\n                $('tbody tr', this).removeClass( stripeClasses.join(' ') );\r\n                oSettings.asDestroyStripes = stripeClasses.slice();\r\n            }\r\n            \r\n            /*\r\n             * Columns\r\n             * See if we should load columns automatically or use defined ones\r\n             */\r\n            var anThs = [];\r\n            var aoColumnsInit;\r\n            var nThead = this.getElementsByTagName('thead');\r\n            if ( nThead.length !== 0 )\r\n            {\r\n                _fnDetectHeader( oSettings.aoHeader, nThead[0] );\r\n                anThs = _fnGetUniqueThs( oSettings );\r\n            }\r\n            \r\n            /* If not given a column array, generate one with nulls */\r\n            if ( oInit.aoColumns === null )\r\n            {\r\n                aoColumnsInit = [];\r\n                for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\r\n                {\r\n                    aoColumnsInit.push( null );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                aoColumnsInit = oInit.aoColumns;\r\n            }\r\n            \r\n            /* Add the columns */\r\n            for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\r\n            {\r\n                _fnAddColumn( oSettings, anThs ? anThs[i] : null );\r\n            }\r\n            \r\n            /* Apply the column definitions */\r\n            _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\r\n                _fnColumnOptions( oSettings, iCol, oDef );\r\n            } );\r\n            \r\n            /* HTML5 attribute detection - build an mData object automatically if the\r\n             * attributes are found\r\n             */\r\n            if ( rowOne.length ) {\r\n                var a = function ( cell, name ) {\r\n                    return cell.getAttribute( 'data-'+name ) !== null ? name : null;\r\n                };\r\n            \r\n                $( rowOne[0] ).children('th, td').each( function (i, cell) {\r\n                    var col = oSettings.aoColumns[i];\r\n            \r\n                    if ( col.mData === i ) {\r\n                        var sort = a( cell, 'sort' ) || a( cell, 'order' );\r\n                        var filter = a( cell, 'filter' ) || a( cell, 'search' );\r\n            \r\n                        if ( sort !== null || filter !== null ) {\r\n                            col.mData = {\r\n                                _:      i+'.display',\r\n                                sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                type:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                filter: filter !== null ? i+'.@data-'+filter : undefined\r\n                            };\r\n            \r\n                            _fnColumnOptions( oSettings, i );\r\n                        }\r\n                    }\r\n                } );\r\n            }\r\n            \r\n            var features = oSettings.oFeatures;\r\n            var loadedInit = function () {\r\n                /*\r\n                 * Sorting\r\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\r\n                 */\r\n            \r\n                // If aaSorting is not defined, then we use the first indicator in asSorting\r\n                // in case that has been altered, so the default sort reflects that option\r\n                if ( oInit.aaSorting === undefined ) {\r\n                    var sorting = oSettings.aaSorting;\r\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\r\n                        sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\r\n                    }\r\n                }\r\n            \r\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\r\n                 * account, and also will apply sorting disabled classes if disabled\r\n                 */\r\n                _fnSortingClasses( oSettings );\r\n            \r\n                if ( features.bSort ) {\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                        if ( oSettings.bSorted ) {\r\n                            var aSort = _fnSortFlatten( oSettings );\r\n                            var sortedColumns = {};\r\n            \r\n                            $.each( aSort, function (i, val) {\r\n                                sortedColumns[ val.src ] = val.dir;\r\n                            } );\r\n            \r\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\r\n                            _fnSortAria( oSettings );\r\n                        }\r\n                    } );\r\n                }\r\n            \r\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\r\n                        _fnSortingClasses( oSettings );\r\n                    }\r\n                }, 'sc' );\r\n            \r\n            \r\n                /*\r\n                 * Final init\r\n                 * Cache the header, body and footer as required, creating them if needed\r\n                 */\r\n            \r\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\r\n                var captions = $this.children('caption').each( function () {\r\n                    this._captionSide = $(this).css('caption-side');\r\n                } );\r\n            \r\n                var thead = $this.children('thead');\r\n                if ( thead.length === 0 ) {\r\n                    thead = $('<thead/>').appendTo($this);\r\n                }\r\n                oSettings.nTHead = thead[0];\r\n            \r\n                var tbody = $this.children('tbody');\r\n                if ( tbody.length === 0 ) {\r\n                    tbody = $('<tbody/>').appendTo($this);\r\n                }\r\n                oSettings.nTBody = tbody[0];\r\n            \r\n                var tfoot = $this.children('tfoot');\r\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\r\n                    // If we are a scrolling table, and no footer has been given, then we need to create\r\n                    // a tfoot element for the caption element to be appended to\r\n                    tfoot = $('<tfoot/>').appendTo($this);\r\n                }\r\n            \r\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\r\n                    $this.addClass( oClasses.sNoFooter );\r\n                }\r\n                else if ( tfoot.length > 0 ) {\r\n                    oSettings.nTFoot = tfoot[0];\r\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\r\n                }\r\n            \r\n                /* Check if there is data passing into the constructor */\r\n                if ( oInit.aaData ) {\r\n                    for ( i=0 ; i<oInit.aaData.length ; i++ ) {\r\n                        _fnAddData( oSettings, oInit.aaData[ i ] );\r\n                    }\r\n                }\r\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\r\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\r\n                     * source since there is no point in reading the DOM data if we are then going\r\n                     * to replace it with Ajax data\r\n                     */\r\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\r\n                }\r\n            \r\n                /* Copy the data index array */\r\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\r\n            \r\n                /* Initialisation complete - table can be drawn */\r\n                oSettings.bInitialised = true;\r\n            \r\n                /* Check if we need to initialise the table (it might not have been handed off to the\r\n                 * language processor)\r\n                 */\r\n                if ( bInitHandedOff === false ) {\r\n                    _fnInitialise( oSettings );\r\n                }\r\n            };\r\n            \r\n            /* Must be done after everything which can be overridden by the state saving! */\r\n            if ( oInit.bStateSave )\r\n            {\r\n                features.bStateSave = true;\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\r\n                _fnLoadState( oSettings, oInit, loadedInit );\r\n            }\r\n            else {\r\n                loadedInit();\r\n            }\r\n            \r\n        } );\r\n        _that = null;\r\n        return this;\r\n    };\r\n\r\n    \r\n    /*\r\n     * It is useful to have variables which are scoped locally so only the\r\n     * DataTables functions can access them and they don't leak into global space.\r\n     * At the same time these functions are often useful over multiple files in the\r\n     * core and API, so we list, or at least document, all variables which are used\r\n     * by DataTables as private variables here. This also ensures that there is no\r\n     * clashing of variable names and that they can easily referenced for reuse.\r\n     */\r\n    \r\n    \r\n    // Defined else where\r\n    //  _selector_run\r\n    //  _selector_opts\r\n    //  _selector_first\r\n    //  _selector_row_indexes\r\n    \r\n    var _ext; // DataTable.ext\r\n    var _Api; // DataTable.Api\r\n    var _api_register; // DataTable.Api.register\r\n    var _api_registerPlural; // DataTable.Api.registerPlural\r\n    \r\n    var _re_dic = {};\r\n    var _re_new_lines = /[\\r\\n]/g;\r\n    var _re_html = /<.*?>/g;\r\n    \r\n    // This is not strict ISO8601 - Date.parse() is quite lax, although\r\n    // implementations differ between browsers.\r\n    var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\r\n    \r\n    // Escape regular expression special characters\r\n    var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\r\n    \r\n    // http://en.wikipedia.org/wiki/Foreign_exchange_market\r\n    // - \\u20BD - Russian ruble.\r\n    // - \\u20a9 - South Korean Won\r\n    // - \\u20BA - Turkish Lira\r\n    // - \\u20B9 - Indian Rupee\r\n    // - R - Brazil (R$) and South Africa\r\n    // - fr - Swiss Franc\r\n    // - kr - Swedish krona, Norwegian krone and Danish krone\r\n    // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\r\n    //   standards as thousands separators.\r\n    var _re_formatted_numeric = /[',$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\r\n    \r\n    \r\n    var _empty = function ( d ) {\r\n        return !d || d === true || d === '-' ? true : false;\r\n    };\r\n    \r\n    \r\n    var _intVal = function ( s ) {\r\n        var integer = parseInt( s, 10 );\r\n        return !isNaN(integer) && isFinite(s) ? integer : null;\r\n    };\r\n    \r\n    // Convert from a formatted number with characters other than `.` as the\r\n    // decimal place, to a Javascript number\r\n    var _numToDecimal = function ( num, decimalPoint ) {\r\n        // Cache created regular expressions for speed as this function is called often\r\n        if ( ! _re_dic[ decimalPoint ] ) {\r\n            _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\r\n        }\r\n        return typeof num === 'string' && decimalPoint !== '.' ?\r\n            num.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\r\n            num;\r\n    };\r\n    \r\n    \r\n    var _isNumber = function ( d, decimalPoint, formatted ) {\r\n        var strType = typeof d === 'string';\r\n    \r\n        // If empty return immediately so there must be a number if it is a\r\n        // formatted string (this stops the string \"k\", or \"kr\", etc being detected\r\n        // as a formatted number for currency\r\n        if ( _empty( d ) ) {\r\n            return true;\r\n        }\r\n    \r\n        if ( decimalPoint && strType ) {\r\n            d = _numToDecimal( d, decimalPoint );\r\n        }\r\n    \r\n        if ( formatted && strType ) {\r\n            d = d.replace( _re_formatted_numeric, '' );\r\n        }\r\n    \r\n        return !isNaN( parseFloat(d) ) && isFinite( d );\r\n    };\r\n    \r\n    \r\n    // A string without HTML in it can be considered to be HTML still\r\n    var _isHtml = function ( d ) {\r\n        return _empty( d ) || typeof d === 'string';\r\n    };\r\n    \r\n    \r\n    var _htmlNumeric = function ( d, decimalPoint, formatted ) {\r\n        if ( _empty( d ) ) {\r\n            return true;\r\n        }\r\n    \r\n        var html = _isHtml( d );\r\n        return ! html ?\r\n            null :\r\n            _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\r\n                true :\r\n                null;\r\n    };\r\n    \r\n    \r\n    var _pluck = function ( a, prop, prop2 ) {\r\n        var out = [];\r\n        var i=0, ien=a.length;\r\n    \r\n        // Could have the test in the loop for slightly smaller code, but speed\r\n        // is essential here\r\n        if ( prop2 !== undefined ) {\r\n            for ( ; i<ien ; i++ ) {\r\n                if ( a[i] && a[i][ prop ] ) {\r\n                    out.push( a[i][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for ( ; i<ien ; i++ ) {\r\n                if ( a[i] ) {\r\n                    out.push( a[i][ prop ] );\r\n                }\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    // Basically the same as _pluck, but rather than looping over `a` we use `order`\r\n    // as the indexes to pick from `a`\r\n    var _pluck_order = function ( a, order, prop, prop2 )\r\n    {\r\n        var out = [];\r\n        var i=0, ien=order.length;\r\n    \r\n        // Could have the test in the loop for slightly smaller code, but speed\r\n        // is essential here\r\n        if ( prop2 !== undefined ) {\r\n            for ( ; i<ien ; i++ ) {\r\n                if ( a[ order[i] ][ prop ] ) {\r\n                    out.push( a[ order[i] ][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for ( ; i<ien ; i++ ) {\r\n                out.push( a[ order[i] ][ prop ] );\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    var _range = function ( len, start )\r\n    {\r\n        var out = [];\r\n        var end;\r\n    \r\n        if ( start === undefined ) {\r\n            start = 0;\r\n            end = len;\r\n        }\r\n        else {\r\n            end = start;\r\n            start = len;\r\n        }\r\n    \r\n        for ( var i=start ; i<end ; i++ ) {\r\n            out.push( i );\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    var _removeEmpty = function ( a )\r\n    {\r\n        var out = [];\r\n    \r\n        for ( var i=0, ien=a.length ; i<ien ; i++ ) {\r\n            if ( a[i] ) { // careful - will remove all falsy values!\r\n                out.push( a[i] );\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    var _stripHtml = function ( d ) {\r\n        return d.replace( _re_html, '' );\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Determine if all values in the array are unique. This means we can short\r\n     * cut the _unique method at the cost of a single loop. A sorted array is used\r\n     * to easily check the values.\r\n     *\r\n     * @param  {array} src Source array\r\n     * @return {boolean} true if all unique, false otherwise\r\n     * @ignore\r\n     */\r\n    var _areAllUnique = function ( src ) {\r\n        if ( src.length < 2 ) {\r\n            return true;\r\n        }\r\n    \r\n        var sorted = src.slice().sort();\r\n        var last = sorted[0];\r\n    \r\n        for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\r\n            if ( sorted[i] === last ) {\r\n                return false;\r\n            }\r\n    \r\n            last = sorted[i];\r\n        }\r\n    \r\n        return true;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Find the unique elements in a source array.\r\n     *\r\n     * @param  {array} src Source array\r\n     * @return {array} Array of unique items\r\n     * @ignore\r\n     */\r\n    var _unique = function ( src )\r\n    {\r\n        if ( _areAllUnique( src ) ) {\r\n            return src.slice();\r\n        }\r\n    \r\n        // A faster unique method is to use object keys to identify used values,\r\n        // but this doesn't work with arrays or objects, which we must also\r\n        // consider. See jsperf.com/compare-array-unique-versions/4 for more\r\n        // information.\r\n        var\r\n            out = [],\r\n            val,\r\n            i, ien=src.length,\r\n            j, k=0;\r\n    \r\n        again: for ( i=0 ; i<ien ; i++ ) {\r\n            val = src[i];\r\n    \r\n            for ( j=0 ; j<k ; j++ ) {\r\n                if ( out[j] === val ) {\r\n                    continue again;\r\n                }\r\n            }\r\n    \r\n            out.push( val );\r\n            k++;\r\n        }\r\n    \r\n        return out;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * DataTables utility methods\r\n     * \r\n     * This namespace provides helper methods that DataTables uses internally to\r\n     * create a DataTable, but which are not exclusively used only for DataTables.\r\n     * These methods can be used by extension authors to save the duplication of\r\n     * code.\r\n     *\r\n     *  @namespace\r\n     */\r\n    DataTable.util = {\r\n        /**\r\n         * Throttle the calls to a function. Arguments and context are maintained\r\n         * for the throttled function.\r\n         *\r\n         * @param {function} fn Function to be called\r\n         * @param {integer} freq Call frequency in mS\r\n         * @return {function} Wrapped function\r\n         */\r\n        throttle: function ( fn, freq ) {\r\n            var\r\n                frequency = freq !== undefined ? freq : 200,\r\n                last,\r\n                timer;\r\n    \r\n            return function () {\r\n                var\r\n                    that = this,\r\n                    now  = +new Date(),\r\n                    args = arguments;\r\n    \r\n                if ( last && now < last + frequency ) {\r\n                    clearTimeout( timer );\r\n    \r\n                    timer = setTimeout( function () {\r\n                        last = undefined;\r\n                        fn.apply( that, args );\r\n                    }, frequency );\r\n                }\r\n                else {\r\n                    last = now;\r\n                    fn.apply( that, args );\r\n                }\r\n            };\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Escape a string such that it can be used in a regular expression\r\n         *\r\n         *  @param {string} val string to escape\r\n         *  @returns {string} escaped string\r\n         */\r\n        escapeRegex: function ( val ) {\r\n            return val.replace( _re_escape_regex, '\\\\$1' );\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Create a mapping object that allows camel case parameters to be looked up\r\n     * for their Hungarian counterparts. The mapping is stored in a private\r\n     * parameter called `_hungarianMap` which can be accessed on the source object.\r\n     *  @param {object} o\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnHungarianMap ( o )\r\n    {\r\n        var\r\n            hungarian = 'a aa ai ao as b fn i m o s ',\r\n            match,\r\n            newKey,\r\n            map = {};\r\n    \r\n        $.each( o, function (key, val) {\r\n            match = key.match(/^([^A-Z]+?)([A-Z])/);\r\n    \r\n            if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\r\n            {\r\n                newKey = key.replace( match[0], match[2].toLowerCase() );\r\n                map[ newKey ] = key;\r\n    \r\n                if ( match[1] === 'o' )\r\n                {\r\n                    _fnHungarianMap( o[key] );\r\n                }\r\n            }\r\n        } );\r\n    \r\n        o._hungarianMap = map;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Convert from camel case parameters to Hungarian, based on a Hungarian map\r\n     * created by _fnHungarianMap.\r\n     *  @param {object} src The model object which holds all parameters that can be\r\n     *    mapped.\r\n     *  @param {object} user The object to convert from camel case to Hungarian.\r\n     *  @param {boolean} force When set to `true`, properties which already have a\r\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n     *    won't be.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCamelToHungarian ( src, user, force )\r\n    {\r\n        if ( ! src._hungarianMap ) {\r\n            _fnHungarianMap( src );\r\n        }\r\n    \r\n        var hungarianKey;\r\n    \r\n        $.each( user, function (key, val) {\r\n            hungarianKey = src._hungarianMap[ key ];\r\n    \r\n            if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\r\n            {\r\n                // For objects, we need to buzz down into the object to copy parameters\r\n                if ( hungarianKey.charAt(0) === 'o' )\r\n                {\r\n                    // Copy the camelCase options over to the hungarian\r\n                    if ( ! user[ hungarianKey ] ) {\r\n                        user[ hungarianKey ] = {};\r\n                    }\r\n                    $.extend( true, user[hungarianKey], user[key] );\r\n    \r\n                    _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\r\n                }\r\n                else {\r\n                    user[hungarianKey] = user[ key ];\r\n                }\r\n            }\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Language compatibility - when certain options are given, and others aren't, we\r\n     * need to duplicate the values over, in order to provide backwards compatibility\r\n     * with older language files.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnLanguageCompat( lang )\r\n    {\r\n        var defaults = DataTable.defaults.oLanguage;\r\n        var zeroRecords = lang.sZeroRecords;\r\n    \r\n        /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\r\n         * sZeroRecords - assuming that is given.\r\n         */\r\n        if ( ! lang.sEmptyTable && zeroRecords &&\r\n            defaults.sEmptyTable === \"No data available in table\" )\r\n        {\r\n            _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\r\n        }\r\n    \r\n        /* Likewise with loading records */\r\n        if ( ! lang.sLoadingRecords && zeroRecords &&\r\n            defaults.sLoadingRecords === \"Loading...\" )\r\n        {\r\n            _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\r\n        }\r\n    \r\n        // Old parameter name of the thousands separator mapped onto the new\r\n        if ( lang.sInfoThousands ) {\r\n            lang.sThousands = lang.sInfoThousands;\r\n        }\r\n    \r\n        var decimal = lang.sDecimal;\r\n        if ( decimal ) {\r\n            _addNumericSort( decimal );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Map one parameter onto another\r\n     *  @param {object} o Object to map\r\n     *  @param {*} knew The new parameter name\r\n     *  @param {*} old The old parameter name\r\n     */\r\n    var _fnCompatMap = function ( o, knew, old ) {\r\n        if ( o[ knew ] !== undefined ) {\r\n            o[ old ] = o[ knew ];\r\n        }\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Provide backwards compatibility for the main DT options. Note that the new\r\n     * options are mapped onto the old parameters, so this is an external interface\r\n     * change only.\r\n     *  @param {object} init Object to map\r\n     */\r\n    function _fnCompatOpts ( init )\r\n    {\r\n        _fnCompatMap( init, 'ordering',      'bSort' );\r\n        _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\r\n        _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\r\n        _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\r\n        _fnCompatMap( init, 'order',         'aaSorting' );\r\n        _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\r\n        _fnCompatMap( init, 'paging',        'bPaginate' );\r\n        _fnCompatMap( init, 'pagingType',    'sPaginationType' );\r\n        _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\r\n        _fnCompatMap( init, 'searching',     'bFilter' );\r\n    \r\n        // Boolean initialisation of x-scrolling\r\n        if ( typeof init.sScrollX === 'boolean' ) {\r\n            init.sScrollX = init.sScrollX ? '100%' : '';\r\n        }\r\n        if ( typeof init.scrollX === 'boolean' ) {\r\n            init.scrollX = init.scrollX ? '100%' : '';\r\n        }\r\n    \r\n        // Column search objects are in an array, so it needs to be converted\r\n        // element by element\r\n        var searchCols = init.aoSearchCols;\r\n    \r\n        if ( searchCols ) {\r\n            for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\r\n                if ( searchCols[i] ) {\r\n                    _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Provide backwards compatibility for column options. Note that the new options\r\n     * are mapped onto the old parameters, so this is an external interface change\r\n     * only.\r\n     *  @param {object} init Object to map\r\n     */\r\n    function _fnCompatCols ( init )\r\n    {\r\n        _fnCompatMap( init, 'orderable',     'bSortable' );\r\n        _fnCompatMap( init, 'orderData',     'aDataSort' );\r\n        _fnCompatMap( init, 'orderSequence', 'asSorting' );\r\n        _fnCompatMap( init, 'orderDataType', 'sortDataType' );\r\n    \r\n        // orderData can be given as an integer\r\n        var dataSort = init.aDataSort;\r\n        if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {\r\n            init.aDataSort = [ dataSort ];\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Browser feature detection for capabilities, quirks\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnBrowserDetect( settings )\r\n    {\r\n        // We don't need to do this every time DataTables is constructed, the values\r\n        // calculated are specific to the browser and OS configuration which we\r\n        // don't expect to change between initialisations\r\n        if ( ! DataTable.__browser ) {\r\n            var browser = {};\r\n            DataTable.__browser = browser;\r\n    \r\n            // Scrolling feature / quirks detection\r\n            var n = $('<div/>')\r\n                .css( {\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: $(window).scrollLeft()*-1, // allow for scrolling\r\n                    height: 1,\r\n                    width: 1,\r\n                    overflow: 'hidden'\r\n                } )\r\n                .append(\r\n                    $('<div/>')\r\n                        .css( {\r\n                            position: 'absolute',\r\n                            top: 1,\r\n                            left: 1,\r\n                            width: 100,\r\n                            overflow: 'scroll'\r\n                        } )\r\n                        .append(\r\n                            $('<div/>')\r\n                                .css( {\r\n                                    width: '100%',\r\n                                    height: 10\r\n                                } )\r\n                        )\r\n                )\r\n                .appendTo( 'body' );\r\n    \r\n            var outer = n.children();\r\n            var inner = outer.children();\r\n    \r\n            // Numbers below, in order, are:\r\n            // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\r\n            //\r\n            // IE6 XP:                           100 100 100  83\r\n            // IE7 Vista:                        100 100 100  83\r\n            // IE 8+ Windows:                     83  83 100  83\r\n            // Evergreen Windows:                 83  83 100  83\r\n            // Evergreen Mac with scrollbars:     85  85 100  85\r\n            // Evergreen Mac without scrollbars: 100 100 100 100\r\n    \r\n            // Get scrollbar width\r\n            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\r\n    \r\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\r\n            // include the width of the scrollbar, while other browsers ensure the inner\r\n            // element is contained without forcing scrolling\r\n            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\r\n    \r\n            // In rtl text layout, some browsers (most, but not all) will place the\r\n            // scrollbar on the left, rather than the right.\r\n            browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\r\n    \r\n            // IE8- don't provide height and width for getBoundingClientRect\r\n            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\r\n    \r\n            n.remove();\r\n        }\r\n    \r\n        $.extend( settings.oBrowser, DataTable.__browser );\r\n        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Array.prototype reduce[Right] method, used for browsers which don't support\r\n     * JS 1.6. Done this way to reduce code size, since we iterate either way\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnReduce ( that, fn, init, start, end, inc )\r\n    {\r\n        var\r\n            i = start,\r\n            value,\r\n            isSet = false;\r\n    \r\n        if ( init !== undefined ) {\r\n            value = init;\r\n            isSet = true;\r\n        }\r\n    \r\n        while ( i !== end ) {\r\n            if ( ! that.hasOwnProperty(i) ) {\r\n                continue;\r\n            }\r\n    \r\n            value = isSet ?\r\n                fn( value, that[i], i, that ) :\r\n                that[i];\r\n    \r\n            isSet = true;\r\n            i += inc;\r\n        }\r\n    \r\n        return value;\r\n    }\r\n    \r\n    /**\r\n     * Add a column to the list used for the table with default values\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {node} nTh The th element for this column\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddColumn( oSettings, nTh )\r\n    {\r\n        // Add column to aoColumns array\r\n        var oDefaults = DataTable.defaults.column;\r\n        var iCol = oSettings.aoColumns.length;\r\n        var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\r\n            \"nTh\": nTh ? nTh : document.createElement('th'),\r\n            \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\r\n            \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\r\n            \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\r\n            idx: iCol\r\n        } );\r\n        oSettings.aoColumns.push( oCol );\r\n    \r\n        // Add search object for column specific search. Note that the `searchCols[ iCol ]`\r\n        // passed into extend can be undefined. This allows the user to give a default\r\n        // with only some of the parameters defined, and also not give a default\r\n        var searchCols = oSettings.aoPreSearchCols;\r\n        searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\r\n    \r\n        // Use the default column options function to initialise classes etc\r\n        _fnColumnOptions( oSettings, iCol, $(nTh).data() );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Apply options for a column\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iCol column index to consider\r\n     *  @param {object} oOptions object with sType, bVisible and bSearchable etc\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnColumnOptions( oSettings, iCol, oOptions )\r\n    {\r\n        var oCol = oSettings.aoColumns[ iCol ];\r\n        var oClasses = oSettings.oClasses;\r\n        var th = $(oCol.nTh);\r\n    \r\n        // Try to get width information from the DOM. We can't get it from CSS\r\n        // as we'd need to parse the CSS stylesheet. `width` option can override\r\n        if ( ! oCol.sWidthOrig ) {\r\n            // Width attribute\r\n            oCol.sWidthOrig = th.attr('width') || null;\r\n    \r\n            // Style attribute\r\n            var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\r\n            if ( t ) {\r\n                oCol.sWidthOrig = t[1];\r\n            }\r\n        }\r\n    \r\n        /* User specified column options */\r\n        if ( oOptions !== undefined && oOptions !== null )\r\n        {\r\n            // Backwards compatibility\r\n            _fnCompatCols( oOptions );\r\n    \r\n            // Map camel case parameters to their Hungarian counterparts\r\n            _fnCamelToHungarian( DataTable.defaults.column, oOptions );\r\n    \r\n            /* Backwards compatibility for mDataProp */\r\n            if ( oOptions.mDataProp !== undefined && !oOptions.mData )\r\n            {\r\n                oOptions.mData = oOptions.mDataProp;\r\n            }\r\n    \r\n            if ( oOptions.sType )\r\n            {\r\n                oCol._sManualType = oOptions.sType;\r\n            }\r\n    \r\n            // `class` is a reserved word in Javascript, so we need to provide\r\n            // the ability to use a valid name for the camel case input\r\n            if ( oOptions.className && ! oOptions.sClass )\r\n            {\r\n                oOptions.sClass = oOptions.className;\r\n            }\r\n    \r\n            $.extend( oCol, oOptions );\r\n            _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\r\n    \r\n            /* iDataSort to be applied (backwards compatibility), but aDataSort will take\r\n             * priority if defined\r\n             */\r\n            if ( oOptions.iDataSort !== undefined )\r\n            {\r\n                oCol.aDataSort = [ oOptions.iDataSort ];\r\n            }\r\n            _fnMap( oCol, oOptions, \"aDataSort\" );\r\n        }\r\n    \r\n        /* Cache the data get and set functions for speed */\r\n        var mDataSrc = oCol.mData;\r\n        var mData = _fnGetObjectDataFn( mDataSrc );\r\n        var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\r\n    \r\n        var attrTest = function( src ) {\r\n            return typeof src === 'string' && src.indexOf('@') !== -1;\r\n        };\r\n        oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\r\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\r\n        );\r\n        oCol._setter = null;\r\n    \r\n        oCol.fnGetData = function (rowData, type, meta) {\r\n            var innerData = mData( rowData, type, undefined, meta );\r\n    \r\n            return mRender && type ?\r\n                mRender( innerData, type, rowData, meta ) :\r\n                innerData;\r\n        };\r\n        oCol.fnSetData = function ( rowData, val, meta ) {\r\n            return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\r\n        };\r\n    \r\n        // Indicate if DataTables should read DOM data as an object or array\r\n        // Used in _fnGetRowElements\r\n        if ( typeof mDataSrc !== 'number' ) {\r\n            oSettings._rowReadObject = true;\r\n        }\r\n    \r\n        /* Feature sorting overrides column specific when off */\r\n        if ( !oSettings.oFeatures.bSort )\r\n        {\r\n            oCol.bSortable = false;\r\n            th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\r\n        }\r\n    \r\n        /* Check that the class assignment is correct for sorting */\r\n        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\r\n        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\r\n        if ( !oCol.bSortable || (!bAsc && !bDesc) )\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortableNone;\r\n            oCol.sSortingClassJUI = \"\";\r\n        }\r\n        else if ( bAsc && !bDesc )\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortableAsc;\r\n            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\r\n        }\r\n        else if ( !bAsc && bDesc )\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortableDesc;\r\n            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\r\n        }\r\n        else\r\n        {\r\n            oCol.sSortingClass = oClasses.sSortable;\r\n            oCol.sSortingClassJUI = oClasses.sSortJUI;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Adjust the table column widths for new data. Note: you would probably want to\r\n     * do a redraw after calling this function!\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAdjustColumnSizing ( settings )\r\n    {\r\n        /* Not interested in doing column width calculation if auto-width is disabled */\r\n        if ( settings.oFeatures.bAutoWidth !== false )\r\n        {\r\n            var columns = settings.aoColumns;\r\n    \r\n            _fnCalculateColumnWidths( settings );\r\n            for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                columns[i].nTh.style.width = columns[i].sWidth;\r\n            }\r\n        }\r\n    \r\n        var scroll = settings.oScroll;\r\n        if ( scroll.sY !== '' || scroll.sX !== '')\r\n        {\r\n            _fnScrollDraw( settings );\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'column-sizing', [settings] );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Covert the index of a visible column to the index in the data array (take account\r\n     * of hidden columns)\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iMatch Visible column index to lookup\r\n     *  @returns {int} i the data index\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnVisibleToColumnIndex( oSettings, iMatch )\r\n    {\r\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n    \r\n        return typeof aiVis[iMatch] === 'number' ?\r\n            aiVis[iMatch] :\r\n            null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Covert the index of an index in the data array and convert it to the visible\r\n     *   column index (take account of hidden columns)\r\n     *  @param {int} iMatch Column index to lookup\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {int} i the data index\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnColumnIndexToVisible( oSettings, iMatch )\r\n    {\r\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n        var iPos = $.inArray( iMatch, aiVis );\r\n    \r\n        return iPos !== -1 ? iPos : null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the number of visible columns\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {int} i the number of visible columns\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnVisbleColumns( oSettings )\r\n    {\r\n        var vis = 0;\r\n    \r\n        // No reduce in IE8, use a loop for now\r\n        $.each( oSettings.aoColumns, function ( i, col ) {\r\n            if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\r\n                vis++;\r\n            }\r\n        } );\r\n    \r\n        return vis;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get an array of column indexes that match a given property\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {string} sParam Parameter in aoColumns to look for - typically\r\n     *    bVisible or bSearchable\r\n     *  @returns {array} Array of indexes with matched properties\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetColumns( oSettings, sParam )\r\n    {\r\n        var a = [];\r\n    \r\n        $.map( oSettings.aoColumns, function(val, i) {\r\n            if ( val[sParam] ) {\r\n                a.push( i );\r\n            }\r\n        } );\r\n    \r\n        return a;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Calculate the 'type' of a column\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnColumnTypes ( settings )\r\n    {\r\n        var columns = settings.aoColumns;\r\n        var data = settings.aoData;\r\n        var types = DataTable.ext.type.detect;\r\n        var i, ien, j, jen, k, ken;\r\n        var col, cell, detectedType, cache;\r\n    \r\n        // For each column, spin over the \r\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n            col = columns[i];\r\n            cache = [];\r\n    \r\n            if ( ! col.sType && col._sManualType ) {\r\n                col.sType = col._sManualType;\r\n            }\r\n            else if ( ! col.sType ) {\r\n                for ( j=0, jen=types.length ; j<jen ; j++ ) {\r\n                    for ( k=0, ken=data.length ; k<ken ; k++ ) {\r\n                        // Use a cache array so we only need to get the type data\r\n                        // from the formatter once (when using multiple detectors)\r\n                        if ( cache[k] === undefined ) {\r\n                            cache[k] = _fnGetCellData( settings, k, i, 'type' );\r\n                        }\r\n    \r\n                        detectedType = types[j]( cache[k], settings );\r\n    \r\n                        // If null, then this type can't apply to this column, so\r\n                        // rather than testing all cells, break out. There is an\r\n                        // exception for the last type which is `html`. We need to\r\n                        // scan all rows since it is possible to mix string and HTML\r\n                        // types\r\n                        if ( ! detectedType && j !== types.length-1 ) {\r\n                            break;\r\n                        }\r\n    \r\n                        // Only a single match is needed for html type since it is\r\n                        // bottom of the pile and very similar to string\r\n                        if ( detectedType === 'html' ) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Type is valid for all data points in the column - use this\r\n                    // type\r\n                    if ( detectedType ) {\r\n                        col.sType = detectedType;\r\n                        break;\r\n                    }\r\n                }\r\n    \r\n                // Fall back - if no type was detected, always use string\r\n                if ( ! col.sType ) {\r\n                    col.sType = 'string';\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Take the column definitions and static columns arrays and calculate how\r\n     * they relate to column indexes. The callback function will then apply the\r\n     * definition found for a column to a suitable configuration object.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\r\n     *  @param {array} aoCols The aoColumns array that defines columns individually\r\n     *  @param {function} fn Callback function - takes two parameters, the calculated\r\n     *    column index and the definition for that column.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\r\n    {\r\n        var i, iLen, j, jLen, k, kLen, def;\r\n        var columns = oSettings.aoColumns;\r\n    \r\n        // Column definitions with aTargets\r\n        if ( aoColDefs )\r\n        {\r\n            /* Loop over the definitions array - loop in reverse so first instance has priority */\r\n            for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\r\n            {\r\n                def = aoColDefs[i];\r\n    \r\n                /* Each definition can target multiple columns, as it is an array */\r\n                var aTargets = def.targets !== undefined ?\r\n                    def.targets :\r\n                    def.aTargets;\r\n    \r\n                if ( ! $.isArray( aTargets ) )\r\n                {\r\n                    aTargets = [ aTargets ];\r\n                }\r\n    \r\n                for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\r\n                {\r\n                    if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\r\n                    {\r\n                        /* Add columns that we don't yet know about */\r\n                        while( columns.length <= aTargets[j] )\r\n                        {\r\n                            _fnAddColumn( oSettings );\r\n                        }\r\n    \r\n                        /* Integer, basic index */\r\n                        fn( aTargets[j], def );\r\n                    }\r\n                    else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\r\n                    {\r\n                        /* Negative integer, right to left column counting */\r\n                        fn( columns.length+aTargets[j], def );\r\n                    }\r\n                    else if ( typeof aTargets[j] === 'string' )\r\n                    {\r\n                        /* Class name matching on TH element */\r\n                        for ( k=0, kLen=columns.length ; k<kLen ; k++ )\r\n                        {\r\n                            if ( aTargets[j] == \"_all\" ||\r\n                                 $(columns[k].nTh).hasClass( aTargets[j] ) )\r\n                            {\r\n                                fn( k, def );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        // Statically defined columns array\r\n        if ( aoCols )\r\n        {\r\n            for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\r\n            {\r\n                fn( i, aoCols[i] );\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add a data array to the table, creating DOM node etc. This is the parallel to\r\n     * _fnGatherData, but for adding rows from a Javascript source, rather than a\r\n     * DOM source.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {array} aData data array to be added\r\n     *  @param {node} [nTr] TR element to add to the table - optional. If not given,\r\n     *    DataTables will create a row automatically\r\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n     *    if nTr is.\r\n     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddData ( oSettings, aDataIn, nTr, anTds )\r\n    {\r\n        /* Create the object for storing information about this new row */\r\n        var iRow = oSettings.aoData.length;\r\n        var oData = $.extend( true, {}, DataTable.models.oRow, {\r\n            src: nTr ? 'dom' : 'data',\r\n            idx: iRow\r\n        } );\r\n    \r\n        oData._aData = aDataIn;\r\n        oSettings.aoData.push( oData );\r\n    \r\n        /* Create the cells */\r\n        var nTd, sThisType;\r\n        var columns = oSettings.aoColumns;\r\n    \r\n        // Invalidate the column types as the new data needs to be revalidated\r\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n        {\r\n            columns[i].sType = null;\r\n        }\r\n    \r\n        /* Add to the display array */\r\n        oSettings.aiDisplayMaster.push( iRow );\r\n    \r\n        var id = oSettings.rowIdFn( aDataIn );\r\n        if ( id !== undefined ) {\r\n            oSettings.aIds[ id ] = oData;\r\n        }\r\n    \r\n        /* Create the DOM information, or register it if already present */\r\n        if ( nTr || ! oSettings.oFeatures.bDeferRender )\r\n        {\r\n            _fnCreateTr( oSettings, iRow, nTr, anTds );\r\n        }\r\n    \r\n        return iRow;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add one or more TR elements to the table. Generally we'd expect to\r\n     * use this for reading data from a DOM sourced table, but it could be\r\n     * used for an TR element. Note that if a TR is given, it is used (i.e.\r\n     * it is not cloned).\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {array|node|jQuery} trs The TR element(s) to add to the table\r\n     *  @returns {array} Array of indexes for the added rows\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddTr( settings, trs )\r\n    {\r\n        var row;\r\n    \r\n        // Allow an individual node to be passed in\r\n        if ( ! (trs instanceof $) ) {\r\n            trs = $(trs);\r\n        }\r\n    \r\n        return trs.map( function (i, el) {\r\n            row = _fnGetRowElements( settings, el );\r\n            return _fnAddData( settings, row.data, el, row.cells );\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Take a TR element and convert it to an index in aoData\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {node} n the TR element to find\r\n     *  @returns {int} index if the node is found, null if not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnNodeToDataIndex( oSettings, n )\r\n    {\r\n        return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Take a TD element and convert it into a column data index (not the visible index)\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iRow The row number the TD/TH can be found in\r\n     *  @param {node} n The TD/TH element to find\r\n     *  @returns {int} index if the node is found, -1 if not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnNodeToColumnIndex( oSettings, iRow, n )\r\n    {\r\n        return $.inArray( n, oSettings.aoData[ iRow ].anCells );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the data for a given cell from the internal cache, taking into account data mapping\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} rowIdx aoData row id\r\n     *  @param {int} colIdx Column index\r\n     *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\r\n     *  @returns {*} Cell data\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetCellData( settings, rowIdx, colIdx, type )\r\n    {\r\n        var draw           = settings.iDraw;\r\n        var col            = settings.aoColumns[colIdx];\r\n        var rowData        = settings.aoData[rowIdx]._aData;\r\n        var defaultContent = col.sDefaultContent;\r\n        var cellData       = col.fnGetData( rowData, type, {\r\n            settings: settings,\r\n            row:      rowIdx,\r\n            col:      colIdx\r\n        } );\r\n    \r\n        if ( cellData === undefined ) {\r\n            if ( settings.iDrawError != draw && defaultContent === null ) {\r\n                _fnLog( settings, 0, \"Requested unknown parameter \"+\r\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\r\n                    \" for row \"+rowIdx+\", column \"+colIdx, 4 );\r\n                settings.iDrawError = draw;\r\n            }\r\n            return defaultContent;\r\n        }\r\n    \r\n        // When the data source is null and a specific data type is requested (i.e.\r\n        // not the original data), we can use default column data\r\n        if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\r\n            cellData = defaultContent;\r\n        }\r\n        else if ( typeof cellData === 'function' ) {\r\n            // If the data source is a function, then we run it and use the return,\r\n            // executing in the scope of the data object (for instances)\r\n            return cellData.call( rowData );\r\n        }\r\n    \r\n        if ( cellData === null && type == 'display' ) {\r\n            return '';\r\n        }\r\n        return cellData;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set the value for a specific cell, into the internal data cache\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} rowIdx aoData row id\r\n     *  @param {int} colIdx Column index\r\n     *  @param {*} val Value to set\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSetCellData( settings, rowIdx, colIdx, val )\r\n    {\r\n        var col     = settings.aoColumns[colIdx];\r\n        var rowData = settings.aoData[rowIdx]._aData;\r\n    \r\n        col.fnSetData( rowData, val, {\r\n            settings: settings,\r\n            row:      rowIdx,\r\n            col:      colIdx\r\n        }  );\r\n    }\r\n    \r\n    \r\n    // Private variable that is used to match action syntax in the data property object\r\n    var __reArray = /\\[.*?\\]$/;\r\n    var __reFn = /\\(\\)$/;\r\n    \r\n    /**\r\n     * Split string on periods, taking into account escaped periods\r\n     * @param  {string} str String to split\r\n     * @return {array} Split string\r\n     */\r\n    function _fnSplitObjNotation( str )\r\n    {\r\n        return $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\r\n            return s.replace(/\\\\\\./g, '.');\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return a function that can be used to get data from a source object, taking\r\n     * into account the ability to use nested objects as a source\r\n     *  @param {string|int|function} mSource The data source for the object\r\n     *  @returns {function} Data get function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetObjectDataFn( mSource )\r\n    {\r\n        if ( $.isPlainObject( mSource ) )\r\n        {\r\n            /* Build an object of get functions, and wrap them in a single call */\r\n            var o = {};\r\n            $.each( mSource, function (key, val) {\r\n                if ( val ) {\r\n                    o[key] = _fnGetObjectDataFn( val );\r\n                }\r\n            } );\r\n    \r\n            return function (data, type, row, meta) {\r\n                var t = o[type] || o._;\r\n                return t !== undefined ?\r\n                    t(data, type, row, meta) :\r\n                    data;\r\n            };\r\n        }\r\n        else if ( mSource === null )\r\n        {\r\n            /* Give an empty string for rendering / sorting etc */\r\n            return function (data) { // type, row and meta also passed, but not used\r\n                return data;\r\n            };\r\n        }\r\n        else if ( typeof mSource === 'function' )\r\n        {\r\n            return function (data, type, row, meta) {\r\n                return mSource( data, type, row, meta );\r\n            };\r\n        }\r\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n        {\r\n            /* If there is a . in the source string then the data source is in a\r\n             * nested object so we loop over the data for each level to get the next\r\n             * level down. On each loop we test for undefined, and if found immediately\r\n             * return. This allows entire objects to be missing and sDefaultContent to\r\n             * be used if defined, rather than throwing an error\r\n             */\r\n            var fetchData = function (data, type, src) {\r\n                var arrayNotation, funcNotation, out, innerSrc;\r\n    \r\n                if ( src !== \"\" )\r\n                {\r\n                    var a = _fnSplitObjNotation( src );\r\n    \r\n                    for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n                    {\r\n                        // Check if we are dealing with special notation\r\n                        arrayNotation = a[i].match(__reArray);\r\n                        funcNotation = a[i].match(__reFn);\r\n    \r\n                        if ( arrayNotation )\r\n                        {\r\n                            // Array notation\r\n                            a[i] = a[i].replace(__reArray, '');\r\n    \r\n                            // Condition allows simply [] to be passed in\r\n                            if ( a[i] !== \"\" ) {\r\n                                data = data[ a[i] ];\r\n                            }\r\n                            out = [];\r\n    \r\n                            // Get the remainder of the nested object to get\r\n                            a.splice( 0, i+1 );\r\n                            innerSrc = a.join('.');\r\n    \r\n                            // Traverse each entry in the array getting the properties requested\r\n                            if ( $.isArray( data ) ) {\r\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\r\n                                    out.push( fetchData( data[j], type, innerSrc ) );\r\n                                }\r\n                            }\r\n    \r\n                            // If a string is given in between the array notation indicators, that\r\n                            // is used to join the strings together, otherwise an array is returned\r\n                            var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\r\n                            data = (join===\"\") ? out : out.join(join);\r\n    \r\n                            // The inner call to fetchData has already traversed through the remainder\r\n                            // of the source requested, so we exit from the loop\r\n                            break;\r\n                        }\r\n                        else if ( funcNotation )\r\n                        {\r\n                            // Function call\r\n                            a[i] = a[i].replace(__reFn, '');\r\n                            data = data[ a[i] ]();\r\n                            continue;\r\n                        }\r\n    \r\n                        if ( data === null || data[ a[i] ] === undefined )\r\n                        {\r\n                            return undefined;\r\n                        }\r\n                        data = data[ a[i] ];\r\n                    }\r\n                }\r\n    \r\n                return data;\r\n            };\r\n    \r\n            return function (data, type) { // row and meta also passed, but not used\r\n                return fetchData( data, type, mSource );\r\n            };\r\n        }\r\n        else\r\n        {\r\n            /* Array or flat object mapping */\r\n            return function (data, type) { // row and meta also passed, but not used\r\n                return data[mSource];\r\n            };\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return a function that can be used to set data from a source object, taking\r\n     * into account the ability to use nested objects as a source\r\n     *  @param {string|int|function} mSource The data source for the object\r\n     *  @returns {function} Data set function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSetObjectDataFn( mSource )\r\n    {\r\n        if ( $.isPlainObject( mSource ) )\r\n        {\r\n            /* Unlike get, only the underscore (global) option is used for for\r\n             * setting data since we don't know the type here. This is why an object\r\n             * option is not documented for `mData` (which is read/write), but it is\r\n             * for `mRender` which is read only.\r\n             */\r\n            return _fnSetObjectDataFn( mSource._ );\r\n        }\r\n        else if ( mSource === null )\r\n        {\r\n            /* Nothing to do when the data source is null */\r\n            return function () {};\r\n        }\r\n        else if ( typeof mSource === 'function' )\r\n        {\r\n            return function (data, val, meta) {\r\n                mSource( data, 'set', val, meta );\r\n            };\r\n        }\r\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n        {\r\n            /* Like the get, we need to get data from a nested object */\r\n            var setData = function (data, val, src) {\r\n                var a = _fnSplitObjNotation( src ), b;\r\n                var aLast = a[a.length-1];\r\n                var arrayNotation, funcNotation, o, innerSrc;\r\n    \r\n                for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\r\n                {\r\n                    // Check if we are dealing with an array notation request\r\n                    arrayNotation = a[i].match(__reArray);\r\n                    funcNotation = a[i].match(__reFn);\r\n    \r\n                    if ( arrayNotation )\r\n                    {\r\n                        a[i] = a[i].replace(__reArray, '');\r\n                        data[ a[i] ] = [];\r\n    \r\n                        // Get the remainder of the nested object to set so we can recurse\r\n                        b = a.slice();\r\n                        b.splice( 0, i+1 );\r\n                        innerSrc = b.join('.');\r\n    \r\n                        // Traverse each entry in the array setting the properties requested\r\n                        if ( $.isArray( val ) )\r\n                        {\r\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\r\n                            {\r\n                                o = {};\r\n                                setData( o, val[j], innerSrc );\r\n                                data[ a[i] ].push( o );\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            // We've been asked to save data to an array, but it\r\n                            // isn't array data to be saved. Best that can be done\r\n                            // is to just save the value.\r\n                            data[ a[i] ] = val;\r\n                        }\r\n    \r\n                        // The inner call to setData has already traversed through the remainder\r\n                        // of the source and has set the data, thus we can exit here\r\n                        return;\r\n                    }\r\n                    else if ( funcNotation )\r\n                    {\r\n                        // Function call\r\n                        a[i] = a[i].replace(__reFn, '');\r\n                        data = data[ a[i] ]( val );\r\n                    }\r\n    \r\n                    // If the nested object doesn't currently exist - since we are\r\n                    // trying to set the value - create it\r\n                    if ( data[ a[i] ] === null || data[ a[i] ] === undefined )\r\n                    {\r\n                        data[ a[i] ] = {};\r\n                    }\r\n                    data = data[ a[i] ];\r\n                }\r\n    \r\n                // Last item in the input - i.e, the actual set\r\n                if ( aLast.match(__reFn ) )\r\n                {\r\n                    // Function call\r\n                    data = data[ aLast.replace(__reFn, '') ]( val );\r\n                }\r\n                else\r\n                {\r\n                    // If array notation is used, we just want to strip it and use the property name\r\n                    // and assign the value. If it isn't used, then we get the result we want anyway\r\n                    data[ aLast.replace(__reArray, '') ] = val;\r\n                }\r\n            };\r\n    \r\n            return function (data, val) { // meta is also passed in, but not used\r\n                return setData( data, val, mSource );\r\n            };\r\n        }\r\n        else\r\n        {\r\n            /* Array or flat object mapping */\r\n            return function (data, val) { // meta is also passed in, but not used\r\n                data[mSource] = val;\r\n            };\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return an array with the full table data\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns array {array} aData Master data array\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetDataMaster ( settings )\r\n    {\r\n        return _pluck( settings.aoData, '_aData' );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Nuke the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnClearTable( settings )\r\n    {\r\n        settings.aoData.length = 0;\r\n        settings.aiDisplayMaster.length = 0;\r\n        settings.aiDisplay.length = 0;\r\n        settings.aIds = {};\r\n    }\r\n    \r\n    \r\n     /**\r\n     * Take an array of integers (index array) and remove a target integer (value - not\r\n     * the key!)\r\n     *  @param {array} a Index array to target\r\n     *  @param {int} iTarget value to find\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDeleteIndex( a, iTarget, splice )\r\n    {\r\n        var iTargetIndex = -1;\r\n    \r\n        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n        {\r\n            if ( a[i] == iTarget )\r\n            {\r\n                iTargetIndex = i;\r\n            }\r\n            else if ( a[i] > iTarget )\r\n            {\r\n                a[i]--;\r\n            }\r\n        }\r\n    \r\n        if ( iTargetIndex != -1 && splice === undefined )\r\n        {\r\n            a.splice( iTargetIndex, 1 );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Mark cached data as invalid such that a re-read of the data will occur when\r\n     * the cached data is next requested. Also update from the data source object.\r\n     *\r\n     * @param {object} settings DataTables settings object\r\n     * @param {int}    rowIdx   Row index to invalidate\r\n     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\r\n     *     or 'data'\r\n     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\r\n     *     row will be invalidated\r\n     * @memberof DataTable#oApi\r\n     *\r\n     * @todo For the modularisation of v1.11 this will need to become a callback, so\r\n     *   the sort and filter methods can subscribe to it. That will required\r\n     *   initialisation options for sorting, which is why it is not already baked in\r\n     */\r\n    function _fnInvalidate( settings, rowIdx, src, colIdx )\r\n    {\r\n        var row = settings.aoData[ rowIdx ];\r\n        var i, ien;\r\n        var cellWrite = function ( cell, col ) {\r\n            // This is very frustrating, but in IE if you just write directly\r\n            // to innerHTML, and elements that are overwritten are GC'ed,\r\n            // even if there is a reference to them elsewhere\r\n            while ( cell.childNodes.length ) {\r\n                cell.removeChild( cell.firstChild );\r\n            }\r\n    \r\n            cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\r\n        };\r\n    \r\n        // Are we reading last data from DOM or the data object?\r\n        if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\r\n            // Read the data from the DOM\r\n            row._aData = _fnGetRowElements(\r\n                    settings, row, colIdx, colIdx === undefined ? undefined : row._aData\r\n                )\r\n                .data;\r\n        }\r\n        else {\r\n            // Reading from data object, update the DOM\r\n            var cells = row.anCells;\r\n    \r\n            if ( cells ) {\r\n                if ( colIdx !== undefined ) {\r\n                    cellWrite( cells[colIdx], colIdx );\r\n                }\r\n                else {\r\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                        cellWrite( cells[i], i );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        // For both row and cell invalidation, the cached data for sorting and\r\n        // filtering is nulled out\r\n        row._aSortData = null;\r\n        row._aFilterData = null;\r\n    \r\n        // Invalidate the type for a specific column (if given) or all columns since\r\n        // the data might have changed\r\n        var cols = settings.aoColumns;\r\n        if ( colIdx !== undefined ) {\r\n            cols[ colIdx ].sType = null;\r\n        }\r\n        else {\r\n            for ( i=0, ien=cols.length ; i<ien ; i++ ) {\r\n                cols[i].sType = null;\r\n            }\r\n    \r\n            // Update DataTables special `DT_*` attributes for the row\r\n            _fnRowAttributes( settings, row );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Build a data source object from an HTML row, reading the contents of the\r\n     * cells that are in the row.\r\n     *\r\n     * @param {object} settings DataTables settings object\r\n     * @param {node|object} TR element from which to read data or existing row\r\n     *   object from which to re-read the data from the cells\r\n     * @param {int} [colIdx] Optional column index\r\n     * @param {array|object} [d] Data source object. If `colIdx` is given then this\r\n     *   parameter should also be given and will be used to write the data into.\r\n     *   Only the column in question will be written\r\n     * @returns {object} Object with two parameters: `data` the data read, in\r\n     *   document order, and `cells` and array of nodes (they can be useful to the\r\n     *   caller, so rather than needing a second traversal to get them, just return\r\n     *   them from here).\r\n     * @memberof DataTable#oApi\r\n     */\r\n    function _fnGetRowElements( settings, row, colIdx, d )\r\n    {\r\n        var\r\n            tds = [],\r\n            td = row.firstChild,\r\n            name, col, o, i=0, contents,\r\n            columns = settings.aoColumns,\r\n            objectRead = settings._rowReadObject;\r\n    \r\n        // Allow the data object to be passed in, or construct\r\n        d = d !== undefined ?\r\n            d :\r\n            objectRead ?\r\n                {} :\r\n                [];\r\n    \r\n        var attr = function ( str, td  ) {\r\n            if ( typeof str === 'string' ) {\r\n                var idx = str.indexOf('@');\r\n    \r\n                if ( idx !== -1 ) {\r\n                    var attr = str.substring( idx+1 );\r\n                    var setter = _fnSetObjectDataFn( str );\r\n                    setter( d, td.getAttribute( attr ) );\r\n                }\r\n            }\r\n        };\r\n    \r\n        // Read data from a cell and store into the data object\r\n        var cellProcess = function ( cell ) {\r\n            if ( colIdx === undefined || colIdx === i ) {\r\n                col = columns[i];\r\n                contents = $.trim(cell.innerHTML);\r\n    \r\n                if ( col && col._bAttrSrc ) {\r\n                    var setter = _fnSetObjectDataFn( col.mData._ );\r\n                    setter( d, contents );\r\n    \r\n                    attr( col.mData.sort, cell );\r\n                    attr( col.mData.type, cell );\r\n                    attr( col.mData.filter, cell );\r\n                }\r\n                else {\r\n                    // Depending on the `data` option for the columns the data can\r\n                    // be read to either an object or an array.\r\n                    if ( objectRead ) {\r\n                        if ( ! col._setter ) {\r\n                            // Cache the setter function\r\n                            col._setter = _fnSetObjectDataFn( col.mData );\r\n                        }\r\n                        col._setter( d, contents );\r\n                    }\r\n                    else {\r\n                        d[i] = contents;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            i++;\r\n        };\r\n    \r\n        if ( td ) {\r\n            // `tr` element was passed in\r\n            while ( td ) {\r\n                name = td.nodeName.toUpperCase();\r\n    \r\n                if ( name == \"TD\" || name == \"TH\" ) {\r\n                    cellProcess( td );\r\n                    tds.push( td );\r\n                }\r\n    \r\n                td = td.nextSibling;\r\n            }\r\n        }\r\n        else {\r\n            // Existing row object passed in\r\n            tds = row.anCells;\r\n    \r\n            for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\r\n                cellProcess( tds[j] );\r\n            }\r\n        }\r\n    \r\n        // Read the ID from the DOM if present\r\n        var rowNode = row.firstChild ? row : row.nTr;\r\n    \r\n        if ( rowNode ) {\r\n            var id = rowNode.getAttribute( 'id' );\r\n    \r\n            if ( id ) {\r\n                _fnSetObjectDataFn( settings.rowId )( d, id );\r\n            }\r\n        }\r\n    \r\n        return {\r\n            data: d,\r\n            cells: tds\r\n        };\r\n    }\r\n    /**\r\n     * Create a new TR element (and it's TD children) for a row\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {int} iRow Row to consider\r\n     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\r\n     *    DataTables will create a row automatically\r\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n     *    if nTr is.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\r\n    {\r\n        var\r\n            row = oSettings.aoData[iRow],\r\n            rowData = row._aData,\r\n            cells = [],\r\n            nTr, nTd, oCol,\r\n            i, iLen;\r\n    \r\n        if ( row.nTr === null )\r\n        {\r\n            nTr = nTrIn || document.createElement('tr');\r\n    \r\n            row.nTr = nTr;\r\n            row.anCells = cells;\r\n    \r\n            /* Use a private property on the node to allow reserve mapping from the node\r\n             * to the aoData array for fast look up\r\n             */\r\n            nTr._DT_RowIndex = iRow;\r\n    \r\n            /* Special parameters can be given by the data source to be used on the row */\r\n            _fnRowAttributes( oSettings, row );\r\n    \r\n            /* Process each column */\r\n            for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\r\n            {\r\n                oCol = oSettings.aoColumns[i];\r\n    \r\n                nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\r\n                nTd._DT_CellIndex = {\r\n                    row: iRow,\r\n                    column: i\r\n                };\r\n                \r\n                cells.push( nTd );\r\n    \r\n                // Need to create the HTML if new, or if a rendering function is defined\r\n                if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&\r\n                     (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\r\n                ) {\r\n                    nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\r\n                }\r\n    \r\n                /* Add user defined class */\r\n                if ( oCol.sClass )\r\n                {\r\n                    nTd.className += ' '+oCol.sClass;\r\n                }\r\n    \r\n                // Visibility - add or remove as required\r\n                if ( oCol.bVisible && ! nTrIn )\r\n                {\r\n                    nTr.appendChild( nTd );\r\n                }\r\n                else if ( ! oCol.bVisible && nTrIn )\r\n                {\r\n                    nTd.parentNode.removeChild( nTd );\r\n                }\r\n    \r\n                if ( oCol.fnCreatedCell )\r\n                {\r\n                    oCol.fnCreatedCell.call( oSettings.oInstance,\r\n                        nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\r\n                    );\r\n                }\r\n            }\r\n    \r\n            _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\r\n        }\r\n    \r\n        // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\r\n        // and deployed\r\n        row.nTr.setAttribute( 'role', 'row' );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add attributes to a row based on the special `DT_*` parameters in a data\r\n     * source object.\r\n     *  @param {object} settings DataTables settings object\r\n     *  @param {object} DataTables row object for the row to be modified\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnRowAttributes( settings, row )\r\n    {\r\n        var tr = row.nTr;\r\n        var data = row._aData;\r\n    \r\n        if ( tr ) {\r\n            var id = settings.rowIdFn( data );\r\n    \r\n            if ( id ) {\r\n                tr.id = id;\r\n            }\r\n    \r\n            if ( data.DT_RowClass ) {\r\n                // Remove any classes added by DT_RowClass before\r\n                var a = data.DT_RowClass.split(' ');\r\n                row.__rowc = row.__rowc ?\r\n                    _unique( row.__rowc.concat( a ) ) :\r\n                    a;\r\n    \r\n                $(tr)\r\n                    .removeClass( row.__rowc.join(' ') )\r\n                    .addClass( data.DT_RowClass );\r\n            }\r\n    \r\n            if ( data.DT_RowAttr ) {\r\n                $(tr).attr( data.DT_RowAttr );\r\n            }\r\n    \r\n            if ( data.DT_RowData ) {\r\n                $(tr).data( data.DT_RowData );\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Create the HTML header for the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnBuildHead( oSettings )\r\n    {\r\n        var i, ien, cell, row, column;\r\n        var thead = oSettings.nTHead;\r\n        var tfoot = oSettings.nTFoot;\r\n        var createHeader = $('th, td', thead).length === 0;\r\n        var classes = oSettings.oClasses;\r\n        var columns = oSettings.aoColumns;\r\n    \r\n        if ( createHeader ) {\r\n            row = $('<tr/>').appendTo( thead );\r\n        }\r\n    \r\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n            column = columns[i];\r\n            cell = $( column.nTh ).addClass( column.sClass );\r\n    \r\n            if ( createHeader ) {\r\n                cell.appendTo( row );\r\n            }\r\n    \r\n            // 1.11 move into sorting\r\n            if ( oSettings.oFeatures.bSort ) {\r\n                cell.addClass( column.sSortingClass );\r\n    \r\n                if ( column.bSortable !== false ) {\r\n                    cell\r\n                        .attr( 'tabindex', oSettings.iTabIndex )\r\n                        .attr( 'aria-controls', oSettings.sTableId );\r\n    \r\n                    _fnSortAttachListener( oSettings, column.nTh, i );\r\n                }\r\n            }\r\n    \r\n            if ( column.sTitle != cell[0].innerHTML ) {\r\n                cell.html( column.sTitle );\r\n            }\r\n    \r\n            _fnRenderer( oSettings, 'header' )(\r\n                oSettings, cell, column, classes\r\n            );\r\n        }\r\n    \r\n        if ( createHeader ) {\r\n            _fnDetectHeader( oSettings.aoHeader, thead );\r\n        }\r\n        \r\n        /* ARIA role for the rows */\r\n        $(thead).find('>tr').attr('role', 'row');\r\n    \r\n        /* Deal with the footer - add classes if required */\r\n        $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\r\n        $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\r\n    \r\n        // Cache the footer cells. Note that we only take the cells from the first\r\n        // row in the footer. If there is more than one row the user wants to\r\n        // interact with, they need to use the table().foot() method. Note also this\r\n        // allows cells to be used for multiple columns using colspan\r\n        if ( tfoot !== null ) {\r\n            var cells = oSettings.aoFooter[0];\r\n    \r\n            for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                column = columns[i];\r\n                column.nTf = cells[i].cell;\r\n    \r\n                if ( column.sClass ) {\r\n                    $(column.nTf).addClass( column.sClass );\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the header (or footer) element based on the column visibility states. The\r\n     * methodology here is to use the layout array from _fnDetectHeader, modified for\r\n     * the instantaneous column visibility, to construct the new layout. The grid is\r\n     * traversed over cell at a time in a rows x columns grid fashion, although each\r\n     * cell insert can cover multiple elements in the grid - which is tracks using the\r\n     * aApplied array. Cell inserts in the grid will only occur where there isn't\r\n     * already a cell in that position.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param array {objects} aoSource Layout array from _fnDetectHeader\r\n     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\r\n    {\r\n        var i, iLen, j, jLen, k, kLen, n, nLocalTr;\r\n        var aoLocal = [];\r\n        var aApplied = [];\r\n        var iColumns = oSettings.aoColumns.length;\r\n        var iRowspan, iColspan;\r\n    \r\n        if ( ! aoSource )\r\n        {\r\n            return;\r\n        }\r\n    \r\n        if (  bIncludeHidden === undefined )\r\n        {\r\n            bIncludeHidden = false;\r\n        }\r\n    \r\n        /* Make a copy of the master layout array, but without the visible columns in it */\r\n        for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\r\n        {\r\n            aoLocal[i] = aoSource[i].slice();\r\n            aoLocal[i].nTr = aoSource[i].nTr;\r\n    \r\n            /* Remove any columns which are currently hidden */\r\n            for ( j=iColumns-1 ; j>=0 ; j-- )\r\n            {\r\n                if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\r\n                {\r\n                    aoLocal[i].splice( j, 1 );\r\n                }\r\n            }\r\n    \r\n            /* Prep the applied array - it needs an element for each row */\r\n            aApplied.push( [] );\r\n        }\r\n    \r\n        for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\r\n        {\r\n            nLocalTr = aoLocal[i].nTr;\r\n    \r\n            /* All cells are going to be replaced, so empty out the row */\r\n            if ( nLocalTr )\r\n            {\r\n                while( (n = nLocalTr.firstChild) )\r\n                {\r\n                    nLocalTr.removeChild( n );\r\n                }\r\n            }\r\n    \r\n            for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\r\n            {\r\n                iRowspan = 1;\r\n                iColspan = 1;\r\n    \r\n                /* Check to see if there is already a cell (row/colspan) covering our target\r\n                 * insert point. If there is, then there is nothing to do.\r\n                 */\r\n                if ( aApplied[i][j] === undefined )\r\n                {\r\n                    nLocalTr.appendChild( aoLocal[i][j].cell );\r\n                    aApplied[i][j] = 1;\r\n    \r\n                    /* Expand the cell to cover as many rows as needed */\r\n                    while ( aoLocal[i+iRowspan] !== undefined &&\r\n                            aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\r\n                    {\r\n                        aApplied[i+iRowspan][j] = 1;\r\n                        iRowspan++;\r\n                    }\r\n    \r\n                    /* Expand the cell to cover as many columns as needed */\r\n                    while ( aoLocal[i][j+iColspan] !== undefined &&\r\n                            aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\r\n                    {\r\n                        /* Must update the applied array over the rows for the columns */\r\n                        for ( k=0 ; k<iRowspan ; k++ )\r\n                        {\r\n                            aApplied[i+k][j+iColspan] = 1;\r\n                        }\r\n                        iColspan++;\r\n                    }\r\n    \r\n                    /* Do the actual expansion in the DOM */\r\n                    $(aoLocal[i][j].cell)\r\n                        .attr('rowspan', iRowspan)\r\n                        .attr('colspan', iColspan);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Insert the required TR nodes into the table for display\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDraw( oSettings )\r\n    {\r\n        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\r\n        var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n        if ( $.inArray( false, aPreDraw ) !== -1 )\r\n        {\r\n            _fnProcessingDisplay( oSettings, false );\r\n            return;\r\n        }\r\n    \r\n        var i, iLen, n;\r\n        var anRows = [];\r\n        var iRowCount = 0;\r\n        var asStripeClasses = oSettings.asStripeClasses;\r\n        var iStripes = asStripeClasses.length;\r\n        var iOpenRows = oSettings.aoOpenRows.length;\r\n        var oLang = oSettings.oLanguage;\r\n        var iInitDisplayStart = oSettings.iInitDisplayStart;\r\n        var bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n        var aiDisplay = oSettings.aiDisplay;\r\n    \r\n        oSettings.bDrawing = true;\r\n    \r\n        /* Check and see if we have an initial draw position from state saving */\r\n        if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n        {\r\n            oSettings._iDisplayStart = bServerSide ?\r\n                iInitDisplayStart :\r\n                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n                    0 :\r\n                    iInitDisplayStart;\r\n    \r\n            oSettings.iInitDisplayStart = -1;\r\n        }\r\n    \r\n        var iDisplayStart = oSettings._iDisplayStart;\r\n        var iDisplayEnd = oSettings.fnDisplayEnd();\r\n    \r\n        /* Server-side processing draw intercept */\r\n        if ( oSettings.bDeferLoading )\r\n        {\r\n            oSettings.bDeferLoading = false;\r\n            oSettings.iDraw++;\r\n            _fnProcessingDisplay( oSettings, false );\r\n        }\r\n        else if ( !bServerSide )\r\n        {\r\n            oSettings.iDraw++;\r\n        }\r\n        else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\r\n        {\r\n            return;\r\n        }\r\n    \r\n        if ( aiDisplay.length !== 0 )\r\n        {\r\n            var iStart = bServerSide ? 0 : iDisplayStart;\r\n            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n    \r\n            for ( var j=iStart ; j<iEnd ; j++ )\r\n            {\r\n                var iDataIndex = aiDisplay[j];\r\n                var aoData = oSettings.aoData[ iDataIndex ];\r\n                if ( aoData.nTr === null )\r\n                {\r\n                    _fnCreateTr( oSettings, iDataIndex );\r\n                }\r\n    \r\n                var nRow = aoData.nTr;\r\n    \r\n                /* Remove the old striping classes and then add the new one */\r\n                if ( iStripes !== 0 )\r\n                {\r\n                    var sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n                    if ( aoData._sRowStripe != sStripe )\r\n                    {\r\n                        $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n                        aoData._sRowStripe = sStripe;\r\n                    }\r\n                }\r\n    \r\n                // Row callback functions - might want to manipulate the row\r\n                // iRowCount and j are not currently documented. Are they at all\r\n                // useful?\r\n                _fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n                    [nRow, aoData._aData, iRowCount, j] );\r\n    \r\n                anRows.push( nRow );\r\n                iRowCount++;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            /* Table is empty - create a row with an empty message in it */\r\n            var sZero = oLang.sZeroRecords;\r\n            if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n            {\r\n                sZero = oLang.sLoadingRecords;\r\n            }\r\n            else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n            {\r\n                sZero = oLang.sEmptyTable;\r\n            }\r\n    \r\n            anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n                .append( $('<td />', {\r\n                    'valign':  'top',\r\n                    'colSpan': _fnVisbleColumns( oSettings ),\r\n                    'class':   oSettings.oClasses.sRowEmpty\r\n                } ).html( sZero ) )[0];\r\n        }\r\n    \r\n        /* Header and footer callbacks */\r\n        _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n    \r\n        _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n    \r\n        var body = $(oSettings.nTBody);\r\n    \r\n        body.children().detach();\r\n        body.append( $(anRows) );\r\n    \r\n        /* Call all required callback functions for the end of a draw */\r\n        _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n    \r\n        /* Draw is complete, sorting and filtering must be as well */\r\n        oSettings.bSorted = false;\r\n        oSettings.bFiltered = false;\r\n        oSettings.bDrawing = false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Redraw the table - taking account of the various features which are enabled\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {boolean} [holdPosition] Keep the current paging position. By default\r\n     *    the paging is reset to the first page\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnReDraw( settings, holdPosition )\r\n    {\r\n        var\r\n            features = settings.oFeatures,\r\n            sort     = features.bSort,\r\n            filter   = features.bFilter;\r\n    \r\n        if ( sort ) {\r\n            _fnSort( settings );\r\n        }\r\n    \r\n        if ( filter ) {\r\n            _fnFilterComplete( settings, settings.oPreviousSearch );\r\n        }\r\n        else {\r\n            // No filtering, so we want to just use the display master\r\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n        }\r\n    \r\n        if ( holdPosition !== true ) {\r\n            settings._iDisplayStart = 0;\r\n        }\r\n    \r\n        // Let any modules know about the draw hold position state (used by\r\n        // scrolling internally)\r\n        settings._drawHold = holdPosition;\r\n    \r\n        _fnDraw( settings );\r\n    \r\n        settings._drawHold = false;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add the options to the page HTML for the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAddOptionsHtml ( oSettings )\r\n    {\r\n        var classes = oSettings.oClasses;\r\n        var table = $(oSettings.nTable);\r\n        var holding = $('<div/>').insertBefore( table ); // Holding element for speed\r\n        var features = oSettings.oFeatures;\r\n    \r\n        // All DataTables are wrapped in a div\r\n        var insert = $('<div/>', {\r\n            id:      oSettings.sTableId+'_wrapper',\r\n            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\r\n        } );\r\n    \r\n        oSettings.nHolding = holding[0];\r\n        oSettings.nTableWrapper = insert[0];\r\n        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\r\n    \r\n        /* Loop over the user set positioning and place the elements as needed */\r\n        var aDom = oSettings.sDom.split('');\r\n        var featureNode, cOption, nNewNode, cNext, sAttr, j;\r\n        for ( var i=0 ; i<aDom.length ; i++ )\r\n        {\r\n            featureNode = null;\r\n            cOption = aDom[i];\r\n    \r\n            if ( cOption == '<' )\r\n            {\r\n                /* New container div */\r\n                nNewNode = $('<div/>')[0];\r\n    \r\n                /* Check to see if we should append an id and/or a class name to the container */\r\n                cNext = aDom[i+1];\r\n                if ( cNext == \"'\" || cNext == '\"' )\r\n                {\r\n                    sAttr = \"\";\r\n                    j = 2;\r\n                    while ( aDom[i+j] != cNext )\r\n                    {\r\n                        sAttr += aDom[i+j];\r\n                        j++;\r\n                    }\r\n    \r\n                    /* Replace jQuery UI constants @todo depreciated */\r\n                    if ( sAttr == \"H\" )\r\n                    {\r\n                        sAttr = classes.sJUIHeader;\r\n                    }\r\n                    else if ( sAttr == \"F\" )\r\n                    {\r\n                        sAttr = classes.sJUIFooter;\r\n                    }\r\n    \r\n                    /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\r\n                     * breaks the string into parts and applies them as needed\r\n                     */\r\n                    if ( sAttr.indexOf('.') != -1 )\r\n                    {\r\n                        var aSplit = sAttr.split('.');\r\n                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\r\n                        nNewNode.className = aSplit[1];\r\n                    }\r\n                    else if ( sAttr.charAt(0) == \"#\" )\r\n                    {\r\n                        nNewNode.id = sAttr.substr(1, sAttr.length-1);\r\n                    }\r\n                    else\r\n                    {\r\n                        nNewNode.className = sAttr;\r\n                    }\r\n    \r\n                    i += j; /* Move along the position array */\r\n                }\r\n    \r\n                insert.append( nNewNode );\r\n                insert = $(nNewNode);\r\n            }\r\n            else if ( cOption == '>' )\r\n            {\r\n                /* End container div */\r\n                insert = insert.parent();\r\n            }\r\n            // @todo Move options into their own plugins?\r\n            else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\r\n            {\r\n                /* Length */\r\n                featureNode = _fnFeatureHtmlLength( oSettings );\r\n            }\r\n            else if ( cOption == 'f' && features.bFilter )\r\n            {\r\n                /* Filter */\r\n                featureNode = _fnFeatureHtmlFilter( oSettings );\r\n            }\r\n            else if ( cOption == 'r' && features.bProcessing )\r\n            {\r\n                /* pRocessing */\r\n                featureNode = _fnFeatureHtmlProcessing( oSettings );\r\n            }\r\n            else if ( cOption == 't' )\r\n            {\r\n                /* Table */\r\n                featureNode = _fnFeatureHtmlTable( oSettings );\r\n            }\r\n            else if ( cOption ==  'i' && features.bInfo )\r\n            {\r\n                /* Info */\r\n                featureNode = _fnFeatureHtmlInfo( oSettings );\r\n            }\r\n            else if ( cOption == 'p' && features.bPaginate )\r\n            {\r\n                /* Pagination */\r\n                featureNode = _fnFeatureHtmlPaginate( oSettings );\r\n            }\r\n            else if ( DataTable.ext.feature.length !== 0 )\r\n            {\r\n                /* Plug-in features */\r\n                var aoFeatures = DataTable.ext.feature;\r\n                for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\r\n                {\r\n                    if ( cOption == aoFeatures[k].cFeature )\r\n                    {\r\n                        featureNode = aoFeatures[k].fnInit( oSettings );\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            /* Add to the 2D features array */\r\n            if ( featureNode )\r\n            {\r\n                var aanFeatures = oSettings.aanFeatures;\r\n    \r\n                if ( ! aanFeatures[cOption] )\r\n                {\r\n                    aanFeatures[cOption] = [];\r\n                }\r\n    \r\n                aanFeatures[cOption].push( featureNode );\r\n                insert.append( featureNode );\r\n            }\r\n        }\r\n    \r\n        /* Built our DOM structure - replace the holding div with what we want */\r\n        holding.replaceWith( insert );\r\n        oSettings.nHolding = null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Use the DOM source to create up an array of header cells. The idea here is to\r\n     * create a layout grid (array) of rows x columns, which contains a reference\r\n     * to the cell that that point in the grid (regardless of col/rowspan), such that\r\n     * any column / row could be removed and the new grid constructed\r\n     *  @param array {object} aLayout Array to store the calculated layout in\r\n     *  @param {node} nThead The header/footer element for the table\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDetectHeader ( aLayout, nThead )\r\n    {\r\n        var nTrs = $(nThead).children('tr');\r\n        var nTr, nCell;\r\n        var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\r\n        var bUnique;\r\n        var fnShiftCol = function ( a, i, j ) {\r\n            var k = a[i];\r\n                    while ( k[j] ) {\r\n                j++;\r\n            }\r\n            return j;\r\n        };\r\n    \r\n        aLayout.splice( 0, aLayout.length );\r\n    \r\n        /* We know how many rows there are in the layout - so prep it */\r\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n        {\r\n            aLayout.push( [] );\r\n        }\r\n    \r\n        /* Calculate a layout array */\r\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n        {\r\n            nTr = nTrs[i];\r\n            iColumn = 0;\r\n    \r\n            /* For every cell in the row... */\r\n            nCell = nTr.firstChild;\r\n            while ( nCell ) {\r\n                if ( nCell.nodeName.toUpperCase() == \"TD\" ||\r\n                     nCell.nodeName.toUpperCase() == \"TH\" )\r\n                {\r\n                    /* Get the col and rowspan attributes from the DOM and sanitise them */\r\n                    iColspan = nCell.getAttribute('colspan') * 1;\r\n                    iRowspan = nCell.getAttribute('rowspan') * 1;\r\n                    iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\r\n                    iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\r\n    \r\n                    /* There might be colspan cells already in this row, so shift our target\r\n                     * accordingly\r\n                     */\r\n                    iColShifted = fnShiftCol( aLayout, i, iColumn );\r\n    \r\n                    /* Cache calculation for unique columns */\r\n                    bUnique = iColspan === 1 ? true : false;\r\n    \r\n                    /* If there is col / rowspan, copy the information into the layout grid */\r\n                    for ( l=0 ; l<iColspan ; l++ )\r\n                    {\r\n                        for ( k=0 ; k<iRowspan ; k++ )\r\n                        {\r\n                            aLayout[i+k][iColShifted+l] = {\r\n                                \"cell\": nCell,\r\n                                \"unique\": bUnique\r\n                            };\r\n                            aLayout[i+k].nTr = nTr;\r\n                        }\r\n                    }\r\n                }\r\n                nCell = nCell.nextSibling;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get an array of unique th elements, one for each column\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {node} nHeader automatically detect the layout from this node - optional\r\n     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\r\n     *  @returns array {node} aReturn list of unique th's\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\r\n    {\r\n        var aReturn = [];\r\n        if ( !aLayout )\r\n        {\r\n            aLayout = oSettings.aoHeader;\r\n            if ( nHeader )\r\n            {\r\n                aLayout = [];\r\n                _fnDetectHeader( aLayout, nHeader );\r\n            }\r\n        }\r\n    \r\n        for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\r\n        {\r\n            for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\r\n            {\r\n                if ( aLayout[i][j].unique &&\r\n                     (!aReturn[j] || !oSettings.bSortCellsTop) )\r\n                {\r\n                    aReturn[j] = aLayout[i][j].cell;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return aReturn;\r\n    }\r\n    \r\n    /**\r\n     * Create an Ajax call based on the table's settings, taking into account that\r\n     * parameters can have multiple forms, and backwards compatibility.\r\n     *\r\n     * @param {object} oSettings dataTables settings object\r\n     * @param {array} data Data to send to the server, required by\r\n     *     DataTables - may be augmented by developer callbacks\r\n     * @param {function} fn Callback function to run when data is obtained\r\n     */\r\n    function _fnBuildAjax( oSettings, data, fn )\r\n    {\r\n        // Compatibility with 1.9-, allow fnServerData and event to manipulate\r\n        _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\r\n    \r\n        // Convert to object based for 1.10+ if using the old array scheme which can\r\n        // come from server-side processing or serverParams\r\n        if ( data && $.isArray(data) ) {\r\n            var tmp = {};\r\n            var rbracket = /(.*?)\\[\\]$/;\r\n    \r\n            $.each( data, function (key, val) {\r\n                var match = val.name.match(rbracket);\r\n    \r\n                if ( match ) {\r\n                    // Support for arrays\r\n                    var name = match[0];\r\n    \r\n                    if ( ! tmp[ name ] ) {\r\n                        tmp[ name ] = [];\r\n                    }\r\n                    tmp[ name ].push( val.value );\r\n                }\r\n                else {\r\n                    tmp[val.name] = val.value;\r\n                }\r\n            } );\r\n            data = tmp;\r\n        }\r\n    \r\n        var ajaxData;\r\n        var ajax = oSettings.ajax;\r\n        var instance = oSettings.oInstance;\r\n        var callback = function ( json ) {\r\n            _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\r\n            fn( json );\r\n        };\r\n    \r\n        if ( $.isPlainObject( ajax ) && ajax.data )\r\n        {\r\n            ajaxData = ajax.data;\r\n    \r\n            var newData = $.isFunction( ajaxData ) ?\r\n                ajaxData( data, oSettings ) :  // fn can manipulate data or return\r\n                ajaxData;                      // an object object or array to merge\r\n    \r\n            // If the function returned something, use that alone\r\n            data = $.isFunction( ajaxData ) && newData ?\r\n                newData :\r\n                $.extend( true, data, newData );\r\n    \r\n            // Remove the data property as we've resolved it already and don't want\r\n            // jQuery to do it again (it is restored at the end of the function)\r\n            delete ajax.data;\r\n        }\r\n    \r\n        var baseAjax = {\r\n            \"data\": data,\r\n            \"success\": function (json) {\r\n                var error = json.error || json.sError;\r\n                if ( error ) {\r\n                    _fnLog( oSettings, 0, error );\r\n                }\r\n    \r\n                oSettings.json = json;\r\n                callback( json );\r\n            },\r\n            \"dataType\": \"json\",\r\n            \"cache\": false,\r\n            \"type\": oSettings.sServerMethod,\r\n            \"error\": function (xhr, error, thrown) {\r\n                var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\r\n    \r\n                if ( $.inArray( true, ret ) === -1 ) {\r\n                    if ( error == \"parsererror\" ) {\r\n                        _fnLog( oSettings, 0, 'Invalid JSON response', 1 );\r\n                    }\r\n                    else if ( xhr.readyState === 4 ) {\r\n                        _fnLog( oSettings, 0, 'Ajax error', 7 );\r\n                    }\r\n                }\r\n    \r\n                _fnProcessingDisplay( oSettings, false );\r\n            }\r\n        };\r\n    \r\n        // Store the data submitted for the API\r\n        oSettings.oAjaxData = data;\r\n    \r\n        // Allow plug-ins and external processes to modify the data\r\n        _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\r\n    \r\n        if ( oSettings.fnServerData )\r\n        {\r\n            // DataTables 1.9- compatibility\r\n            oSettings.fnServerData.call( instance,\r\n                oSettings.sAjaxSource,\r\n                $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\r\n                    return { name: key, value: val };\r\n                } ),\r\n                callback,\r\n                oSettings\r\n            );\r\n        }\r\n        else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\r\n        {\r\n            // DataTables 1.9- compatibility\r\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\r\n                url: ajax || oSettings.sAjaxSource\r\n            } ) );\r\n        }\r\n        else if ( $.isFunction( ajax ) )\r\n        {\r\n            // Is a function - let the caller define what needs to be done\r\n            oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\r\n        }\r\n        else\r\n        {\r\n            // Object to extend the base settings\r\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\r\n    \r\n            // Restore for next time around\r\n            ajax.data = ajaxData;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update the table using an Ajax call\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {boolean} Block the table drawing or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAjaxUpdate( settings )\r\n    {\r\n        if ( settings.bAjaxDataGet ) {\r\n            settings.iDraw++;\r\n            _fnProcessingDisplay( settings, true );\r\n    \r\n            _fnBuildAjax(\r\n                settings,\r\n                _fnAjaxParameters( settings ),\r\n                function(json) {\r\n                    _fnAjaxUpdateDraw( settings, json );\r\n                }\r\n            );\r\n    \r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Build up the parameters in an object needed for a server-side processing\r\n     * request. Note that this is basically done twice, is different ways - a modern\r\n     * method which is used by default in DataTables 1.10 which uses objects and\r\n     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\r\n     * the sAjaxSource option is used in the initialisation, or the legacyAjax\r\n     * option is set.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {bool} block the table drawing or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAjaxParameters( settings )\r\n    {\r\n        var\r\n            columns = settings.aoColumns,\r\n            columnCount = columns.length,\r\n            features = settings.oFeatures,\r\n            preSearch = settings.oPreviousSearch,\r\n            preColSearch = settings.aoPreSearchCols,\r\n            i, data = [], dataProp, column, columnSearch,\r\n            sort = _fnSortFlatten( settings ),\r\n            displayStart = settings._iDisplayStart,\r\n            displayLength = features.bPaginate !== false ?\r\n                settings._iDisplayLength :\r\n                -1;\r\n    \r\n        var param = function ( name, value ) {\r\n            data.push( { 'name': name, 'value': value } );\r\n        };\r\n    \r\n        // DataTables 1.9- compatible method\r\n        param( 'sEcho',          settings.iDraw );\r\n        param( 'iColumns',       columnCount );\r\n        param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\r\n        param( 'iDisplayStart',  displayStart );\r\n        param( 'iDisplayLength', displayLength );\r\n    \r\n        // DataTables 1.10+ method\r\n        var d = {\r\n            draw:    settings.iDraw,\r\n            columns: [],\r\n            order:   [],\r\n            start:   displayStart,\r\n            length:  displayLength,\r\n            search:  {\r\n                value: preSearch.sSearch,\r\n                regex: preSearch.bRegex\r\n            }\r\n        };\r\n    \r\n        for ( i=0 ; i<columnCount ; i++ ) {\r\n            column = columns[i];\r\n            columnSearch = preColSearch[i];\r\n            dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\r\n    \r\n            d.columns.push( {\r\n                data:       dataProp,\r\n                name:       column.sName,\r\n                searchable: column.bSearchable,\r\n                orderable:  column.bSortable,\r\n                search:     {\r\n                    value: columnSearch.sSearch,\r\n                    regex: columnSearch.bRegex\r\n                }\r\n            } );\r\n    \r\n            param( \"mDataProp_\"+i, dataProp );\r\n    \r\n            if ( features.bFilter ) {\r\n                param( 'sSearch_'+i,     columnSearch.sSearch );\r\n                param( 'bRegex_'+i,      columnSearch.bRegex );\r\n                param( 'bSearchable_'+i, column.bSearchable );\r\n            }\r\n    \r\n            if ( features.bSort ) {\r\n                param( 'bSortable_'+i, column.bSortable );\r\n            }\r\n        }\r\n    \r\n        if ( features.bFilter ) {\r\n            param( 'sSearch', preSearch.sSearch );\r\n            param( 'bRegex', preSearch.bRegex );\r\n        }\r\n    \r\n        if ( features.bSort ) {\r\n            $.each( sort, function ( i, val ) {\r\n                d.order.push( { column: val.col, dir: val.dir } );\r\n    \r\n                param( 'iSortCol_'+i, val.col );\r\n                param( 'sSortDir_'+i, val.dir );\r\n            } );\r\n    \r\n            param( 'iSortingCols', sort.length );\r\n        }\r\n    \r\n        // If the legacy.ajax parameter is null, then we automatically decide which\r\n        // form to use, based on sAjaxSource\r\n        var legacy = DataTable.ext.legacy.ajax;\r\n        if ( legacy === null ) {\r\n            return settings.sAjaxSource ? data : d;\r\n        }\r\n    \r\n        // Otherwise, if legacy has been specified then we use that to decide on the\r\n        // form\r\n        return legacy ? data : d;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Data the data from the server (nuking the old) and redraw the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} json json data return from the server.\r\n     *  @param {string} json.sEcho Tracking flag for DataTables to match requests\r\n     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\r\n     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\r\n     *  @param {array} json.aaData The data to display on this page\r\n     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnAjaxUpdateDraw ( settings, json )\r\n    {\r\n        // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\r\n        // Support both\r\n        var compat = function ( old, modern ) {\r\n            return json[old] !== undefined ? json[old] : json[modern];\r\n        };\r\n    \r\n        var data = _fnAjaxDataSrc( settings, json );\r\n        var draw            = compat( 'sEcho',                'draw' );\r\n        var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\r\n        var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\r\n    \r\n        if ( draw ) {\r\n            // Protect against out of sequence returns\r\n            if ( draw*1 < settings.iDraw ) {\r\n                return;\r\n            }\r\n            settings.iDraw = draw * 1;\r\n        }\r\n    \r\n        _fnClearTable( settings );\r\n        settings._iRecordsTotal   = parseInt(recordsTotal, 10);\r\n        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\r\n    \r\n        for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n            _fnAddData( settings, data[i] );\r\n        }\r\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n    \r\n        settings.bAjaxDataGet = false;\r\n        _fnDraw( settings );\r\n    \r\n        if ( ! settings._bInitComplete ) {\r\n            _fnInitComplete( settings, json );\r\n        }\r\n    \r\n        settings.bAjaxDataGet = true;\r\n        _fnProcessingDisplay( settings, false );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the data from the JSON data source to use for drawing a table. Using\r\n     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\r\n     * source object, or from a processing function.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param  {object} json Data source object / array from the server\r\n     *  @return {array} Array of data to use\r\n     */\r\n    function _fnAjaxDataSrc ( oSettings, json )\r\n    {\r\n        var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\r\n            oSettings.ajax.dataSrc :\r\n            oSettings.sAjaxDataProp; // Compatibility with 1.9-.\r\n    \r\n        // Compatibility with 1.9-. In order to read from aaData, check if the\r\n        // default has been changed, if not, check for aaData\r\n        if ( dataSrc === 'data' ) {\r\n            return json.aaData || json[dataSrc];\r\n        }\r\n    \r\n        return dataSrc !== \"\" ?\r\n            _fnGetObjectDataFn( dataSrc )( json ) :\r\n            json;\r\n    }\r\n    \r\n    /**\r\n     * Generate the node required for filtering text\r\n     *  @returns {node} Filter control element\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlFilter ( settings )\r\n    {\r\n        var classes = settings.oClasses;\r\n        var tableId = settings.sTableId;\r\n        var language = settings.oLanguage;\r\n        var previousSearch = settings.oPreviousSearch;\r\n        var features = settings.aanFeatures;\r\n        var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\r\n    \r\n        var str = language.sSearch;\r\n        str = str.match(/_INPUT_/) ?\r\n            str.replace('_INPUT_', input) :\r\n            str+input;\r\n    \r\n        var filter = $('<div/>', {\r\n                'id': ! features.f ? tableId+'_filter' : null,\r\n                'class': classes.sFilter\r\n            } )\r\n            .append( $('<label/>' ).append( str ) );\r\n    \r\n        var searchFn = function() {\r\n            /* Update all other filter input elements for the new display */\r\n            var n = features.f;\r\n            var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\r\n    \r\n            /* Now do the filter */\r\n            if ( val != previousSearch.sSearch ) {\r\n                _fnFilterComplete( settings, {\r\n                    \"sSearch\": val,\r\n                    \"bRegex\": previousSearch.bRegex,\r\n                    \"bSmart\": previousSearch.bSmart ,\r\n                    \"bCaseInsensitive\": previousSearch.bCaseInsensitive\r\n                } );\r\n    \r\n                // Need to redraw, without resorting\r\n                settings._iDisplayStart = 0;\r\n                _fnDraw( settings );\r\n            }\r\n        };\r\n    \r\n        var searchDelay = settings.searchDelay !== null ?\r\n            settings.searchDelay :\r\n            _fnDataSource( settings ) === 'ssp' ?\r\n                400 :\r\n                0;\r\n    \r\n        var jqFilter = $('input', filter)\r\n            .val( previousSearch.sSearch )\r\n            .attr( 'placeholder', language.sSearchPlaceholder )\r\n            .on(\r\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\r\n                searchDelay ?\r\n                    _fnThrottle( searchFn, searchDelay ) :\r\n                    searchFn\r\n            )\r\n            .on( 'keypress.DT', function(e) {\r\n                /* Prevent form submission */\r\n                if ( e.keyCode == 13 ) {\r\n                    return false;\r\n                }\r\n            } )\r\n            .attr('aria-controls', tableId);\r\n    \r\n        // Update the input elements whenever the table is filtered\r\n        $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\r\n            if ( settings === s ) {\r\n                // IE9 throws an 'unknown error' if document.activeElement is used\r\n                // inside an iframe or frame...\r\n                try {\r\n                    if ( jqFilter[0] !== document.activeElement ) {\r\n                        jqFilter.val( previousSearch.sSearch );\r\n                    }\r\n                }\r\n                catch ( e ) {}\r\n            }\r\n        } );\r\n    \r\n        return filter[0];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Filter the table using both the global filter and column based filtering\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} oSearch search information\r\n     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterComplete ( oSettings, oInput, iForce )\r\n    {\r\n        var oPrevSearch = oSettings.oPreviousSearch;\r\n        var aoPrevSearch = oSettings.aoPreSearchCols;\r\n        var fnSaveFilter = function ( oFilter ) {\r\n            /* Save the filtering values */\r\n            oPrevSearch.sSearch = oFilter.sSearch;\r\n            oPrevSearch.bRegex = oFilter.bRegex;\r\n            oPrevSearch.bSmart = oFilter.bSmart;\r\n            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\r\n        };\r\n        var fnRegex = function ( o ) {\r\n            // Backwards compatibility with the bEscapeRegex option\r\n            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\r\n        };\r\n    \r\n        // Resolve any column types that are unknown due to addition or invalidation\r\n        // @todo As per sort - can this be moved into an event handler?\r\n        _fnColumnTypes( oSettings );\r\n    \r\n        /* In server-side processing all filtering is done by the server, so no point hanging around here */\r\n        if ( _fnDataSource( oSettings ) != 'ssp' )\r\n        {\r\n            /* Global filter */\r\n            _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\r\n            fnSaveFilter( oInput );\r\n    \r\n            /* Now do the individual column filter */\r\n            for ( var i=0 ; i<aoPrevSearch.length ; i++ )\r\n            {\r\n                _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\r\n                    aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\r\n            }\r\n    \r\n            /* Custom filtering */\r\n            _fnFilterCustom( oSettings );\r\n        }\r\n        else\r\n        {\r\n            fnSaveFilter( oInput );\r\n        }\r\n    \r\n        /* Tell the draw function we have been filtering */\r\n        oSettings.bFiltered = true;\r\n        _fnCallbackFire( oSettings, null, 'search', [oSettings] );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Apply custom filtering functions\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterCustom( settings )\r\n    {\r\n        var filters = DataTable.ext.search;\r\n        var displayRows = settings.aiDisplay;\r\n        var row, rowIdx;\r\n    \r\n        for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\r\n            var rows = [];\r\n    \r\n            // Loop over each row and see if it should be included\r\n            for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\r\n                rowIdx = displayRows[ j ];\r\n                row = settings.aoData[ rowIdx ];\r\n    \r\n                if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\r\n                    rows.push( rowIdx );\r\n                }\r\n            }\r\n    \r\n            // So the array reference doesn't break set the results into the\r\n            // existing array\r\n            displayRows.length = 0;\r\n            $.merge( displayRows, rows );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Filter the table on a per-column basis\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {string} sInput string to filter on\r\n     *  @param {int} iColumn column to filter\r\n     *  @param {bool} bRegex treat search string as a regular expression or not\r\n     *  @param {bool} bSmart use smart filtering or not\r\n     *  @param {bool} bCaseInsensitive Do case insenstive matching or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\r\n    {\r\n        if ( searchStr === '' ) {\r\n            return;\r\n        }\r\n    \r\n        var data;\r\n        var out = [];\r\n        var display = settings.aiDisplay;\r\n        var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\r\n    \r\n        for ( var i=0 ; i<display.length ; i++ ) {\r\n            data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\r\n    \r\n            if ( rpSearch.test( data ) ) {\r\n                out.push( display[i] );\r\n            }\r\n        }\r\n    \r\n        settings.aiDisplay = out;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Filter the data table based on user input and draw the table\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {string} input string to filter on\r\n     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\r\n     *  @param {bool} regex treat as a regular expression or not\r\n     *  @param {bool} smart perform smart filtering or not\r\n     *  @param {bool} caseInsensitive Do case insenstive matching or not\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\r\n    {\r\n        var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\r\n        var prevSearch = settings.oPreviousSearch.sSearch;\r\n        var displayMaster = settings.aiDisplayMaster;\r\n        var display, invalidated, i;\r\n        var filtered = [];\r\n    \r\n        // Need to take account of custom filtering functions - always filter\r\n        if ( DataTable.ext.search.length !== 0 ) {\r\n            force = true;\r\n        }\r\n    \r\n        // Check if any of the rows were invalidated\r\n        invalidated = _fnFilterData( settings );\r\n    \r\n        // If the input is blank - we just want the full data set\r\n        if ( input.length <= 0 ) {\r\n            settings.aiDisplay = displayMaster.slice();\r\n        }\r\n        else {\r\n            // New search - start from the master array\r\n            if ( invalidated ||\r\n                 force ||\r\n                 prevSearch.length > input.length ||\r\n                 input.indexOf(prevSearch) !== 0 ||\r\n                 settings.bSorted // On resort, the display master needs to be\r\n                                  // re-filtered since indexes will have changed\r\n            ) {\r\n                settings.aiDisplay = displayMaster.slice();\r\n            }\r\n    \r\n            // Search the display array\r\n            display = settings.aiDisplay;\r\n    \r\n            for ( i=0 ; i<display.length ; i++ ) {\r\n                if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\r\n                    filtered.push( display[i] );\r\n                }\r\n            }\r\n    \r\n            settings.aiDisplay = filtered;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Build a regular expression object suitable for searching a table\r\n     *  @param {string} sSearch string to search for\r\n     *  @param {bool} bRegex treat as a regular expression or not\r\n     *  @param {bool} bSmart perform smart filtering or not\r\n     *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n     *  @returns {RegExp} constructed object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\r\n    {\r\n        search = regex ?\r\n            search :\r\n            _fnEscapeRegex( search );\r\n        \r\n        if ( smart ) {\r\n            /* For smart filtering we want to allow the search to work regardless of\r\n             * word order. We also want double quoted text to be preserved, so word\r\n             * order is important - a la google. So this is what we want to\r\n             * generate:\r\n             * \r\n             * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\r\n             */\r\n            var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\r\n                if ( word.charAt(0) === '\"' ) {\r\n                    var m = word.match( /^\"(.*)\"$/ );\r\n                    word = m ? m[1] : word;\r\n                }\r\n    \r\n                return word.replace('\"', '');\r\n            } );\r\n    \r\n            search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\r\n        }\r\n    \r\n        return new RegExp( search, caseInsensitive ? 'i' : '' );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Escape a string such that it can be used in a regular expression\r\n     *  @param {string} sVal string to escape\r\n     *  @returns {string} escaped string\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    var _fnEscapeRegex = DataTable.util.escapeRegex;\r\n    \r\n    var __filter_div = $('<div>')[0];\r\n    var __filter_div_textContent = __filter_div.textContent !== undefined;\r\n    \r\n    // Update the filtering data for each row if needed (by invalidation or first run)\r\n    function _fnFilterData ( settings )\r\n    {\r\n        var columns = settings.aoColumns;\r\n        var column;\r\n        var i, j, ien, jen, filterData, cellData, row;\r\n        var fomatters = DataTable.ext.type.search;\r\n        var wasInvalidated = false;\r\n    \r\n        for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n            row = settings.aoData[i];\r\n    \r\n            if ( ! row._aFilterData ) {\r\n                filterData = [];\r\n    \r\n                for ( j=0, jen=columns.length ; j<jen ; j++ ) {\r\n                    column = columns[j];\r\n    \r\n                    if ( column.bSearchable ) {\r\n                        cellData = _fnGetCellData( settings, i, j, 'filter' );\r\n    \r\n                        if ( fomatters[ column.sType ] ) {\r\n                            cellData = fomatters[ column.sType ]( cellData );\r\n                        }\r\n    \r\n                        // Search in DataTables 1.10 is string based. In 1.11 this\r\n                        // should be altered to also allow strict type checking.\r\n                        if ( cellData === null ) {\r\n                            cellData = '';\r\n                        }\r\n    \r\n                        if ( typeof cellData !== 'string' && cellData.toString ) {\r\n                            cellData = cellData.toString();\r\n                        }\r\n                    }\r\n                    else {\r\n                        cellData = '';\r\n                    }\r\n    \r\n                    // If it looks like there is an HTML entity in the string,\r\n                    // attempt to decode it so sorting works as expected. Note that\r\n                    // we could use a single line of jQuery to do this, but the DOM\r\n                    // method used here is much faster http://jsperf.com/html-decode\r\n                    if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\r\n                        __filter_div.innerHTML = cellData;\r\n                        cellData = __filter_div_textContent ?\r\n                            __filter_div.textContent :\r\n                            __filter_div.innerText;\r\n                    }\r\n    \r\n                    if ( cellData.replace ) {\r\n                        cellData = cellData.replace(/[\\r\\n]/g, '');\r\n                    }\r\n    \r\n                    filterData.push( cellData );\r\n                }\r\n    \r\n                row._aFilterData = filterData;\r\n                row._sFilterRow = filterData.join('  ');\r\n                wasInvalidated = true;\r\n            }\r\n        }\r\n    \r\n        return wasInvalidated;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Convert from the internal Hungarian notation to camelCase for external\r\n     * interaction\r\n     *  @param {object} obj Object to convert\r\n     *  @returns {object} Inverted object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSearchToCamel ( obj )\r\n    {\r\n        return {\r\n            search:          obj.sSearch,\r\n            smart:           obj.bSmart,\r\n            regex:           obj.bRegex,\r\n            caseInsensitive: obj.bCaseInsensitive\r\n        };\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Convert from camelCase notation to the internal Hungarian. We could use the\r\n     * Hungarian convert function here, but this is cleaner\r\n     *  @param {object} obj Object to convert\r\n     *  @returns {object} Inverted object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSearchToHung ( obj )\r\n    {\r\n        return {\r\n            sSearch:          obj.search,\r\n            bSmart:           obj.smart,\r\n            bRegex:           obj.regex,\r\n            bCaseInsensitive: obj.caseInsensitive\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Generate the node required for the info display\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {node} Information element\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlInfo ( settings )\r\n    {\r\n        var\r\n            tid = settings.sTableId,\r\n            nodes = settings.aanFeatures.i,\r\n            n = $('<div/>', {\r\n                'class': settings.oClasses.sInfo,\r\n                'id': ! nodes ? tid+'_info' : null\r\n            } );\r\n    \r\n        if ( ! nodes ) {\r\n            // Update display on each draw\r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": _fnUpdateInfo,\r\n                \"sName\": \"information\"\r\n            } );\r\n    \r\n            n\r\n                .attr( 'role', 'status' )\r\n                .attr( 'aria-live', 'polite' );\r\n    \r\n            // Table is described by our info div\r\n            $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\r\n        }\r\n    \r\n        return n[0];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update the information elements in the display\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnUpdateInfo ( settings )\r\n    {\r\n        /* Show information about the table */\r\n        var nodes = settings.aanFeatures.i;\r\n        if ( nodes.length === 0 ) {\r\n            return;\r\n        }\r\n    \r\n        var\r\n            lang  = settings.oLanguage,\r\n            start = settings._iDisplayStart+1,\r\n            end   = settings.fnDisplayEnd(),\r\n            max   = settings.fnRecordsTotal(),\r\n            total = settings.fnRecordsDisplay(),\r\n            out   = total ?\r\n                lang.sInfo :\r\n                lang.sInfoEmpty;\r\n    \r\n        if ( total !== max ) {\r\n            /* Record set after filtering */\r\n            out += ' ' + lang.sInfoFiltered;\r\n        }\r\n    \r\n        // Convert the macros\r\n        out += lang.sInfoPostFix;\r\n        out = _fnInfoMacros( settings, out );\r\n    \r\n        var callback = lang.fnInfoCallback;\r\n        if ( callback !== null ) {\r\n            out = callback.call( settings.oInstance,\r\n                settings, start, end, max, total, out\r\n            );\r\n        }\r\n    \r\n        $(nodes).html( out );\r\n    }\r\n    \r\n    \r\n    function _fnInfoMacros ( settings, str )\r\n    {\r\n        // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\r\n        // internally\r\n        var\r\n            formatter  = settings.fnFormatNumber,\r\n            start      = settings._iDisplayStart+1,\r\n            len        = settings._iDisplayLength,\r\n            vis        = settings.fnRecordsDisplay(),\r\n            all        = len === -1;\r\n    \r\n        return str.\r\n            replace(/_START_/g, formatter.call( settings, start ) ).\r\n            replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\r\n            replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\r\n            replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\r\n            replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\r\n            replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Draw the table for the first time, adding all required features\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnInitialise ( settings )\r\n    {\r\n        var i, iLen, iAjaxStart=settings.iInitDisplayStart;\r\n        var columns = settings.aoColumns, column;\r\n        var features = settings.oFeatures;\r\n        var deferLoading = settings.bDeferLoading; // value modified by the draw\r\n    \r\n        /* Ensure that the table data is fully initialised */\r\n        if ( ! settings.bInitialised ) {\r\n            setTimeout( function(){ _fnInitialise( settings ); }, 200 );\r\n            return;\r\n        }\r\n    \r\n        /* Show the display HTML options */\r\n        _fnAddOptionsHtml( settings );\r\n    \r\n        /* Build and draw the header / footer for the table */\r\n        _fnBuildHead( settings );\r\n        _fnDrawHead( settings, settings.aoHeader );\r\n        _fnDrawHead( settings, settings.aoFooter );\r\n    \r\n        /* Okay to show that something is going on now */\r\n        _fnProcessingDisplay( settings, true );\r\n    \r\n        /* Calculate sizes for columns */\r\n        if ( features.bAutoWidth ) {\r\n            _fnCalculateColumnWidths( settings );\r\n        }\r\n    \r\n        for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\r\n            column = columns[i];\r\n    \r\n            if ( column.sWidth ) {\r\n                column.nTh.style.width = _fnStringToCss( column.sWidth );\r\n            }\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'preInit', [settings] );\r\n    \r\n        // If there is default sorting required - let's do it. The sort function\r\n        // will do the drawing for us. Otherwise we draw the table regardless of the\r\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\r\n        // data (show 'loading' message possibly)\r\n        _fnReDraw( settings );\r\n    \r\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\r\n        var dataSrc = _fnDataSource( settings );\r\n        if ( dataSrc != 'ssp' || deferLoading ) {\r\n            // if there is an ajax source load the data\r\n            if ( dataSrc == 'ajax' ) {\r\n                _fnBuildAjax( settings, [], function(json) {\r\n                    var aData = _fnAjaxDataSrc( settings, json );\r\n    \r\n                    // Got the data - add it to the table\r\n                    for ( i=0 ; i<aData.length ; i++ ) {\r\n                        _fnAddData( settings, aData[i] );\r\n                    }\r\n    \r\n                    // Reset the init display for cookie saving. We've already done\r\n                    // a filter, and therefore cleared it before. So we need to make\r\n                    // it appear 'fresh'\r\n                    settings.iInitDisplayStart = iAjaxStart;\r\n    \r\n                    _fnReDraw( settings );\r\n    \r\n                    _fnProcessingDisplay( settings, false );\r\n                    _fnInitComplete( settings, json );\r\n                }, settings );\r\n            }\r\n            else {\r\n                _fnProcessingDisplay( settings, false );\r\n                _fnInitComplete( settings );\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Draw the table for the first time, adding all required features\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\r\n     *    with client-side processing (optional)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnInitComplete ( settings, json )\r\n    {\r\n        settings._bInitComplete = true;\r\n    \r\n        // When data was added after the initialisation (data or Ajax) we need to\r\n        // calculate the column sizing\r\n        if ( json || settings.oInit.aaData ) {\r\n            _fnAdjustColumnSizing( settings );\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\r\n        _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\r\n    }\r\n    \r\n    \r\n    function _fnLengthChange ( settings, val )\r\n    {\r\n        var len = parseInt( val, 10 );\r\n        settings._iDisplayLength = len;\r\n    \r\n        _fnLengthOverflow( settings );\r\n    \r\n        // Fire length change event\r\n        _fnCallbackFire( settings, null, 'length', [settings, len] );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Generate the node required for user display length changing\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {node} Display length feature node\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlLength ( settings )\r\n    {\r\n        var\r\n            classes  = settings.oClasses,\r\n            tableId  = settings.sTableId,\r\n            menu     = settings.aLengthMenu,\r\n            d2       = $.isArray( menu[0] ),\r\n            lengths  = d2 ? menu[0] : menu,\r\n            language = d2 ? menu[1] : menu;\r\n    \r\n        var select = $('<select/>', {\r\n            'name':          tableId+'_length',\r\n            'aria-controls': tableId,\r\n            'class':         classes.sLengthSelect\r\n        } );\r\n    \r\n        for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\r\n            select[0][ i ] = new Option( language[i], lengths[i] );\r\n        }\r\n    \r\n        var div = $('<div><label/></div>').addClass( classes.sLength );\r\n        if ( ! settings.aanFeatures.l ) {\r\n            div[0].id = tableId+'_length';\r\n        }\r\n    \r\n        div.children().append(\r\n            settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\r\n        );\r\n    \r\n        // Can't use `select` variable as user might provide their own and the\r\n        // reference is broken by the use of outerHTML\r\n        $('select', div)\r\n            .val( settings._iDisplayLength )\r\n            .on( 'change.DT', function(e) {\r\n                _fnLengthChange( settings, $(this).val() );\r\n                _fnDraw( settings );\r\n            } );\r\n    \r\n        // Update node value whenever anything changes the table's length\r\n        $(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\r\n            if ( settings === s ) {\r\n                $('select', div).val( len );\r\n            }\r\n        } );\r\n    \r\n        return div[0];\r\n    }\r\n    \r\n    \r\n    \r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     * Note that most of the paging logic is done in\r\n     * DataTable.ext.pager\r\n     */\r\n    \r\n    /**\r\n     * Generate the node required for default pagination\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @returns {node} Pagination feature node\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlPaginate ( settings )\r\n    {\r\n        var\r\n            type   = settings.sPaginationType,\r\n            plugin = DataTable.ext.pager[ type ],\r\n            modern = typeof plugin === 'function',\r\n            redraw = function( settings ) {\r\n                _fnDraw( settings );\r\n            },\r\n            node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\r\n            features = settings.aanFeatures;\r\n    \r\n        if ( ! modern ) {\r\n            plugin.fnInit( settings, node, redraw );\r\n        }\r\n    \r\n        /* Add a draw callback for the pagination on first instance, to update the paging display */\r\n        if ( ! features.p )\r\n        {\r\n            node.id = settings.sTableId+'_paginate';\r\n    \r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": function( settings ) {\r\n                    if ( modern ) {\r\n                        var\r\n                            start      = settings._iDisplayStart,\r\n                            len        = settings._iDisplayLength,\r\n                            visRecords = settings.fnRecordsDisplay(),\r\n                            all        = len === -1,\r\n                            page = all ? 0 : Math.ceil( start / len ),\r\n                            pages = all ? 1 : Math.ceil( visRecords / len ),\r\n                            buttons = plugin(page, pages),\r\n                            i, ien;\r\n    \r\n                        for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\r\n                            _fnRenderer( settings, 'pageButton' )(\r\n                                settings, features.p[i], i, buttons, page, pages\r\n                            );\r\n                        }\r\n                    }\r\n                    else {\r\n                        plugin.fnUpdate( settings, redraw );\r\n                    }\r\n                },\r\n                \"sName\": \"pagination\"\r\n            } );\r\n        }\r\n    \r\n        return node;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Alter the display settings to change the page\r\n     *  @param {object} settings DataTables settings object\r\n     *  @param {string|int} action Paging action to take: \"first\", \"previous\",\r\n     *    \"next\" or \"last\" or page number to jump to (integer)\r\n     *  @param [bool] redraw Automatically draw the update or not\r\n     *  @returns {bool} true page has changed, false - no change\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnPageChange ( settings, action, redraw )\r\n    {\r\n        var\r\n            start     = settings._iDisplayStart,\r\n            len       = settings._iDisplayLength,\r\n            records   = settings.fnRecordsDisplay();\r\n    \r\n        if ( records === 0 || len === -1 )\r\n        {\r\n            start = 0;\r\n        }\r\n        else if ( typeof action === \"number\" )\r\n        {\r\n            start = action * len;\r\n    \r\n            if ( start > records )\r\n            {\r\n                start = 0;\r\n            }\r\n        }\r\n        else if ( action == \"first\" )\r\n        {\r\n            start = 0;\r\n        }\r\n        else if ( action == \"previous\" )\r\n        {\r\n            start = len >= 0 ?\r\n                start - len :\r\n                0;\r\n    \r\n            if ( start < 0 )\r\n            {\r\n              start = 0;\r\n            }\r\n        }\r\n        else if ( action == \"next\" )\r\n        {\r\n            if ( start + len < records )\r\n            {\r\n                start += len;\r\n            }\r\n        }\r\n        else if ( action == \"last\" )\r\n        {\r\n            start = Math.floor( (records-1) / len) * len;\r\n        }\r\n        else\r\n        {\r\n            _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\r\n        }\r\n    \r\n        var changed = settings._iDisplayStart !== start;\r\n        settings._iDisplayStart = start;\r\n    \r\n        if ( changed ) {\r\n            _fnCallbackFire( settings, null, 'page', [settings] );\r\n    \r\n            if ( redraw ) {\r\n                _fnDraw( settings );\r\n            }\r\n        }\r\n    \r\n        return changed;\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Generate the node required for the processing node\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {node} Processing element\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlProcessing ( settings )\r\n    {\r\n        return $('<div/>', {\r\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\r\n                'class': settings.oClasses.sProcessing\r\n            } )\r\n            .html( settings.oLanguage.sProcessing )\r\n            .insertBefore( settings.nTable )[0];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Display or hide the processing indicator\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {bool} show Show the processing indicator (true) or not (false)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnProcessingDisplay ( settings, show )\r\n    {\r\n        if ( settings.oFeatures.bProcessing ) {\r\n            $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\r\n        }\r\n    \r\n        _fnCallbackFire( settings, null, 'processing', [settings, show] );\r\n    }\r\n    \r\n    /**\r\n     * Add any control elements for the table - specifically scrolling\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {node} Node to add to the DOM\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnFeatureHtmlTable ( settings )\r\n    {\r\n        var table = $(settings.nTable);\r\n    \r\n        // Add the ARIA grid role to the table\r\n        table.attr( 'role', 'grid' );\r\n    \r\n        // Scrolling from here on in\r\n        var scroll = settings.oScroll;\r\n    \r\n        if ( scroll.sX === '' && scroll.sY === '' ) {\r\n            return settings.nTable;\r\n        }\r\n    \r\n        var scrollX = scroll.sX;\r\n        var scrollY = scroll.sY;\r\n        var classes = settings.oClasses;\r\n        var caption = table.children('caption');\r\n        var captionSide = caption.length ? caption[0]._captionSide : null;\r\n        var headerClone = $( table[0].cloneNode(false) );\r\n        var footerClone = $( table[0].cloneNode(false) );\r\n        var footer = table.children('tfoot');\r\n        var _div = '<div/>';\r\n        var size = function ( s ) {\r\n            return !s ? null : _fnStringToCss( s );\r\n        };\r\n    \r\n        if ( ! footer.length ) {\r\n            footer = null;\r\n        }\r\n    \r\n        /*\r\n         * The HTML structure that we want to generate in this function is:\r\n         *  div - scroller\r\n         *    div - scroll head\r\n         *      div - scroll head inner\r\n         *        table - scroll head table\r\n         *          thead - thead\r\n         *    div - scroll body\r\n         *      table - table (master table)\r\n         *        thead - thead clone for sizing\r\n         *        tbody - tbody\r\n         *    div - scroll foot\r\n         *      div - scroll foot inner\r\n         *        table - scroll foot table\r\n         *          tfoot - tfoot\r\n         */\r\n        var scroller = $( _div, { 'class': classes.sScrollWrapper } )\r\n            .append(\r\n                $(_div, { 'class': classes.sScrollHead } )\r\n                    .css( {\r\n                        overflow: 'hidden',\r\n                        position: 'relative',\r\n                        border: 0,\r\n                        width: scrollX ? size(scrollX) : '100%'\r\n                    } )\r\n                    .append(\r\n                        $(_div, { 'class': classes.sScrollHeadInner } )\r\n                            .css( {\r\n                                'box-sizing': 'content-box',\r\n                                width: scroll.sXInner || '100%'\r\n                            } )\r\n                            .append(\r\n                                headerClone\r\n                                    .removeAttr('id')\r\n                                    .css( 'margin-left', 0 )\r\n                                    .append( captionSide === 'top' ? caption : null )\r\n                                    .append(\r\n                                        table.children('thead')\r\n                                    )\r\n                            )\r\n                    )\r\n            )\r\n            .append(\r\n                $(_div, { 'class': classes.sScrollBody } )\r\n                    .css( {\r\n                        position: 'relative',\r\n                        overflow: 'auto',\r\n                        width: size( scrollX )\r\n                    } )\r\n                    .append( table )\r\n            );\r\n    \r\n        if ( footer ) {\r\n            scroller.append(\r\n                $(_div, { 'class': classes.sScrollFoot } )\r\n                    .css( {\r\n                        overflow: 'hidden',\r\n                        border: 0,\r\n                        width: scrollX ? size(scrollX) : '100%'\r\n                    } )\r\n                    .append(\r\n                        $(_div, { 'class': classes.sScrollFootInner } )\r\n                            .append(\r\n                                footerClone\r\n                                    .removeAttr('id')\r\n                                    .css( 'margin-left', 0 )\r\n                                    .append( captionSide === 'bottom' ? caption : null )\r\n                                    .append(\r\n                                        table.children('tfoot')\r\n                                    )\r\n                            )\r\n                    )\r\n            );\r\n        }\r\n    \r\n        var children = scroller.children();\r\n        var scrollHead = children[0];\r\n        var scrollBody = children[1];\r\n        var scrollFoot = footer ? children[2] : null;\r\n    \r\n        // When the body is scrolled, then we also want to scroll the headers\r\n        if ( scrollX ) {\r\n            $(scrollBody).on( 'scroll.DT', function (e) {\r\n                var scrollLeft = this.scrollLeft;\r\n    \r\n                scrollHead.scrollLeft = scrollLeft;\r\n    \r\n                if ( footer ) {\r\n                    scrollFoot.scrollLeft = scrollLeft;\r\n                }\r\n            } );\r\n        }\r\n    \r\n        $(scrollBody).css(\r\n            scrollY && scroll.bCollapse ? 'max-height' : 'height', \r\n            scrollY\r\n        );\r\n    \r\n        settings.nScrollHead = scrollHead;\r\n        settings.nScrollBody = scrollBody;\r\n        settings.nScrollFoot = scrollFoot;\r\n    \r\n        // On redraw - align columns\r\n        settings.aoDrawCallback.push( {\r\n            \"fn\": _fnScrollDraw,\r\n            \"sName\": \"scrolling\"\r\n        } );\r\n    \r\n        return scroller[0];\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Update the header, footer and body tables for resizing - i.e. column\r\n     * alignment.\r\n     *\r\n     * Welcome to the most horrible function DataTables. The process that this\r\n     * function follows is basically:\r\n     *   1. Re-create the table inside the scrolling div\r\n     *   2. Take live measurements from the DOM\r\n     *   3. Apply the measurements to align the columns\r\n     *   4. Clean up\r\n     *\r\n     *  @param {object} settings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnScrollDraw ( settings )\r\n    {\r\n        // Given that this is such a monster function, a lot of variables are use\r\n        // to try and keep the minimised size as small as possible\r\n        var\r\n            scroll         = settings.oScroll,\r\n            scrollX        = scroll.sX,\r\n            scrollXInner   = scroll.sXInner,\r\n            scrollY        = scroll.sY,\r\n            barWidth       = scroll.iBarWidth,\r\n            divHeader      = $(settings.nScrollHead),\r\n            divHeaderStyle = divHeader[0].style,\r\n            divHeaderInner = divHeader.children('div'),\r\n            divHeaderInnerStyle = divHeaderInner[0].style,\r\n            divHeaderTable = divHeaderInner.children('table'),\r\n            divBodyEl      = settings.nScrollBody,\r\n            divBody        = $(divBodyEl),\r\n            divBodyStyle   = divBodyEl.style,\r\n            divFooter      = $(settings.nScrollFoot),\r\n            divFooterInner = divFooter.children('div'),\r\n            divFooterTable = divFooterInner.children('table'),\r\n            header         = $(settings.nTHead),\r\n            table          = $(settings.nTable),\r\n            tableEl        = table[0],\r\n            tableStyle     = tableEl.style,\r\n            footer         = settings.nTFoot ? $(settings.nTFoot) : null,\r\n            browser        = settings.oBrowser,\r\n            ie67           = browser.bScrollOversize,\r\n            dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\r\n            headerTrgEls, footerTrgEls,\r\n            headerSrcEls, footerSrcEls,\r\n            headerCopy, footerCopy,\r\n            headerWidths=[], footerWidths=[],\r\n            headerContent=[], footerContent=[],\r\n            idx, correction, sanityWidth,\r\n            zeroOut = function(nSizer) {\r\n                var style = nSizer.style;\r\n                style.paddingTop = \"0\";\r\n                style.paddingBottom = \"0\";\r\n                style.borderTopWidth = \"0\";\r\n                style.borderBottomWidth = \"0\";\r\n                style.height = 0;\r\n            };\r\n    \r\n        // If the scrollbar visibility has changed from the last draw, we need to\r\n        // adjust the column sizes as the table width will have changed to account\r\n        // for the scrollbar\r\n        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\r\n        \r\n        if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\r\n            settings.scrollBarVis = scrollBarVis;\r\n            _fnAdjustColumnSizing( settings );\r\n            return; // adjust column sizing will call this function again\r\n        }\r\n        else {\r\n            settings.scrollBarVis = scrollBarVis;\r\n        }\r\n    \r\n        /*\r\n         * 1. Re-create the table inside the scrolling div\r\n         */\r\n    \r\n        // Remove the old minimised thead and tfoot elements in the inner table\r\n        table.children('thead, tfoot').remove();\r\n    \r\n        if ( footer ) {\r\n            footerCopy = footer.clone().prependTo( table );\r\n            footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\r\n            footerSrcEls = footerCopy.find('tr');\r\n        }\r\n    \r\n        // Clone the current header and footer elements and then place it into the inner table\r\n        headerCopy = header.clone().prependTo( table );\r\n        headerTrgEls = header.find('tr'); // original header is in its own table\r\n        headerSrcEls = headerCopy.find('tr');\r\n        headerCopy.find('th, td').removeAttr('tabindex');\r\n    \r\n    \r\n        /*\r\n         * 2. Take live measurements from the DOM - do not alter the DOM itself!\r\n         */\r\n    \r\n        // Remove old sizing and apply the calculated column widths\r\n        // Get the unique column headers in the newly created (cloned) header. We want to apply the\r\n        // calculated sizes to this header\r\n        if ( ! scrollX )\r\n        {\r\n            divBodyStyle.width = '100%';\r\n            divHeader[0].style.width = '100%';\r\n        }\r\n    \r\n        $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\r\n            idx = _fnVisibleToColumnIndex( settings, i );\r\n            el.style.width = settings.aoColumns[idx].sWidth;\r\n        } );\r\n    \r\n        if ( footer ) {\r\n            _fnApplyToChildren( function(n) {\r\n                n.style.width = \"\";\r\n            }, footerSrcEls );\r\n        }\r\n    \r\n        // Size the table as a whole\r\n        sanityWidth = table.outerWidth();\r\n        if ( scrollX === \"\" ) {\r\n            // No x scrolling\r\n            tableStyle.width = \"100%\";\r\n    \r\n            // IE7 will make the width of the table when 100% include the scrollbar\r\n            // - which is shouldn't. When there is a scrollbar we need to take this\r\n            // into account.\r\n            if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\r\n                divBody.css('overflow-y') == \"scroll\")\r\n            ) {\r\n                tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\r\n            }\r\n    \r\n            // Recalculate the sanity width\r\n            sanityWidth = table.outerWidth();\r\n        }\r\n        else if ( scrollXInner !== \"\" ) {\r\n            // legacy x scroll inner has been given - use it\r\n            tableStyle.width = _fnStringToCss(scrollXInner);\r\n    \r\n            // Recalculate the sanity width\r\n            sanityWidth = table.outerWidth();\r\n        }\r\n    \r\n        // Hidden header should have zero height, so remove padding and borders. Then\r\n        // set the width based on the real headers\r\n    \r\n        // Apply all styles in one pass\r\n        _fnApplyToChildren( zeroOut, headerSrcEls );\r\n    \r\n        // Read all widths in next pass\r\n        _fnApplyToChildren( function(nSizer) {\r\n            headerContent.push( nSizer.innerHTML );\r\n            headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n        }, headerSrcEls );\r\n    \r\n        // Apply all widths in final pass\r\n        _fnApplyToChildren( function(nToSize, i) {\r\n            // Only apply widths to the DataTables detected header cells - this\r\n            // prevents complex headers from having contradictory sizes applied\r\n            if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\r\n                nToSize.style.width = headerWidths[i];\r\n            }\r\n        }, headerTrgEls );\r\n    \r\n        $(headerSrcEls).height(0);\r\n    \r\n        /* Same again with the footer if we have one */\r\n        if ( footer )\r\n        {\r\n            _fnApplyToChildren( zeroOut, footerSrcEls );\r\n    \r\n            _fnApplyToChildren( function(nSizer) {\r\n                footerContent.push( nSizer.innerHTML );\r\n                footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n            }, footerSrcEls );\r\n    \r\n            _fnApplyToChildren( function(nToSize, i) {\r\n                nToSize.style.width = footerWidths[i];\r\n            }, footerTrgEls );\r\n    \r\n            $(footerSrcEls).height(0);\r\n        }\r\n    \r\n    \r\n        /*\r\n         * 3. Apply the measurements\r\n         */\r\n    \r\n        // \"Hide\" the header and footer that we used for the sizing. We need to keep\r\n        // the content of the cell so that the width applied to the header and body\r\n        // both match, but we want to hide it completely. We want to also fix their\r\n        // width to what they currently are\r\n        _fnApplyToChildren( function(nSizer, i) {\r\n            nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\r\n            nSizer.style.width = headerWidths[i];\r\n        }, headerSrcEls );\r\n    \r\n        if ( footer )\r\n        {\r\n            _fnApplyToChildren( function(nSizer, i) {\r\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+footerContent[i]+'</div>';\r\n                nSizer.style.width = footerWidths[i];\r\n            }, footerSrcEls );\r\n        }\r\n    \r\n        // Sanity check that the table is of a sensible width. If not then we are going to get\r\n        // misalignment - try to prevent this by not allowing the table to shrink below its min width\r\n        if ( table.outerWidth() < sanityWidth )\r\n        {\r\n            // The min width depends upon if we have a vertical scrollbar visible or not */\r\n            correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\r\n                divBody.css('overflow-y') == \"scroll\")) ?\r\n                    sanityWidth+barWidth :\r\n                    sanityWidth;\r\n    \r\n            // IE6/7 are a law unto themselves...\r\n            if ( ie67 && (divBodyEl.scrollHeight >\r\n                divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\r\n            ) {\r\n                tableStyle.width = _fnStringToCss( correction-barWidth );\r\n            }\r\n    \r\n            // And give the user a warning that we've stopped the table getting too small\r\n            if ( scrollX === \"\" || scrollXInner !== \"\" ) {\r\n                _fnLog( settings, 1, 'Possible column misalignment', 6 );\r\n            }\r\n        }\r\n        else\r\n        {\r\n            correction = '100%';\r\n        }\r\n    \r\n        // Apply to the container elements\r\n        divBodyStyle.width = _fnStringToCss( correction );\r\n        divHeaderStyle.width = _fnStringToCss( correction );\r\n    \r\n        if ( footer ) {\r\n            settings.nScrollFoot.style.width = _fnStringToCss( correction );\r\n        }\r\n    \r\n    \r\n        /*\r\n         * 4. Clean up\r\n         */\r\n        if ( ! scrollY ) {\r\n            /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\r\n             * the scrollbar height from the visible display, rather than adding it on. We need to\r\n             * set the height in order to sort this. Don't want to do it in any other browsers.\r\n             */\r\n            if ( ie67 ) {\r\n                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\r\n            }\r\n        }\r\n    \r\n        /* Finally set the width's of the header and footer tables */\r\n        var iOuterWidth = table.outerWidth();\r\n        divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n        divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\r\n    \r\n        // Figure out if there are scrollbar present - if so then we need a the header and footer to\r\n        // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\r\n        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\r\n        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\r\n        divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n    \r\n        if ( footer ) {\r\n            divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n        }\r\n    \r\n        // Correct DOM ordering for colgroup - comes before the thead\r\n        table.children('colgroup').insertBefore( table.children('thead') );\r\n    \r\n        /* Adjust the position of the header in case we loose the y-scrollbar */\r\n        divBody.scroll();\r\n    \r\n        // If sorting or filtering has occurred, jump the scrolling back to the top\r\n        // only if we aren't holding the position\r\n        if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\r\n            divBodyEl.scrollTop = 0;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Apply a given function to the display child nodes of an element array (typically\r\n     * TD children of TR rows\r\n     *  @param {function} fn Method to apply to the objects\r\n     *  @param array {nodes} an1 List of elements to look through for display children\r\n     *  @param array {nodes} an2 Another list (identical structure to the first) - optional\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnApplyToChildren( fn, an1, an2 )\r\n    {\r\n        var index=0, i=0, iLen=an1.length;\r\n        var nNode1, nNode2;\r\n    \r\n        while ( i < iLen ) {\r\n            nNode1 = an1[i].firstChild;\r\n            nNode2 = an2 ? an2[i].firstChild : null;\r\n    \r\n            while ( nNode1 ) {\r\n                if ( nNode1.nodeType === 1 ) {\r\n                    if ( an2 ) {\r\n                        fn( nNode1, nNode2, index );\r\n                    }\r\n                    else {\r\n                        fn( nNode1, index );\r\n                    }\r\n    \r\n                    index++;\r\n                }\r\n    \r\n                nNode1 = nNode1.nextSibling;\r\n                nNode2 = an2 ? nNode2.nextSibling : null;\r\n            }\r\n    \r\n            i++;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    var __re_html_remove = /<.*?>/g;\r\n    \r\n    \r\n    /**\r\n     * Calculate the width of columns for the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCalculateColumnWidths ( oSettings )\r\n    {\r\n        var\r\n            table = oSettings.nTable,\r\n            columns = oSettings.aoColumns,\r\n            scroll = oSettings.oScroll,\r\n            scrollY = scroll.sY,\r\n            scrollX = scroll.sX,\r\n            scrollXInner = scroll.sXInner,\r\n            columnCount = columns.length,\r\n            visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\r\n            headerCells = $('th', oSettings.nTHead),\r\n            tableWidthAttr = table.getAttribute('width'), // from DOM element\r\n            tableContainer = table.parentNode,\r\n            userInputs = false,\r\n            i, column, columnIdx, width, outerWidth,\r\n            browser = oSettings.oBrowser,\r\n            ie67 = browser.bScrollOversize;\r\n    \r\n        var styleWidth = table.style.width;\r\n        if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\r\n            tableWidthAttr = styleWidth;\r\n        }\r\n    \r\n        /* Convert any user input sizes into pixel sizes */\r\n        for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n            column = columns[ visibleColumns[i] ];\r\n    \r\n            if ( column.sWidth !== null ) {\r\n                column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\r\n    \r\n                userInputs = true;\r\n            }\r\n        }\r\n    \r\n        /* If the number of columns in the DOM equals the number that we have to\r\n         * process in DataTables, then we can use the offsets that are created by\r\n         * the web- browser. No custom sizes can be set in order for this to happen,\r\n         * nor scrolling used\r\n         */\r\n        if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\r\n             columnCount == _fnVisbleColumns( oSettings ) &&\r\n             columnCount == headerCells.length\r\n        ) {\r\n            for ( i=0 ; i<columnCount ; i++ ) {\r\n                var colIdx = _fnVisibleToColumnIndex( oSettings, i );\r\n    \r\n                if ( colIdx !== null ) {\r\n                    columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // Otherwise construct a single row, worst case, table with the widest\r\n            // node in the data, assign any user defined widths, then insert it into\r\n            // the DOM and allow the browser to do all the hard work of calculating\r\n            // table widths\r\n            var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\r\n                .css( 'visibility', 'hidden' )\r\n                .removeAttr( 'id' );\r\n    \r\n            // Clean up the table body\r\n            tmpTable.find('tbody tr').remove();\r\n            var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\r\n    \r\n            // Clone the table header and footer - we can't use the header / footer\r\n            // from the cloned table, since if scrolling is active, the table's\r\n            // real header and footer are contained in different table tags\r\n            tmpTable.find('thead, tfoot').remove();\r\n            tmpTable\r\n                .append( $(oSettings.nTHead).clone() )\r\n                .append( $(oSettings.nTFoot).clone() );\r\n    \r\n            // Remove any assigned widths from the footer (from scrolling)\r\n            tmpTable.find('tfoot th, tfoot td').css('width', '');\r\n    \r\n            // Apply custom sizing to the cloned header\r\n            headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\r\n    \r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                column = columns[ visibleColumns[i] ];\r\n    \r\n                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\r\n                    _fnStringToCss( column.sWidthOrig ) :\r\n                    '';\r\n    \r\n                // For scrollX we need to force the column width otherwise the\r\n                // browser will collapse it. If this width is smaller than the\r\n                // width the column requires, then it will have no effect\r\n                if ( column.sWidthOrig && scrollX ) {\r\n                    $( headerCells[i] ).append( $('<div/>').css( {\r\n                        width: column.sWidthOrig,\r\n                        margin: 0,\r\n                        padding: 0,\r\n                        border: 0,\r\n                        height: 1\r\n                    } ) );\r\n                }\r\n            }\r\n    \r\n            // Find the widest cell for each column and put it into the table\r\n            if ( oSettings.aoData.length ) {\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    columnIdx = visibleColumns[i];\r\n                    column = columns[ columnIdx ];\r\n    \r\n                    $( _fnGetWidestNode( oSettings, columnIdx ) )\r\n                        .clone( false )\r\n                        .append( column.sContentPadding )\r\n                        .appendTo( tr );\r\n                }\r\n            }\r\n    \r\n            // Tidy the temporary table - remove name attributes so there aren't\r\n            // duplicated in the dom (radio elements for example)\r\n            $('[name]', tmpTable).removeAttr('name');\r\n    \r\n            // Table has been built, attach to the document so we can work with it.\r\n            // A holding element is used, positioned at the top of the container\r\n            // with minimal height, so it has no effect on if the container scrolls\r\n            // or not. Otherwise it might trigger scrolling when it actually isn't\r\n            // needed\r\n            var holder = $('<div/>').css( scrollX || scrollY ?\r\n                    {\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        height: 1,\r\n                        right: 0,\r\n                        overflow: 'hidden'\r\n                    } :\r\n                    {}\r\n                )\r\n                .append( tmpTable )\r\n                .appendTo( tableContainer );\r\n    \r\n            // When scrolling (X or Y) we want to set the width of the table as \r\n            // appropriate. However, when not scrolling leave the table width as it\r\n            // is. This results in slightly different, but I think correct behaviour\r\n            if ( scrollX && scrollXInner ) {\r\n                tmpTable.width( scrollXInner );\r\n            }\r\n            else if ( scrollX ) {\r\n                tmpTable.css( 'width', 'auto' );\r\n                tmpTable.removeAttr('width');\r\n    \r\n                // If there is no width attribute or style, then allow the table to\r\n                // collapse\r\n                if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\r\n                    tmpTable.width( tableContainer.clientWidth );\r\n                }\r\n            }\r\n            else if ( scrollY ) {\r\n                tmpTable.width( tableContainer.clientWidth );\r\n            }\r\n            else if ( tableWidthAttr ) {\r\n                tmpTable.width( tableWidthAttr );\r\n            }\r\n    \r\n            // Get the width of each column in the constructed table - we need to\r\n            // know the inner width (so it can be assigned to the other table's\r\n            // cells) and the outer width so we can calculate the full width of the\r\n            // table. This is safe since DataTables requires a unique cell for each\r\n            // column, but if ever a header can span multiple columns, this will\r\n            // need to be modified.\r\n            var total = 0;\r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                var cell = $(headerCells[i]);\r\n                var border = cell.outerWidth() - cell.width();\r\n    \r\n                // Use getBounding... where possible (not IE8-) because it can give\r\n                // sub-pixel accuracy, which we then want to round up!\r\n                var bounding = browser.bBounding ?\r\n                    Math.ceil( headerCells[i].getBoundingClientRect().width ) :\r\n                    cell.outerWidth();\r\n    \r\n                // Total is tracked to remove any sub-pixel errors as the outerWidth\r\n                // of the table might not equal the total given here (IE!).\r\n                total += bounding;\r\n    \r\n                // Width for each column to use\r\n                columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\r\n            }\r\n    \r\n            table.style.width = _fnStringToCss( total );\r\n    \r\n            // Finished with the table - ditch it\r\n            holder.remove();\r\n        }\r\n    \r\n        // If there is a width attr, we want to attach an event listener which\r\n        // allows the table sizing to automatically adjust when the window is\r\n        // resized. Use the width attr rather than CSS, since we can't know if the\r\n        // CSS is a relative value or absolute - DOM read is always px.\r\n        if ( tableWidthAttr ) {\r\n            table.style.width = _fnStringToCss( tableWidthAttr );\r\n        }\r\n    \r\n        if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\r\n            var bindResize = function () {\r\n                $(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\r\n                    _fnAdjustColumnSizing( oSettings );\r\n                } ) );\r\n            };\r\n    \r\n            // IE6/7 will crash if we bind a resize event handler on page load.\r\n            // To be removed in 1.11 which drops IE6/7 support\r\n            if ( ie67 ) {\r\n                setTimeout( bindResize, 1000 );\r\n            }\r\n            else {\r\n                bindResize();\r\n            }\r\n    \r\n            oSettings._reszEvt = true;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Throttle the calls to a function. Arguments and context are maintained for\r\n     * the throttled function\r\n     *  @param {function} fn Function to be called\r\n     *  @param {int} [freq=200] call frequency in mS\r\n     *  @returns {function} wrapped function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    var _fnThrottle = DataTable.util.throttle;\r\n    \r\n    \r\n    /**\r\n     * Convert a CSS unit width to pixels (e.g. 2em)\r\n     *  @param {string} width width to be converted\r\n     *  @param {node} parent parent to get the with for (required for relative widths) - optional\r\n     *  @returns {int} width in pixels\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnConvertToWidth ( width, parent )\r\n    {\r\n        if ( ! width ) {\r\n            return 0;\r\n        }\r\n    \r\n        var n = $('<div/>')\r\n            .css( 'width', _fnStringToCss( width ) )\r\n            .appendTo( parent || document.body );\r\n    \r\n        var val = n[0].offsetWidth;\r\n        n.remove();\r\n    \r\n        return val;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the widest node\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} colIdx column of interest\r\n     *  @returns {node} widest table node\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetWidestNode( settings, colIdx )\r\n    {\r\n        var idx = _fnGetMaxLenString( settings, colIdx );\r\n        if ( idx < 0 ) {\r\n            return null;\r\n        }\r\n    \r\n        var data = settings.aoData[ idx ];\r\n        return ! data.nTr ? // Might not have been created when deferred rendering\r\n            $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\r\n            data.anCells[ colIdx ];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the maximum strlen for each data column\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} colIdx column of interest\r\n     *  @returns {string} max string length for each column\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnGetMaxLenString( settings, colIdx )\r\n    {\r\n        var s, max=-1, maxIdx = -1;\r\n    \r\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n            s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\r\n            s = s.replace( __re_html_remove, '' );\r\n            s = s.replace( /&nbsp;/g, ' ' );\r\n    \r\n            if ( s.length > max ) {\r\n                max = s.length;\r\n                maxIdx = i;\r\n            }\r\n        }\r\n    \r\n        return maxIdx;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Append a CSS unit (only if required) to a string\r\n     *  @param {string} value to css-ify\r\n     *  @returns {string} value with css unit\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnStringToCss( s )\r\n    {\r\n        if ( s === null ) {\r\n            return '0px';\r\n        }\r\n    \r\n        if ( typeof s == 'number' ) {\r\n            return s < 0 ?\r\n                '0px' :\r\n                s+'px';\r\n        }\r\n    \r\n        // Check it has a unit character already\r\n        return s.match(/\\d$/) ?\r\n            s+'px' :\r\n            s;\r\n    }\r\n    \r\n    \r\n    \r\n    function _fnSortFlatten ( settings )\r\n    {\r\n        var\r\n            i, iLen, k, kLen,\r\n            aSort = [],\r\n            aiOrig = [],\r\n            aoColumns = settings.aoColumns,\r\n            aDataSort, iCol, sType, srcCol,\r\n            fixed = settings.aaSortingFixed,\r\n            fixedObj = $.isPlainObject( fixed ),\r\n            nestedSort = [],\r\n            add = function ( a ) {\r\n                if ( a.length && ! $.isArray( a[0] ) ) {\r\n                    // 1D array\r\n                    nestedSort.push( a );\r\n                }\r\n                else {\r\n                    // 2D array\r\n                    $.merge( nestedSort, a );\r\n                }\r\n            };\r\n    \r\n        // Build the sort array, with pre-fix and post-fix options if they have been\r\n        // specified\r\n        if ( $.isArray( fixed ) ) {\r\n            add( fixed );\r\n        }\r\n    \r\n        if ( fixedObj && fixed.pre ) {\r\n            add( fixed.pre );\r\n        }\r\n    \r\n        add( settings.aaSorting );\r\n    \r\n        if (fixedObj && fixed.post ) {\r\n            add( fixed.post );\r\n        }\r\n    \r\n        for ( i=0 ; i<nestedSort.length ; i++ )\r\n        {\r\n            srcCol = nestedSort[i][0];\r\n            aDataSort = aoColumns[ srcCol ].aDataSort;\r\n    \r\n            for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\r\n            {\r\n                iCol = aDataSort[k];\r\n                sType = aoColumns[ iCol ].sType || 'string';\r\n    \r\n                if ( nestedSort[i]._idx === undefined ) {\r\n                    nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\r\n                }\r\n    \r\n                aSort.push( {\r\n                    src:       srcCol,\r\n                    col:       iCol,\r\n                    dir:       nestedSort[i][1],\r\n                    index:     nestedSort[i]._idx,\r\n                    type:      sType,\r\n                    formatter: DataTable.ext.type.order[ sType+\"-pre\" ]\r\n                } );\r\n            }\r\n        }\r\n    \r\n        return aSort;\r\n    }\r\n    \r\n    /**\r\n     * Change the order of the table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     *  @todo This really needs split up!\r\n     */\r\n    function _fnSort ( oSettings )\r\n    {\r\n        var\r\n            i, ien, iLen, j, jLen, k, kLen,\r\n            sDataType, nTh,\r\n            aiOrig = [],\r\n            oExtSort = DataTable.ext.type.order,\r\n            aoData = oSettings.aoData,\r\n            aoColumns = oSettings.aoColumns,\r\n            aDataSort, data, iCol, sType, oSort,\r\n            formatters = 0,\r\n            sortCol,\r\n            displayMaster = oSettings.aiDisplayMaster,\r\n            aSort;\r\n    \r\n        // Resolve any column types that are unknown due to addition or invalidation\r\n        // @todo Can this be moved into a 'data-ready' handler which is called when\r\n        //   data is going to be used in the table?\r\n        _fnColumnTypes( oSettings );\r\n    \r\n        aSort = _fnSortFlatten( oSettings );\r\n    \r\n        for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\r\n            sortCol = aSort[i];\r\n    \r\n            // Track if we can use the fast sort algorithm\r\n            if ( sortCol.formatter ) {\r\n                formatters++;\r\n            }\r\n    \r\n            // Load the data needed for the sort, for each cell\r\n            _fnSortData( oSettings, sortCol.col );\r\n        }\r\n    \r\n        /* No sorting required if server-side or no sorting array */\r\n        if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\r\n        {\r\n            // Create a value - key array of the current row positions such that we can use their\r\n            // current position during the sort, if values match, in order to perform stable sorting\r\n            for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\r\n                aiOrig[ displayMaster[i] ] = i;\r\n            }\r\n    \r\n            /* Do the sort - here we want multi-column sorting based on a given data source (column)\r\n             * and sorting function (from oSort) in a certain direction. It's reasonably complex to\r\n             * follow on it's own, but this is what we want (example two column sorting):\r\n             *  fnLocalSorting = function(a,b){\r\n             *    var iTest;\r\n             *    iTest = oSort['string-asc']('data11', 'data12');\r\n             *      if (iTest !== 0)\r\n             *        return iTest;\r\n             *    iTest = oSort['numeric-desc']('data21', 'data22');\r\n             *    if (iTest !== 0)\r\n             *      return iTest;\r\n             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\r\n             *  }\r\n             * Basically we have a test for each sorting column, if the data in that column is equal,\r\n             * test the next column. If all columns match, then we use a numeric sort on the row\r\n             * positions in the original data array to provide a stable sort.\r\n             *\r\n             * Note - I know it seems excessive to have two sorting methods, but the first is around\r\n             * 15% faster, so the second is only maintained for backwards compatibility with sorting\r\n             * methods which do not have a pre-sort formatting function.\r\n             */\r\n            if ( formatters === aSort.length ) {\r\n                // All sort types have formatting functions\r\n                displayMaster.sort( function ( a, b ) {\r\n                    var\r\n                        x, y, k, test, sort,\r\n                        len=aSort.length,\r\n                        dataA = aoData[a]._aSortData,\r\n                        dataB = aoData[b]._aSortData;\r\n    \r\n                    for ( k=0 ; k<len ; k++ ) {\r\n                        sort = aSort[k];\r\n    \r\n                        x = dataA[ sort.col ];\r\n                        y = dataB[ sort.col ];\r\n    \r\n                        test = x<y ? -1 : x>y ? 1 : 0;\r\n                        if ( test !== 0 ) {\r\n                            return sort.dir === 'asc' ? test : -test;\r\n                        }\r\n                    }\r\n    \r\n                    x = aiOrig[a];\r\n                    y = aiOrig[b];\r\n                    return x<y ? -1 : x>y ? 1 : 0;\r\n                } );\r\n            }\r\n            else {\r\n                // Depreciated - remove in 1.11 (providing a plug-in option)\r\n                // Not all sort types have formatting methods, so we have to call their sorting\r\n                // methods.\r\n                displayMaster.sort( function ( a, b ) {\r\n                    var\r\n                        x, y, k, l, test, sort, fn,\r\n                        len=aSort.length,\r\n                        dataA = aoData[a]._aSortData,\r\n                        dataB = aoData[b]._aSortData;\r\n    \r\n                    for ( k=0 ; k<len ; k++ ) {\r\n                        sort = aSort[k];\r\n    \r\n                        x = dataA[ sort.col ];\r\n                        y = dataB[ sort.col ];\r\n    \r\n                        fn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\r\n                        test = fn( x, y );\r\n                        if ( test !== 0 ) {\r\n                            return test;\r\n                        }\r\n                    }\r\n    \r\n                    x = aiOrig[a];\r\n                    y = aiOrig[b];\r\n                    return x<y ? -1 : x>y ? 1 : 0;\r\n                } );\r\n            }\r\n        }\r\n    \r\n        /* Tell the draw function that we have sorted the data */\r\n        oSettings.bSorted = true;\r\n    }\r\n    \r\n    \r\n    function _fnSortAria ( settings )\r\n    {\r\n        var label;\r\n        var nextSort;\r\n        var columns = settings.aoColumns;\r\n        var aSort = _fnSortFlatten( settings );\r\n        var oAria = settings.oLanguage.oAria;\r\n    \r\n        // ARIA attributes - need to loop all columns, to update all (removing old\r\n        // attributes as needed)\r\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n        {\r\n            var col = columns[i];\r\n            var asSorting = col.asSorting;\r\n            var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\r\n            var th = col.nTh;\r\n    \r\n            // IE7 is throwing an error when setting these properties with jQuery's\r\n            // attr() and removeAttr() methods...\r\n            th.removeAttribute('aria-sort');\r\n    \r\n            /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\r\n            if ( col.bSortable ) {\r\n                if ( aSort.length > 0 && aSort[0].col == i ) {\r\n                    th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\r\n                    nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\r\n                }\r\n                else {\r\n                    nextSort = asSorting[0];\r\n                }\r\n    \r\n                label = sTitle + ( nextSort === \"asc\" ?\r\n                    oAria.sSortAscending :\r\n                    oAria.sSortDescending\r\n                );\r\n            }\r\n            else {\r\n                label = sTitle;\r\n            }\r\n    \r\n            th.setAttribute('aria-label', label);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Function to run on user sort request\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {node} attachTo node to attach the handler to\r\n     *  @param {int} colIdx column sorting index\r\n     *  @param {boolean} [append=false] Append the requested sort to the existing\r\n     *    sort if true (i.e. multi-column sort)\r\n     *  @param {function} [callback] callback function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSortListener ( settings, colIdx, append, callback )\r\n    {\r\n        var col = settings.aoColumns[ colIdx ];\r\n        var sorting = settings.aaSorting;\r\n        var asSorting = col.asSorting;\r\n        var nextSortIdx;\r\n        var next = function ( a, overflow ) {\r\n            var idx = a._idx;\r\n            if ( idx === undefined ) {\r\n                idx = $.inArray( a[1], asSorting );\r\n            }\r\n    \r\n            return idx+1 < asSorting.length ?\r\n                idx+1 :\r\n                overflow ?\r\n                    null :\r\n                    0;\r\n        };\r\n    \r\n        // Convert to 2D array if needed\r\n        if ( typeof sorting[0] === 'number' ) {\r\n            sorting = settings.aaSorting = [ sorting ];\r\n        }\r\n    \r\n        // If appending the sort then we are multi-column sorting\r\n        if ( append && settings.oFeatures.bSortMulti ) {\r\n            // Are we already doing some kind of sort on this column?\r\n            var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\r\n    \r\n            if ( sortIdx !== -1 ) {\r\n                // Yes, modify the sort\r\n                nextSortIdx = next( sorting[sortIdx], true );\r\n    \r\n                if ( nextSortIdx === null && sorting.length === 1 ) {\r\n                    nextSortIdx = 0; // can't remove sorting completely\r\n                }\r\n    \r\n                if ( nextSortIdx === null ) {\r\n                    sorting.splice( sortIdx, 1 );\r\n                }\r\n                else {\r\n                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];\r\n                    sorting[sortIdx]._idx = nextSortIdx;\r\n                }\r\n            }\r\n            else {\r\n                // No sort on this column yet\r\n                sorting.push( [ colIdx, asSorting[0], 0 ] );\r\n                sorting[sorting.length-1]._idx = 0;\r\n            }\r\n        }\r\n        else if ( sorting.length && sorting[0][0] == colIdx ) {\r\n            // Single column - already sorting on this column, modify the sort\r\n            nextSortIdx = next( sorting[0] );\r\n    \r\n            sorting.length = 1;\r\n            sorting[0][1] = asSorting[ nextSortIdx ];\r\n            sorting[0]._idx = nextSortIdx;\r\n        }\r\n        else {\r\n            // Single column - sort only on this column\r\n            sorting.length = 0;\r\n            sorting.push( [ colIdx, asSorting[0] ] );\r\n            sorting[0]._idx = 0;\r\n        }\r\n    \r\n        // Run the sort by calling a full redraw\r\n        _fnReDraw( settings );\r\n    \r\n        // callback used for async user interaction\r\n        if ( typeof callback == 'function' ) {\r\n            callback( settings );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Attach a sort handler (click) to a node\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {node} attachTo node to attach the handler to\r\n     *  @param {int} colIdx column sorting index\r\n     *  @param {function} [callback] callback function\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\r\n    {\r\n        var col = settings.aoColumns[ colIdx ];\r\n    \r\n        _fnBindAction( attachTo, {}, function (e) {\r\n            /* If the column is not sortable - don't to anything */\r\n            if ( col.bSortable === false ) {\r\n                return;\r\n            }\r\n    \r\n            // If processing is enabled use a timeout to allow the processing\r\n            // display to be shown - otherwise to it synchronously\r\n            if ( settings.oFeatures.bProcessing ) {\r\n                _fnProcessingDisplay( settings, true );\r\n    \r\n                setTimeout( function() {\r\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n    \r\n                    // In server-side processing, the draw callback will remove the\r\n                    // processing display\r\n                    if ( _fnDataSource( settings ) !== 'ssp' ) {\r\n                        _fnProcessingDisplay( settings, false );\r\n                    }\r\n                }, 0 );\r\n            }\r\n            else {\r\n                _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n            }\r\n        } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set the sorting classes on table's body, Note: it is safe to call this function\r\n     * when bSort and bSortClasses are false\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSortingClasses( settings )\r\n    {\r\n        var oldSort = settings.aLastSort;\r\n        var sortClass = settings.oClasses.sSortColumn;\r\n        var sort = _fnSortFlatten( settings );\r\n        var features = settings.oFeatures;\r\n        var i, ien, colIdx;\r\n    \r\n        if ( features.bSort && features.bSortClasses ) {\r\n            // Remove old sorting classes\r\n            for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\r\n                colIdx = oldSort[i].src;\r\n    \r\n                // Remove column sorting\r\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                    .removeClass( sortClass + (i<2 ? i+1 : 3) );\r\n            }\r\n    \r\n            // Add new column sorting\r\n            for ( i=0, ien=sort.length ; i<ien ; i++ ) {\r\n                colIdx = sort[i].src;\r\n    \r\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                    .addClass( sortClass + (i<2 ? i+1 : 3) );\r\n            }\r\n        }\r\n    \r\n        settings.aLastSort = sort;\r\n    }\r\n    \r\n    \r\n    // Get the data to sort a column, be it from cache, fresh (populating the\r\n    // cache), or from a sort formatter\r\n    function _fnSortData( settings, idx )\r\n    {\r\n        // Custom sorting function - provided by the sort data type\r\n        var column = settings.aoColumns[ idx ];\r\n        var customSort = DataTable.ext.order[ column.sSortDataType ];\r\n        var customData;\r\n    \r\n        if ( customSort ) {\r\n            customData = customSort.call( settings.oInstance, settings, idx,\r\n                _fnColumnIndexToVisible( settings, idx )\r\n            );\r\n        }\r\n    \r\n        // Use / populate cache\r\n        var row, cellData;\r\n        var formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\r\n    \r\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n            row = settings.aoData[i];\r\n    \r\n            if ( ! row._aSortData ) {\r\n                row._aSortData = [];\r\n            }\r\n    \r\n            if ( ! row._aSortData[idx] || customSort ) {\r\n                cellData = customSort ?\r\n                    customData[i] : // If there was a custom sort function, use data from there\r\n                    _fnGetCellData( settings, i, idx, 'sort' );\r\n    \r\n                row._aSortData[ idx ] = formatter ?\r\n                    formatter( cellData ) :\r\n                    cellData;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Save the state of a table\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSaveState ( settings )\r\n    {\r\n        if ( !settings.oFeatures.bStateSave || settings.bDestroying )\r\n        {\r\n            return;\r\n        }\r\n    \r\n        /* Store the interesting variables */\r\n        var state = {\r\n            time:    +new Date(),\r\n            start:   settings._iDisplayStart,\r\n            length:  settings._iDisplayLength,\r\n            order:   $.extend( true, [], settings.aaSorting ),\r\n            search:  _fnSearchToCamel( settings.oPreviousSearch ),\r\n            columns: $.map( settings.aoColumns, function ( col, i ) {\r\n                return {\r\n                    visible: col.bVisible,\r\n                    search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\r\n                };\r\n            } )\r\n        };\r\n    \r\n        _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\r\n    \r\n        settings.oSavedState = state;\r\n        settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Attempt to load a saved table state\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {object} oInit DataTables init object so we can override settings\r\n     *  @param {function} callback Callback to execute when the state has been loaded\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnLoadState ( settings, oInit, callback )\r\n    {\r\n        var i, ien;\r\n        var columns = settings.aoColumns;\r\n        var loaded = function ( s ) {\r\n            if ( ! s || ! s.time ) {\r\n                callback();\r\n                return;\r\n            }\r\n    \r\n            // Allow custom and plug-in manipulation functions to alter the saved data set and\r\n            // cancelling of loading by returning false\r\n            var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\r\n            if ( $.inArray( false, abStateLoad ) !== -1 ) {\r\n                callback();\r\n                return;\r\n            }\r\n    \r\n            // Reject old data\r\n            var duration = settings.iStateDuration;\r\n            if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\r\n                callback();\r\n                return;\r\n            }\r\n    \r\n            // Number of columns have changed - all bets are off, no restore of settings\r\n            if ( s.columns && columns.length !== s.columns.length ) {\r\n                callback();\r\n                return;\r\n            }\r\n    \r\n            // Store the saved state so it might be accessed at any time\r\n            settings.oLoadedState = $.extend( true, {}, s );\r\n    \r\n            // Restore key features - todo - for 1.11 this needs to be done by\r\n            // subscribed events\r\n            if ( s.start !== undefined ) {\r\n                settings._iDisplayStart    = s.start;\r\n                settings.iInitDisplayStart = s.start;\r\n            }\r\n            if ( s.length !== undefined ) {\r\n                settings._iDisplayLength   = s.length;\r\n            }\r\n    \r\n            // Order\r\n            if ( s.order !== undefined ) {\r\n                settings.aaSorting = [];\r\n                $.each( s.order, function ( i, col ) {\r\n                    settings.aaSorting.push( col[0] >= columns.length ?\r\n                        [ 0, col[1] ] :\r\n                        col\r\n                    );\r\n                } );\r\n            }\r\n    \r\n            // Search\r\n            if ( s.search !== undefined ) {\r\n                $.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\r\n            }\r\n    \r\n            // Columns\r\n            //\r\n            if ( s.columns ) {\r\n                for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\r\n                    var col = s.columns[i];\r\n    \r\n                    // Visibility\r\n                    if ( col.visible !== undefined ) {\r\n                        columns[i].bVisible = col.visible;\r\n                    }\r\n    \r\n                    // Search\r\n                    if ( col.search !== undefined ) {\r\n                        $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\r\n                    }\r\n                }\r\n            }\r\n    \r\n            _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\r\n            callback();\r\n        }\r\n    \r\n        if ( ! settings.oFeatures.bStateSave ) {\r\n            callback();\r\n            return;\r\n        }\r\n    \r\n        var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\r\n    \r\n        if ( state !== undefined ) {\r\n            loaded( state );\r\n        }\r\n        // otherwise, wait for the loaded callback to be executed\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Return the settings object for a particular table\r\n     *  @param {node} table table we are using as a dataTable\r\n     *  @returns {object} Settings object - or null if not found\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnSettingsFromNode ( table )\r\n    {\r\n        var settings = DataTable.settings;\r\n        var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\r\n    \r\n        return idx !== -1 ?\r\n            settings[ idx ] :\r\n            null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Log an error message\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {int} level log error messages, or display them to the user\r\n     *  @param {string} msg error message\r\n     *  @param {int} tn Technical note id to get more information about the error.\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnLog( settings, level, msg, tn )\r\n    {\r\n        msg = 'DataTables warning: '+\r\n            (settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\r\n    \r\n        if ( tn ) {\r\n            msg += '. For more information about this error, please see '+\r\n            'http://datatables.net/tn/'+tn;\r\n        }\r\n    \r\n        if ( ! level  ) {\r\n            // Backwards compatibility pre 1.10\r\n            var ext = DataTable.ext;\r\n            var type = ext.sErrMode || ext.errMode;\r\n    \r\n            if ( settings ) {\r\n                _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\r\n            }\r\n    \r\n            if ( type == 'alert' ) {\r\n                alert( msg );\r\n            }\r\n            else if ( type == 'throw' ) {\r\n                throw new Error(msg);\r\n            }\r\n            else if ( typeof type == 'function' ) {\r\n                type( settings, tn, msg );\r\n            }\r\n        }\r\n        else if ( window.console && console.log ) {\r\n            console.log( msg );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * See if a property is defined on one object, if so assign it to the other object\r\n     *  @param {object} ret target object\r\n     *  @param {object} src source object\r\n     *  @param {string} name property\r\n     *  @param {string} [mappedName] name to map too - optional, name used if not given\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnMap( ret, src, name, mappedName )\r\n    {\r\n        if ( $.isArray( name ) ) {\r\n            $.each( name, function (i, val) {\r\n                if ( $.isArray( val ) ) {\r\n                    _fnMap( ret, src, val[0], val[1] );\r\n                }\r\n                else {\r\n                    _fnMap( ret, src, val );\r\n                }\r\n            } );\r\n    \r\n            return;\r\n        }\r\n    \r\n        if ( mappedName === undefined ) {\r\n            mappedName = name;\r\n        }\r\n    \r\n        if ( src[name] !== undefined ) {\r\n            ret[mappedName] = src[name];\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Extend objects - very similar to jQuery.extend, but deep copy objects, and\r\n     * shallow copy arrays. The reason we need to do this, is that we don't want to\r\n     * deep copy array init values (such as aaSorting) since the dev wouldn't be\r\n     * able to override them, but we do want to deep copy arrays.\r\n     *  @param {object} out Object to extend\r\n     *  @param {object} extender Object from which the properties will be applied to\r\n     *      out\r\n     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\r\n     *      independent copy with the exception of the `data` or `aaData` parameters\r\n     *      if they are present. This is so you can pass in a collection to\r\n     *      DataTables and have that used as your data source without breaking the\r\n     *      references\r\n     *  @returns {object} out Reference, just for convenience - out === the return.\r\n     *  @memberof DataTable#oApi\r\n     *  @todo This doesn't take account of arrays inside the deep copied objects.\r\n     */\r\n    function _fnExtend( out, extender, breakRefs )\r\n    {\r\n        var val;\r\n    \r\n        for ( var prop in extender ) {\r\n            if ( extender.hasOwnProperty(prop) ) {\r\n                val = extender[prop];\r\n    \r\n                if ( $.isPlainObject( val ) ) {\r\n                    if ( ! $.isPlainObject( out[prop] ) ) {\r\n                        out[prop] = {};\r\n                    }\r\n                    $.extend( true, out[prop], val );\r\n                }\r\n                else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\r\n                    out[prop] = val.slice();\r\n                }\r\n                else {\r\n                    out[prop] = val;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return out;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Bind an event handers to allow a click or return key to activate the callback.\r\n     * This is good for accessibility since a return on the keyboard will have the\r\n     * same effect as a click, if the element has focus.\r\n     *  @param {element} n Element to bind the action to\r\n     *  @param {object} oData Data object to pass to the triggered function\r\n     *  @param {function} fn Callback function for when the event is triggered\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnBindAction( n, oData, fn )\r\n    {\r\n        $(n)\r\n            .on( 'click.DT', oData, function (e) {\r\n                    n.blur(); // Remove focus outline for mouse users\r\n                    fn(e);\r\n                } )\r\n            .on( 'keypress.DT', oData, function (e){\r\n                    if ( e.which === 13 ) {\r\n                        e.preventDefault();\r\n                        fn(e);\r\n                    }\r\n                } )\r\n            .on( 'selectstart.DT', function () {\r\n                    /* Take the brutal approach to cancelling text selection */\r\n                    return false;\r\n                } );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Register a callback function. Easily allows a callback function to be added to\r\n     * an array store of callback functions that can then all be called together.\r\n     *  @param {object} oSettings dataTables settings object\r\n     *  @param {string} sStore Name of the array storage for the callbacks in oSettings\r\n     *  @param {function} fn Function to be called back\r\n     *  @param {string} sName Identifying name for the callback (i.e. a label)\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCallbackReg( oSettings, sStore, fn, sName )\r\n    {\r\n        if ( fn )\r\n        {\r\n            oSettings[sStore].push( {\r\n                \"fn\": fn,\r\n                \"sName\": sName\r\n            } );\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Fire callback functions and trigger events. Note that the loop over the\r\n     * callback array store is done backwards! Further note that you do not want to\r\n     * fire off triggers in time sensitive applications (for example cell creation)\r\n     * as its slow.\r\n     *  @param {object} settings dataTables settings object\r\n     *  @param {string} callbackArr Name of the array storage for the callbacks in\r\n     *      oSettings\r\n     *  @param {string} eventName Name of the jQuery custom event to trigger. If\r\n     *      null no trigger is fired\r\n     *  @param {array} args Array of arguments to pass to the callback function /\r\n     *      trigger\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnCallbackFire( settings, callbackArr, eventName, args )\r\n    {\r\n        var ret = [];\r\n    \r\n        if ( callbackArr ) {\r\n            ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\r\n                return val.fn.apply( settings.oInstance, args );\r\n            } );\r\n        }\r\n    \r\n        if ( eventName !== null ) {\r\n            var e = $.Event( eventName+'.dt' );\r\n    \r\n            $(settings.nTable).trigger( e, args );\r\n    \r\n            ret.push( e.result );\r\n        }\r\n    \r\n        return ret;\r\n    }\r\n    \r\n    \r\n    function _fnLengthOverflow ( settings )\r\n    {\r\n        var\r\n            start = settings._iDisplayStart,\r\n            end = settings.fnDisplayEnd(),\r\n            len = settings._iDisplayLength;\r\n    \r\n        /* If we have space to show extra rows (backing up from the end point - then do so */\r\n        if ( start >= end )\r\n        {\r\n            start = end - len;\r\n        }\r\n    \r\n        // Keep the start record on the current page\r\n        start -= (start % len);\r\n    \r\n        if ( len === -1 || start < 0 )\r\n        {\r\n            start = 0;\r\n        }\r\n    \r\n        settings._iDisplayStart = start;\r\n    }\r\n    \r\n    \r\n    function _fnRenderer( settings, type )\r\n    {\r\n        var renderer = settings.renderer;\r\n        var host = DataTable.ext.renderer[type];\r\n    \r\n        if ( $.isPlainObject( renderer ) && renderer[type] ) {\r\n            // Specific renderer for this type. If available use it, otherwise use\r\n            // the default.\r\n            return host[renderer[type]] || host._;\r\n        }\r\n        else if ( typeof renderer === 'string' ) {\r\n            // Common renderer - if there is one available for this type use it,\r\n            // otherwise use the default\r\n            return host[renderer] || host._;\r\n        }\r\n    \r\n        // Use the default\r\n        return host._;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Detect the data source being used for the table. Used to simplify the code\r\n     * a little (ajax) and to make it compress a little smaller.\r\n     *\r\n     *  @param {object} settings dataTables settings object\r\n     *  @returns {string} Data source\r\n     *  @memberof DataTable#oApi\r\n     */\r\n    function _fnDataSource ( settings )\r\n    {\r\n        if ( settings.oFeatures.bServerSide ) {\r\n            return 'ssp';\r\n        }\r\n        else if ( settings.ajax || settings.sAjaxSource ) {\r\n            return 'ajax';\r\n        }\r\n        return 'dom';\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    /**\r\n     * Computed structure of the DataTables API, defined by the options passed to\r\n     * `DataTable.Api.register()` when building the API.\r\n     *\r\n     * The structure is built in order to speed creation and extension of the Api\r\n     * objects since the extensions are effectively pre-parsed.\r\n     *\r\n     * The array is an array of objects with the following structure, where this\r\n     * base array represents the Api prototype base:\r\n     *\r\n     *     [\r\n     *       {\r\n     *         name:      'data'                -- string   - Property name\r\n     *         val:       function () {},       -- function - Api method (or undefined if just an object\r\n     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n     *       },\r\n     *       {\r\n     *         name:     'row'\r\n     *         val:       {},\r\n     *         methodExt: [ ... ],\r\n     *         propExt:   [\r\n     *           {\r\n     *             name:      'data'\r\n     *             val:       function () {},\r\n     *             methodExt: [ ... ],\r\n     *             propExt:   [ ... ]\r\n     *           },\r\n     *           ...\r\n     *         ]\r\n     *       }\r\n     *     ]\r\n     *\r\n     * @type {Array}\r\n     * @ignore\r\n     */\r\n    var __apiStruct = [];\r\n    \r\n    \r\n    /**\r\n     * `Array.prototype` reference.\r\n     *\r\n     * @type object\r\n     * @ignore\r\n     */\r\n    var __arrayProto = Array.prototype;\r\n    \r\n    \r\n    /**\r\n     * Abstraction for `context` parameter of the `Api` constructor to allow it to\r\n     * take several different forms for ease of use.\r\n     *\r\n     * Each of the input parameter types will be converted to a DataTables settings\r\n     * object where possible.\r\n     *\r\n     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\r\n     *   of:\r\n     *\r\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n     *     with be found and used.\r\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n     *   * `object` - DataTables settings object\r\n     *   * `DataTables.Api` - API instance\r\n     * @return {array|null} Matching DataTables settings objects. `null` or\r\n     *   `undefined` is returned if no matching DataTable is found.\r\n     * @ignore\r\n     */\r\n    var _toSettings = function ( mixed )\r\n    {\r\n        var idx, jq;\r\n        var settings = DataTable.settings;\r\n        var tables = $.map( settings, function (el, i) {\r\n            return el.nTable;\r\n        } );\r\n    \r\n        if ( ! mixed ) {\r\n            return [];\r\n        }\r\n        else if ( mixed.nTable && mixed.oApi ) {\r\n            // DataTables settings object\r\n            return [ mixed ];\r\n        }\r\n        else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\r\n            // Table node\r\n            idx = $.inArray( mixed, tables );\r\n            return idx !== -1 ? [ settings[idx] ] : null;\r\n        }\r\n        else if ( mixed && typeof mixed.settings === 'function' ) {\r\n            return mixed.settings().toArray();\r\n        }\r\n        else if ( typeof mixed === 'string' ) {\r\n            // jQuery selector\r\n            jq = $(mixed);\r\n        }\r\n        else if ( mixed instanceof $ ) {\r\n            // jQuery object (also DataTables instance)\r\n            jq = mixed;\r\n        }\r\n    \r\n        if ( jq ) {\r\n            return jq.map( function(i) {\r\n                idx = $.inArray( this, tables );\r\n                return idx !== -1 ? settings[idx] : null;\r\n            } ).toArray();\r\n        }\r\n    };\r\n    \r\n    \r\n    /**\r\n     * DataTables API class - used to control and interface with  one or more\r\n     * DataTables enhanced tables.\r\n     *\r\n     * The API class is heavily based on jQuery, presenting a chainable interface\r\n     * that you can use to interact with tables. Each instance of the API class has\r\n     * a \"context\" - i.e. the tables that it will operate on. This could be a single\r\n     * table, all tables on a page or a sub-set thereof.\r\n     *\r\n     * Additionally the API is designed to allow you to easily work with the data in\r\n     * the tables, retrieving and manipulating it as required. This is done by\r\n     * presenting the API class as an array like interface. The contents of the\r\n     * array depend upon the actions requested by each method (for example\r\n     * `rows().nodes()` will return an array of nodes, while `rows().data()` will\r\n     * return an array of objects or arrays depending upon your table's\r\n     * configuration). The API object has a number of array like methods (`push`,\r\n     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\r\n     * `unique` etc) to assist your working with the data held in a table.\r\n     *\r\n     * Most methods (those which return an Api instance) are chainable, which means\r\n     * the return from a method call also has all of the methods available that the\r\n     * top level object had. For example, these two calls are equivalent:\r\n     *\r\n     *     // Not chained\r\n     *     api.row.add( {...} );\r\n     *     api.draw();\r\n     *\r\n     *     // Chained\r\n     *     api.row.add( {...} ).draw();\r\n     *\r\n     * @class DataTable.Api\r\n     * @param {array|object|string|jQuery} context DataTable identifier. This is\r\n     *   used to define which DataTables enhanced tables this API will operate on.\r\n     *   Can be one of:\r\n     *\r\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n     *     with be found and used.\r\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n     *   * `object` - DataTables settings object\r\n     * @param {array} [data] Data to initialise the Api instance with.\r\n     *\r\n     * @example\r\n     *   // Direct initialisation during DataTables construction\r\n     *   var api = $('#example').DataTable();\r\n     *\r\n     * @example\r\n     *   // Initialisation using a DataTables jQuery object\r\n     *   var api = $('#example').dataTable().api();\r\n     *\r\n     * @example\r\n     *   // Initialisation as a constructor\r\n     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\r\n     */\r\n    _Api = function ( context, data )\r\n    {\r\n        if ( ! (this instanceof _Api) ) {\r\n            return new _Api( context, data );\r\n        }\r\n    \r\n        var settings = [];\r\n        var ctxSettings = function ( o ) {\r\n            var a = _toSettings( o );\r\n            if ( a ) {\r\n                settings = settings.concat( a );\r\n            }\r\n        };\r\n    \r\n        if ( $.isArray( context ) ) {\r\n            for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n                ctxSettings( context[i] );\r\n            }\r\n        }\r\n        else {\r\n            ctxSettings( context );\r\n        }\r\n    \r\n        // Remove duplicates\r\n        this.context = _unique( settings );\r\n    \r\n        // Initial data\r\n        if ( data ) {\r\n            $.merge( this, data );\r\n        }\r\n    \r\n        // selector\r\n        this.selector = {\r\n            rows: null,\r\n            cols: null,\r\n            opts: null\r\n        };\r\n    \r\n        _Api.extend( this, this, __apiStruct );\r\n    };\r\n    \r\n    DataTable.Api = _Api;\r\n    \r\n    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\r\n    // isPlainObject.\r\n    $.extend( _Api.prototype, {\r\n        any: function ()\r\n        {\r\n            return this.count() !== 0;\r\n        },\r\n    \r\n    \r\n        concat:  __arrayProto.concat,\r\n    \r\n    \r\n        context: [], // array of table settings objects\r\n    \r\n    \r\n        count: function ()\r\n        {\r\n            return this.flatten().length;\r\n        },\r\n    \r\n    \r\n        each: function ( fn )\r\n        {\r\n            for ( var i=0, ien=this.length ; i<ien; i++ ) {\r\n                fn.call( this, this[i], i, this );\r\n            }\r\n    \r\n            return this;\r\n        },\r\n    \r\n    \r\n        eq: function ( idx )\r\n        {\r\n            var ctx = this.context;\r\n    \r\n            return ctx.length > idx ?\r\n                new _Api( ctx[idx], this[idx] ) :\r\n                null;\r\n        },\r\n    \r\n    \r\n        filter: function ( fn )\r\n        {\r\n            var a = [];\r\n    \r\n            if ( __arrayProto.filter ) {\r\n                a = __arrayProto.filter.call( this, fn, this );\r\n            }\r\n            else {\r\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                    if ( fn.call( this, this[i], i, this ) ) {\r\n                        a.push( this[i] );\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return new _Api( this.context, a );\r\n        },\r\n    \r\n    \r\n        flatten: function ()\r\n        {\r\n            var a = [];\r\n            return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\r\n        },\r\n    \r\n    \r\n        join:    __arrayProto.join,\r\n    \r\n    \r\n        indexOf: __arrayProto.indexOf || function (obj, start)\r\n        {\r\n            for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\r\n                if ( this[i] === obj ) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        },\r\n    \r\n        iterator: function ( flatten, type, fn, alwaysNew ) {\r\n            var\r\n                a = [], ret,\r\n                i, ien, j, jen,\r\n                context = this.context,\r\n                rows, items, item,\r\n                selector = this.selector;\r\n    \r\n            // Argument shifting\r\n            if ( typeof flatten === 'string' ) {\r\n                alwaysNew = fn;\r\n                fn = type;\r\n                type = flatten;\r\n                flatten = false;\r\n            }\r\n    \r\n            for ( i=0, ien=context.length ; i<ien ; i++ ) {\r\n                var apiInst = new _Api( context[i] );\r\n    \r\n                if ( type === 'table' ) {\r\n                    ret = fn.call( apiInst, context[i], i );\r\n    \r\n                    if ( ret !== undefined ) {\r\n                        a.push( ret );\r\n                    }\r\n                }\r\n                else if ( type === 'columns' || type === 'rows' ) {\r\n                    // this has same length as context - one entry for each table\r\n                    ret = fn.call( apiInst, context[i], this[i], i );\r\n    \r\n                    if ( ret !== undefined ) {\r\n                        a.push( ret );\r\n                    }\r\n                }\r\n                else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\r\n                    // columns and rows share the same structure.\r\n                    // 'this' is an array of column indexes for each context\r\n                    items = this[i];\r\n    \r\n                    if ( type === 'column-rows' ) {\r\n                        rows = _selector_row_indexes( context[i], selector.opts );\r\n                    }\r\n    \r\n                    for ( j=0, jen=items.length ; j<jen ; j++ ) {\r\n                        item = items[j];\r\n    \r\n                        if ( type === 'cell' ) {\r\n                            ret = fn.call( apiInst, context[i], item.row, item.column, i, j );\r\n                        }\r\n                        else {\r\n                            ret = fn.call( apiInst, context[i], item, i, j, rows );\r\n                        }\r\n    \r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if ( a.length || alwaysNew ) {\r\n                var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\r\n                var apiSelector = api.selector;\r\n                apiSelector.rows = selector.rows;\r\n                apiSelector.cols = selector.cols;\r\n                apiSelector.opts = selector.opts;\r\n                return api;\r\n            }\r\n            return this;\r\n        },\r\n    \r\n    \r\n        lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\r\n        {\r\n            // Bit cheeky...\r\n            return this.indexOf.apply( this.toArray.reverse(), arguments );\r\n        },\r\n    \r\n    \r\n        length:  0,\r\n    \r\n    \r\n        map: function ( fn )\r\n        {\r\n            var a = [];\r\n    \r\n            if ( __arrayProto.map ) {\r\n                a = __arrayProto.map.call( this, fn, this );\r\n            }\r\n            else {\r\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                    a.push( fn.call( this, this[i], i ) );\r\n                }\r\n            }\r\n    \r\n            return new _Api( this.context, a );\r\n        },\r\n    \r\n    \r\n        pluck: function ( prop )\r\n        {\r\n            return this.map( function ( el ) {\r\n                return el[ prop ];\r\n            } );\r\n        },\r\n    \r\n        pop:     __arrayProto.pop,\r\n    \r\n    \r\n        push:    __arrayProto.push,\r\n    \r\n    \r\n        // Does not return an API instance\r\n        reduce: __arrayProto.reduce || function ( fn, init )\r\n        {\r\n            return _fnReduce( this, fn, init, 0, this.length, 1 );\r\n        },\r\n    \r\n    \r\n        reduceRight: __arrayProto.reduceRight || function ( fn, init )\r\n        {\r\n            return _fnReduce( this, fn, init, this.length-1, -1, -1 );\r\n        },\r\n    \r\n    \r\n        reverse: __arrayProto.reverse,\r\n    \r\n    \r\n        // Object with rows, columns and opts\r\n        selector: null,\r\n    \r\n    \r\n        shift:   __arrayProto.shift,\r\n    \r\n    \r\n        slice: function () {\r\n            return new _Api( this.context, this );\r\n        },\r\n    \r\n    \r\n        sort:    __arrayProto.sort, // ? name - order?\r\n    \r\n    \r\n        splice:  __arrayProto.splice,\r\n    \r\n    \r\n        toArray: function ()\r\n        {\r\n            return __arrayProto.slice.call( this );\r\n        },\r\n    \r\n    \r\n        to$: function ()\r\n        {\r\n            return $( this );\r\n        },\r\n    \r\n    \r\n        toJQuery: function ()\r\n        {\r\n            return $( this );\r\n        },\r\n    \r\n    \r\n        unique: function ()\r\n        {\r\n            return new _Api( this.context, _unique(this) );\r\n        },\r\n    \r\n    \r\n        unshift: __arrayProto.unshift\r\n    } );\r\n    \r\n    \r\n    _Api.extend = function ( scope, obj, ext )\r\n    {\r\n        // Only extend API instances and static properties of the API\r\n        if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\r\n            return;\r\n        }\r\n    \r\n        var\r\n            i, ien,\r\n            j, jen,\r\n            struct, inner,\r\n            methodScoping = function ( scope, fn, struc ) {\r\n                return function () {\r\n                    var ret = fn.apply( scope, arguments );\r\n    \r\n                    // Method extension\r\n                    _Api.extend( ret, ret, struc.methodExt );\r\n                    return ret;\r\n                };\r\n            };\r\n    \r\n        for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n            struct = ext[i];\r\n    \r\n            // Value\r\n            obj[ struct.name ] = typeof struct.val === 'function' ?\r\n                methodScoping( scope, struct.val, struct ) :\r\n                $.isPlainObject( struct.val ) ?\r\n                    {} :\r\n                    struct.val;\r\n    \r\n            obj[ struct.name ].__dt_wrapper = true;\r\n    \r\n            // Property extension\r\n            _Api.extend( scope, obj[ struct.name ], struct.propExt );\r\n        }\r\n    };\r\n    \r\n    \r\n    // @todo - Is there need for an augment function?\r\n    // _Api.augment = function ( inst, name )\r\n    // {\r\n    //  // Find src object in the structure from the name\r\n    //  var parts = name.split('.');\r\n    \r\n    //  _Api.extend( inst, obj );\r\n    // };\r\n    \r\n    \r\n    //     [\r\n    //       {\r\n    //         name:      'data'                -- string   - Property name\r\n    //         val:       function () {},       -- function - Api method (or undefined if just an object\r\n    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n    //       },\r\n    //       {\r\n    //         name:     'row'\r\n    //         val:       {},\r\n    //         methodExt: [ ... ],\r\n    //         propExt:   [\r\n    //           {\r\n    //             name:      'data'\r\n    //             val:       function () {},\r\n    //             methodExt: [ ... ],\r\n    //             propExt:   [ ... ]\r\n    //           },\r\n    //           ...\r\n    //         ]\r\n    //       }\r\n    //     ]\r\n    \r\n    _Api.register = _api_register = function ( name, val )\r\n    {\r\n        if ( $.isArray( name ) ) {\r\n            for ( var j=0, jen=name.length ; j<jen ; j++ ) {\r\n                _Api.register( name[j], val );\r\n            }\r\n            return;\r\n        }\r\n    \r\n        var\r\n            i, ien,\r\n            heir = name.split('.'),\r\n            struct = __apiStruct,\r\n            key, method;\r\n    \r\n        var find = function ( src, name ) {\r\n            for ( var i=0, ien=src.length ; i<ien ; i++ ) {\r\n                if ( src[i].name === name ) {\r\n                    return src[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n    \r\n        for ( i=0, ien=heir.length ; i<ien ; i++ ) {\r\n            method = heir[i].indexOf('()') !== -1;\r\n            key = method ?\r\n                heir[i].replace('()', '') :\r\n                heir[i];\r\n    \r\n            var src = find( struct, key );\r\n            if ( ! src ) {\r\n                src = {\r\n                    name:      key,\r\n                    val:       {},\r\n                    methodExt: [],\r\n                    propExt:   []\r\n                };\r\n                struct.push( src );\r\n            }\r\n    \r\n            if ( i === ien-1 ) {\r\n                src.val = val;\r\n            }\r\n            else {\r\n                struct = method ?\r\n                    src.methodExt :\r\n                    src.propExt;\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\r\n        _Api.register( pluralName, val );\r\n    \r\n        _Api.register( singularName, function () {\r\n            var ret = val.apply( this, arguments );\r\n    \r\n            if ( ret === this ) {\r\n                // Returned item is the API instance that was passed in, return it\r\n                return this;\r\n            }\r\n            else if ( ret instanceof _Api ) {\r\n                // New API instance returned, want the value from the first item\r\n                // in the returned array for the singular result.\r\n                return ret.length ?\r\n                    $.isArray( ret[0] ) ?\r\n                        new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\r\n                        ret[0] :\r\n                    undefined;\r\n            }\r\n    \r\n            // Non-API return - just fire it back\r\n            return ret;\r\n        } );\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Selector for HTML tables. Apply the given selector to the give array of\r\n     * DataTables settings objects.\r\n     *\r\n     * @param {string|integer} [selector] jQuery selector string or integer\r\n     * @param  {array} Array of DataTables settings objects to be filtered\r\n     * @return {array}\r\n     * @ignore\r\n     */\r\n    var __table_selector = function ( selector, a )\r\n    {\r\n        // Integer is used to pick out a table by index\r\n        if ( typeof selector === 'number' ) {\r\n            return [ a[ selector ] ];\r\n        }\r\n    \r\n        // Perform a jQuery selector on the table nodes\r\n        var nodes = $.map( a, function (el, i) {\r\n            return el.nTable;\r\n        } );\r\n    \r\n        return $(nodes)\r\n            .filter( selector )\r\n            .map( function (i) {\r\n                // Need to translate back from the table node to the settings\r\n                var idx = $.inArray( this, nodes );\r\n                return a[ idx ];\r\n            } )\r\n            .toArray();\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Context selector for the API's context (i.e. the tables the API instance\r\n     * refers to.\r\n     *\r\n     * @name    DataTable.Api#tables\r\n     * @param {string|integer} [selector] Selector to pick which tables the iterator\r\n     *   should operate on. If not given, all tables in the current context are\r\n     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\r\n     *   select multiple tables or as an integer to select a single table.\r\n     * @returns {DataTable.Api} Returns a new API instance if a selector is given.\r\n     */\r\n    _api_register( 'tables()', function ( selector ) {\r\n        // A new instance is created if there was a selector specified\r\n        return selector ?\r\n            new _Api( __table_selector( selector, this.context ) ) :\r\n            this;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'table()', function ( selector ) {\r\n        var tables = this.tables( selector );\r\n        var ctx = tables.context;\r\n    \r\n        // Truncate to the first matched table\r\n        return ctx.length ?\r\n            new _Api( ctx[0] ) :\r\n            tables;\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTable;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().body()', 'table().body()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTBody;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().header()', 'table().header()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTHead;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTFoot;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            return ctx.nTableWrapper;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Redraw the tables in the current context.\r\n     */\r\n    _api_register( 'draw()', function ( paging ) {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            if ( paging === 'page' ) {\r\n                _fnDraw( settings );\r\n            }\r\n            else {\r\n                if ( typeof paging === 'string' ) {\r\n                    paging = paging === 'full-hold' ?\r\n                        false :\r\n                        true;\r\n                }\r\n    \r\n                _fnReDraw( settings, paging===false );\r\n            }\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Get the current page index.\r\n     *\r\n     * @return {integer} Current page index (zero based)\r\n     *//**\r\n     * Set the current page.\r\n     *\r\n     * Note that if you attempt to show a page which does not exist, DataTables will\r\n     * not throw an error, but rather reset the paging.\r\n     *\r\n     * @param {integer|string} action The paging action to take. This can be one of:\r\n     *  * `integer` - The page index to jump to\r\n     *  * `string` - An action to take:\r\n     *    * `first` - Jump to first page.\r\n     *    * `next` - Jump to the next page\r\n     *    * `previous` - Jump to previous page\r\n     *    * `last` - Jump to the last page.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'page()', function ( action ) {\r\n        if ( action === undefined ) {\r\n            return this.page.info().page; // not an expensive call\r\n        }\r\n    \r\n        // else, have an action to take on all tables\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnPageChange( settings, action );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Paging information for the first table in the current context.\r\n     *\r\n     * If you require paging information for another table, use the `table()` method\r\n     * with a suitable selector.\r\n     *\r\n     * @return {object} Object with the following properties set:\r\n     *  * `page` - Current page index (zero based - i.e. the first page is `0`)\r\n     *  * `pages` - Total number of pages\r\n     *  * `start` - Display index for the first record shown on the current page\r\n     *  * `end` - Display index for the last record shown on the current page\r\n     *  * `length` - Display length (number of records). Note that generally `start\r\n     *    + length = end`, but this is not always true, for example if there are\r\n     *    only 2 records to show on the final page, with a length of 10.\r\n     *  * `recordsTotal` - Full data set length\r\n     *  * `recordsDisplay` - Data set length once the current filtering criterion\r\n     *    are applied.\r\n     */\r\n    _api_register( 'page.info()', function ( action ) {\r\n        if ( this.context.length === 0 ) {\r\n            return undefined;\r\n        }\r\n    \r\n        var\r\n            settings   = this.context[0],\r\n            start      = settings._iDisplayStart,\r\n            len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\r\n            visRecords = settings.fnRecordsDisplay(),\r\n            all        = len === -1;\r\n    \r\n        return {\r\n            \"page\":           all ? 0 : Math.floor( start / len ),\r\n            \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\r\n            \"start\":          start,\r\n            \"end\":            settings.fnDisplayEnd(),\r\n            \"length\":         len,\r\n            \"recordsTotal\":   settings.fnRecordsTotal(),\r\n            \"recordsDisplay\": visRecords,\r\n            \"serverSide\":     _fnDataSource( settings ) === 'ssp'\r\n        };\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Get the current page length.\r\n     *\r\n     * @return {integer} Current page length. Note `-1` indicates that all records\r\n     *   are to be shown.\r\n     *//**\r\n     * Set the current page length.\r\n     *\r\n     * @param {integer} Page length to set. Use `-1` to show all records.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'page.len()', function ( len ) {\r\n        // Note that we can't call this function 'length()' because `length`\r\n        // is a Javascript property of functions which defines how many arguments\r\n        // the function expects.\r\n        if ( len === undefined ) {\r\n            return this.context.length !== 0 ?\r\n                this.context[0]._iDisplayLength :\r\n                undefined;\r\n        }\r\n    \r\n        // else, set the page length\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnLengthChange( settings, len );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    var __reload = function ( settings, holdPosition, callback ) {\r\n        // Use the draw event to trigger a callback\r\n        if ( callback ) {\r\n            var api = new _Api( settings );\r\n    \r\n            api.one( 'draw', function () {\r\n                callback( api.ajax.json() );\r\n            } );\r\n        }\r\n    \r\n        if ( _fnDataSource( settings ) == 'ssp' ) {\r\n            _fnReDraw( settings, holdPosition );\r\n        }\r\n        else {\r\n            _fnProcessingDisplay( settings, true );\r\n    \r\n            // Cancel an existing request\r\n            var xhr = settings.jqXHR;\r\n            if ( xhr && xhr.readyState !== 4 ) {\r\n                xhr.abort();\r\n            }\r\n    \r\n            // Trigger xhr\r\n            _fnBuildAjax( settings, [], function( json ) {\r\n                _fnClearTable( settings );\r\n    \r\n                var data = _fnAjaxDataSrc( settings, json );\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    _fnAddData( settings, data[i] );\r\n                }\r\n    \r\n                _fnReDraw( settings, holdPosition );\r\n                _fnProcessingDisplay( settings, false );\r\n            } );\r\n        }\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Get the JSON response from the last Ajax request that DataTables made to the\r\n     * server. Note that this returns the JSON from the first table in the current\r\n     * context.\r\n     *\r\n     * @return {object} JSON received from the server.\r\n     */\r\n    _api_register( 'ajax.json()', function () {\r\n        var ctx = this.context;\r\n    \r\n        if ( ctx.length > 0 ) {\r\n            return ctx[0].json;\r\n        }\r\n    \r\n        // else return undefined;\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Get the data submitted in the last Ajax request\r\n     */\r\n    _api_register( 'ajax.params()', function () {\r\n        var ctx = this.context;\r\n    \r\n        if ( ctx.length > 0 ) {\r\n            return ctx[0].oAjaxData;\r\n        }\r\n    \r\n        // else return undefined;\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Reload tables from the Ajax data source. Note that this function will\r\n     * automatically re-draw the table when the remote data has been loaded.\r\n     *\r\n     * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n     *   position. A full re-sort and re-filter is performed when this method is\r\n     *   called, which is why the pagination reset is the default action.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\r\n        return this.iterator( 'table', function (settings) {\r\n            __reload( settings, resetPaging===false, callback );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Get the current Ajax URL. Note that this returns the URL from the first\r\n     * table in the current context.\r\n     *\r\n     * @return {string} Current Ajax source URL\r\n     *//**\r\n     * Set the Ajax URL. Note that this will set the URL for all tables in the\r\n     * current context.\r\n     *\r\n     * @param {string} url URL to set.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'ajax.url()', function ( url ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( url === undefined ) {\r\n            // get\r\n            if ( ctx.length === 0 ) {\r\n                return undefined;\r\n            }\r\n            ctx = ctx[0];\r\n    \r\n            return ctx.ajax ?\r\n                $.isPlainObject( ctx.ajax ) ?\r\n                    ctx.ajax.url :\r\n                    ctx.ajax :\r\n                ctx.sAjaxSource;\r\n        }\r\n    \r\n        // set\r\n        return this.iterator( 'table', function ( settings ) {\r\n            if ( $.isPlainObject( settings.ajax ) ) {\r\n                settings.ajax.url = url;\r\n            }\r\n            else {\r\n                settings.ajax = url;\r\n            }\r\n            // No need to consider sAjaxSource here since DataTables gives priority\r\n            // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\r\n            // value of `sAjaxSource` redundant.\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Load data from the newly set Ajax URL. Note that this method is only\r\n     * available when `ajax.url()` is used to set a URL. Additionally, this method\r\n     * has the same effect as calling `ajax.reload()` but is provided for\r\n     * convenience when setting a new URL. Like `ajax.reload()` it will\r\n     * automatically redraw the table once the remote data has been loaded.\r\n     *\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\r\n        // Same as a reload, but makes sense to present it for easy access after a\r\n        // url change\r\n        return this.iterator( 'table', function ( ctx ) {\r\n            __reload( ctx, resetPaging===false, callback );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    \r\n    var _selector_run = function ( type, selector, selectFn, settings, opts )\r\n    {\r\n        var\r\n            out = [], res,\r\n            a, i, ien, j, jen,\r\n            selectorType = typeof selector;\r\n    \r\n        // Can't just check for isArray here, as an API or jQuery instance might be\r\n        // given with their array like look\r\n        if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\r\n            selector = [ selector ];\r\n        }\r\n    \r\n        for ( i=0, ien=selector.length ; i<ien ; i++ ) {\r\n            // Only split on simple strings - complex expressions will be jQuery selectors\r\n            a = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\r\n                selector[i].split(',') :\r\n                [ selector[i] ];\r\n    \r\n            for ( j=0, jen=a.length ; j<jen ; j++ ) {\r\n                res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\r\n    \r\n                if ( res && res.length ) {\r\n                    out = out.concat( res );\r\n                }\r\n            }\r\n        }\r\n    \r\n        // selector extensions\r\n        var ext = _ext.selector[ type ];\r\n        if ( ext.length ) {\r\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n                out = ext[i]( settings, opts, out );\r\n            }\r\n        }\r\n    \r\n        return _unique( out );\r\n    };\r\n    \r\n    \r\n    var _selector_opts = function ( opts )\r\n    {\r\n        if ( ! opts ) {\r\n            opts = {};\r\n        }\r\n    \r\n        // Backwards compatibility for 1.9- which used the terminology filter rather\r\n        // than search\r\n        if ( opts.filter && opts.search === undefined ) {\r\n            opts.search = opts.filter;\r\n        }\r\n    \r\n        return $.extend( {\r\n            search: 'none',\r\n            order: 'current',\r\n            page: 'all'\r\n        }, opts );\r\n    };\r\n    \r\n    \r\n    var _selector_first = function ( inst )\r\n    {\r\n        // Reduce the API instance to the first item found\r\n        for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\r\n            if ( inst[i].length > 0 ) {\r\n                // Assign the first element to the first item in the instance\r\n                // and truncate the instance and context\r\n                inst[0] = inst[i];\r\n                inst[0].length = 1;\r\n                inst.length = 1;\r\n                inst.context = [ inst.context[i] ];\r\n    \r\n                return inst;\r\n            }\r\n        }\r\n    \r\n        // Not found - return an empty instance\r\n        inst.length = 0;\r\n        return inst;\r\n    };\r\n    \r\n    \r\n    var _selector_row_indexes = function ( settings, opts )\r\n    {\r\n        var\r\n            i, ien, tmp, a=[],\r\n            displayFiltered = settings.aiDisplay,\r\n            displayMaster = settings.aiDisplayMaster;\r\n    \r\n        var\r\n            search = opts.search,  // none, applied, removed\r\n            order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\r\n            page   = opts.page;    // all, current\r\n    \r\n        if ( _fnDataSource( settings ) == 'ssp' ) {\r\n            // In server-side processing mode, most options are irrelevant since\r\n            // rows not shown don't exist and the index order is the applied order\r\n            // Removed is a special case - for consistency just return an empty\r\n            // array\r\n            return search === 'removed' ?\r\n                [] :\r\n                _range( 0, displayMaster.length );\r\n        }\r\n        else if ( page == 'current' ) {\r\n            // Current page implies that order=current and fitler=applied, since it is\r\n            // fairly senseless otherwise, regardless of what order and search actually\r\n            // are\r\n            for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\r\n                a.push( displayFiltered[i] );\r\n            }\r\n        }\r\n        else if ( order == 'current' || order == 'applied' ) {\r\n            a = search == 'none' ?\r\n                displayMaster.slice() :                      // no search\r\n                search == 'applied' ?\r\n                    displayFiltered.slice() :                // applied search\r\n                    $.map( displayMaster, function (el, i) { // removed search\r\n                        return $.inArray( el, displayFiltered ) === -1 ? el : null;\r\n                    } );\r\n        }\r\n        else if ( order == 'index' || order == 'original' ) {\r\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                if ( search == 'none' ) {\r\n                    a.push( i );\r\n                }\r\n                else { // applied | removed\r\n                    tmp = $.inArray( i, displayFiltered );\r\n    \r\n                    if ((tmp === -1 && search == 'removed') ||\r\n                        (tmp >= 0   && search == 'applied') )\r\n                    {\r\n                        a.push( i );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        return a;\r\n    };\r\n    \r\n    \r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     * Rows\r\n     *\r\n     * {}          - no selector - use all available rows\r\n     * {integer}   - row aoData index\r\n     * {node}      - TR node\r\n     * {string}    - jQuery selector to apply to the TR elements\r\n     * {array}     - jQuery array of nodes, or simply an array of TR nodes\r\n     *\r\n     */\r\n    \r\n    \r\n    var __row_selector = function ( settings, selector, opts )\r\n    {\r\n        var rows;\r\n        var run = function ( sel ) {\r\n            var selInt = _intVal( sel );\r\n            var i, ien;\r\n    \r\n            // Short cut - selector is a number and no options provided (default is\r\n            // all records, so no need to check if the index is in there, since it\r\n            // must be - dev error if the index doesn't exist).\r\n            if ( selInt !== null && ! opts ) {\r\n                return [ selInt ];\r\n            }\r\n    \r\n            if ( ! rows ) {\r\n                rows = _selector_row_indexes( settings, opts );\r\n            }\r\n    \r\n            if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\r\n                // Selector - integer\r\n                return [ selInt ];\r\n            }\r\n            else if ( sel === null || sel === undefined || sel === '' ) {\r\n                // Selector - none\r\n                return rows;\r\n            }\r\n    \r\n            // Selector - function\r\n            if ( typeof sel === 'function' ) {\r\n                return $.map( rows, function (idx) {\r\n                    var row = settings.aoData[ idx ];\r\n                    return sel( idx, row._aData, row.nTr ) ? idx : null;\r\n                } );\r\n            }\r\n    \r\n            // Get nodes in the order from the `rows` array with null values removed\r\n            var nodes = _removeEmpty(\r\n                _pluck_order( settings.aoData, rows, 'nTr' )\r\n            );\r\n    \r\n            // Selector - node\r\n            if ( sel.nodeName ) {\r\n                if ( sel._DT_RowIndex !== undefined ) {\r\n                    return [ sel._DT_RowIndex ]; // Property added by DT for fast lookup\r\n                }\r\n                else if ( sel._DT_CellIndex ) {\r\n                    return [ sel._DT_CellIndex.row ];\r\n                }\r\n                else {\r\n                    var host = $(sel).closest('*[data-dt-row]');\r\n                    return host.length ?\r\n                        [ host.data('dt-row') ] :\r\n                        [];\r\n                }\r\n            }\r\n    \r\n            // ID selector. Want to always be able to select rows by id, regardless\r\n            // of if the tr element has been created or not, so can't rely upon\r\n            // jQuery here - hence a custom implementation. This does not match\r\n            // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\r\n            // but to select it using a CSS selector engine (like Sizzle or\r\n            // querySelect) it would need to need to be escaped for some characters.\r\n            // DataTables simplifies this for row selectors since you can select\r\n            // only a row. A # indicates an id any anything that follows is the id -\r\n            // unescaped.\r\n            if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\r\n                // get row index from id\r\n                var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\r\n                if ( rowObj !== undefined ) {\r\n                    return [ rowObj.idx ];\r\n                }\r\n    \r\n                // need to fall through to jQuery in case there is DOM id that\r\n                // matches\r\n            }\r\n    \r\n            // Selector - jQuery selector string, array of nodes or jQuery object/\r\n            // As jQuery's .filter() allows jQuery objects to be passed in filter,\r\n            // it also allows arrays, so this will cope with all three options\r\n            return $(nodes)\r\n                .filter( sel )\r\n                .map( function () {\r\n                    return this._DT_RowIndex;\r\n                } )\r\n                .toArray();\r\n        };\r\n    \r\n        return _selector_run( 'row', selector, run, settings, opts );\r\n    };\r\n    \r\n    \r\n    _api_register( 'rows()', function ( selector, opts ) {\r\n        // argument shifting\r\n        if ( selector === undefined ) {\r\n            selector = '';\r\n        }\r\n        else if ( $.isPlainObject( selector ) ) {\r\n            opts = selector;\r\n            selector = '';\r\n        }\r\n    \r\n        opts = _selector_opts( opts );\r\n    \r\n        var inst = this.iterator( 'table', function ( settings ) {\r\n            return __row_selector( settings, selector, opts );\r\n        }, 1 );\r\n    \r\n        // Want argument shifting here and in __row_selector?\r\n        inst.selector.rows = selector;\r\n        inst.selector.opts = opts;\r\n    \r\n        return inst;\r\n    } );\r\n    \r\n    _api_register( 'rows().nodes()', function () {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            return settings.aoData[ row ].nTr || undefined;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_register( 'rows().data()', function () {\r\n        return this.iterator( true, 'rows', function ( settings, rows ) {\r\n            return _pluck_order( settings.aoData, rows, '_aData' );\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            var r = settings.aoData[ row ];\r\n            return type === 'search' ? r._aFilterData : r._aSortData;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            _fnInvalidate( settings, row, src );\r\n        } );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\r\n        return this.iterator( 'row', function ( settings, row ) {\r\n            return row;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\r\n        var a = [];\r\n        var context = this.context;\r\n    \r\n        // `iterator` will drop undefined values, but in this case we want them\r\n        for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n            for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\r\n                var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\r\n                a.push( (hash === true ? '#' : '' )+ id );\r\n            }\r\n        }\r\n    \r\n        return new _Api( context, a );\r\n    } );\r\n    \r\n    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\r\n        var that = this;\r\n    \r\n        this.iterator( 'row', function ( settings, row, thatIdx ) {\r\n            var data = settings.aoData;\r\n            var rowData = data[ row ];\r\n            var i, ien, j, jen;\r\n            var loopRow, loopCells;\r\n    \r\n            data.splice( row, 1 );\r\n    \r\n            // Update the cached indexes\r\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                loopRow = data[i];\r\n                loopCells = loopRow.anCells;\r\n    \r\n                // Rows\r\n                if ( loopRow.nTr !== null ) {\r\n                    loopRow.nTr._DT_RowIndex = i;\r\n                }\r\n    \r\n                // Cells\r\n                if ( loopCells !== null ) {\r\n                    for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\r\n                        loopCells[j]._DT_CellIndex.row = i;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Delete from the display arrays\r\n            _fnDeleteIndex( settings.aiDisplayMaster, row );\r\n            _fnDeleteIndex( settings.aiDisplay, row );\r\n            _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\r\n    \r\n            // Check for an 'overflow' they case for displaying the table\r\n            _fnLengthOverflow( settings );\r\n    \r\n            // Remove the row's ID reference if there is one\r\n            var id = settings.rowIdFn( rowData._aData );\r\n            if ( id !== undefined ) {\r\n                delete settings.aIds[ id ];\r\n            }\r\n        } );\r\n    \r\n        this.iterator( 'table', function ( settings ) {\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                settings.aoData[i].idx = i;\r\n            }\r\n        } );\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'rows.add()', function ( rows ) {\r\n        var newRows = this.iterator( 'table', function ( settings ) {\r\n                var row, i, ien;\r\n                var out = [];\r\n    \r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n    \r\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                        out.push( _fnAddTr( settings, row )[0] );\r\n                    }\r\n                    else {\r\n                        out.push( _fnAddData( settings, row ) );\r\n                    }\r\n                }\r\n    \r\n                return out;\r\n            }, 1 );\r\n    \r\n        // Return an Api.rows() extended instance, so rows().nodes() etc can be used\r\n        var modRows = this.rows( -1 );\r\n        modRows.pop();\r\n        $.merge( modRows, newRows );\r\n    \r\n        return modRows;\r\n    } );\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     *\r\n     */\r\n    _api_register( 'row()', function ( selector, opts ) {\r\n        return _selector_first( this.rows( selector, opts ) );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'row().data()', function ( data ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( data === undefined ) {\r\n            // Get\r\n            return ctx.length && this.length ?\r\n                ctx[0].aoData[ this[0] ]._aData :\r\n                undefined;\r\n        }\r\n    \r\n        // Set\r\n        ctx[0].aoData[ this[0] ]._aData = data;\r\n    \r\n        // Automatically invalidate\r\n        _fnInvalidate( ctx[0], this[0], 'data' );\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'row().node()', function () {\r\n        var ctx = this.context;\r\n    \r\n        return ctx.length && this.length ?\r\n            ctx[0].aoData[ this[0] ].nTr || null :\r\n            null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'row.add()', function ( row ) {\r\n        // Allow a jQuery object to be passed in - only a single row is added from\r\n        // it though - the first element in the set\r\n        if ( row instanceof $ && row.length ) {\r\n            row = row[0];\r\n        }\r\n    \r\n        var rows = this.iterator( 'table', function ( settings ) {\r\n            if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                return _fnAddTr( settings, row )[0];\r\n            }\r\n            return _fnAddData( settings, row );\r\n        } );\r\n    \r\n        // Return an Api.rows() extended instance, with the newly added row selected\r\n        return this.row( rows[0] );\r\n    } );\r\n    \r\n    \r\n    \r\n    var __details_add = function ( ctx, row, data, klass )\r\n    {\r\n        // Convert to array of TR elements\r\n        var rows = [];\r\n        var addRow = function ( r, k ) {\r\n            // Recursion to allow for arrays of jQuery objects\r\n            if ( $.isArray( r ) || r instanceof $ ) {\r\n                for ( var i=0, ien=r.length ; i<ien ; i++ ) {\r\n                    addRow( r[i], k );\r\n                }\r\n                return;\r\n            }\r\n    \r\n            // If we get a TR element, then just add it directly - up to the dev\r\n            // to add the correct number of columns etc\r\n            if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\r\n                rows.push( r );\r\n            }\r\n            else {\r\n                // Otherwise create a row with a wrapper\r\n                var created = $('<tr><td/></tr>').addClass( k );\r\n                $('td', created)\r\n                    .addClass( k )\r\n                    .html( r )\r\n                    [0].colSpan = _fnVisbleColumns( ctx );\r\n    \r\n                rows.push( created[0] );\r\n            }\r\n        };\r\n    \r\n        addRow( data, klass );\r\n    \r\n        if ( row._details ) {\r\n            row._details.detach();\r\n        }\r\n    \r\n        row._details = $(rows);\r\n    \r\n        // If the children were already shown, that state should be retained\r\n        if ( row._detailsShow ) {\r\n            row._details.insertAfter( row.nTr );\r\n        }\r\n    };\r\n    \r\n    \r\n    var __details_remove = function ( api, idx )\r\n    {\r\n        var ctx = api.context;\r\n    \r\n        if ( ctx.length ) {\r\n            var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\r\n    \r\n            if ( row && row._details ) {\r\n                row._details.remove();\r\n    \r\n                row._detailsShow = undefined;\r\n                row._details = undefined;\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    var __details_display = function ( api, show ) {\r\n        var ctx = api.context;\r\n    \r\n        if ( ctx.length && api.length ) {\r\n            var row = ctx[0].aoData[ api[0] ];\r\n    \r\n            if ( row._details ) {\r\n                row._detailsShow = show;\r\n    \r\n                if ( show ) {\r\n                    row._details.insertAfter( row.nTr );\r\n                }\r\n                else {\r\n                    row._details.detach();\r\n                }\r\n    \r\n                __details_events( ctx[0] );\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    var __details_events = function ( settings )\r\n    {\r\n        var api = new _Api( settings );\r\n        var namespace = '.dt.DT_details';\r\n        var drawEvent = 'draw'+namespace;\r\n        var colvisEvent = 'column-visibility'+namespace;\r\n        var destroyEvent = 'destroy'+namespace;\r\n        var data = settings.aoData;\r\n    \r\n        api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\r\n    \r\n        if ( _pluck( data, '_details' ).length > 0 ) {\r\n            // On each draw, insert the required elements into the document\r\n            api.on( drawEvent, function ( e, ctx ) {\r\n                if ( settings !== ctx ) {\r\n                    return;\r\n                }\r\n    \r\n                api.rows( {page:'current'} ).eq(0).each( function (idx) {\r\n                    // Internal data grab\r\n                    var row = data[ idx ];\r\n    \r\n                    if ( row._detailsShow ) {\r\n                        row._details.insertAfter( row.nTr );\r\n                    }\r\n                } );\r\n            } );\r\n    \r\n            // Column visibility change - update the colspan\r\n            api.on( colvisEvent, function ( e, ctx, idx, vis ) {\r\n                if ( settings !== ctx ) {\r\n                    return;\r\n                }\r\n    \r\n                // Update the colspan for the details rows (note, only if it already has\r\n                // a colspan)\r\n                var row, visible = _fnVisbleColumns( ctx );\r\n    \r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    row = data[i];\r\n    \r\n                    if ( row._details ) {\r\n                        row._details.children('td[colspan]').attr('colspan', visible );\r\n                    }\r\n                }\r\n            } );\r\n    \r\n            // Table destroyed - nuke any child rows\r\n            api.on( destroyEvent, function ( e, ctx ) {\r\n                if ( settings !== ctx ) {\r\n                    return;\r\n                }\r\n    \r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    if ( data[i]._details ) {\r\n                        __details_remove( api, i );\r\n                    }\r\n                }\r\n            } );\r\n        }\r\n    };\r\n    \r\n    // Strings for the method names to help minification\r\n    var _emp = '';\r\n    var _child_obj = _emp+'row().child';\r\n    var _child_mth = _child_obj+'()';\r\n    \r\n    // data can be:\r\n    //  tr\r\n    //  string\r\n    //  jQuery or array of any of the above\r\n    _api_register( _child_mth, function ( data, klass ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( data === undefined ) {\r\n            // get\r\n            return ctx.length && this.length ?\r\n                ctx[0].aoData[ this[0] ]._details :\r\n                undefined;\r\n        }\r\n        else if ( data === true ) {\r\n            // show\r\n            this.child.show();\r\n        }\r\n        else if ( data === false ) {\r\n            // remove\r\n            __details_remove( this );\r\n        }\r\n        else if ( ctx.length && this.length ) {\r\n            // set\r\n            __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\r\n        }\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( [\r\n        _child_obj+'.show()',\r\n        _child_mth+'.show()' // only when `child()` was called with parameters (without\r\n    ], function ( show ) {   // it returns an object and this method is not executed)\r\n        __details_display( this, true );\r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( [\r\n        _child_obj+'.hide()',\r\n        _child_mth+'.hide()' // only when `child()` was called with parameters (without\r\n    ], function () {         // it returns an object and this method is not executed)\r\n        __details_display( this, false );\r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( [\r\n        _child_obj+'.remove()',\r\n        _child_mth+'.remove()' // only when `child()` was called with parameters (without\r\n    ], function () {           // it returns an object and this method is not executed)\r\n        __details_remove( this );\r\n        return this;\r\n    } );\r\n    \r\n    \r\n    _api_register( _child_obj+'.isShown()', function () {\r\n        var ctx = this.context;\r\n    \r\n        if ( ctx.length && this.length ) {\r\n            // _detailsShown as false or undefined will fall through to return false\r\n            return ctx[0].aoData[ this[0] ]._detailsShow || false;\r\n        }\r\n        return false;\r\n    } );\r\n    \r\n    \r\n    \r\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n     * Columns\r\n     *\r\n     * {integer}           - column index (>=0 count from left, <0 count from right)\r\n     * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\r\n     * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\r\n     * \"{string}:name\"     - column name\r\n     * \"{string}\"          - jQuery selector on column header nodes\r\n     *\r\n     */\r\n    \r\n    // can be an array of these items, comma separated list, or an array of comma\r\n    // separated lists\r\n    \r\n    var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\r\n    \r\n    \r\n    // r1 and r2 are redundant - but it means that the parameters match for the\r\n    // iterator callback in columns().data()\r\n    var __columnData = function ( settings, column, r1, r2, rows ) {\r\n        var a = [];\r\n        for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\r\n            a.push( _fnGetCellData( settings, rows[row], column ) );\r\n        }\r\n        return a;\r\n    };\r\n    \r\n    \r\n    var __column_selector = function ( settings, selector, opts )\r\n    {\r\n        var\r\n            columns = settings.aoColumns,\r\n            names = _pluck( columns, 'sName' ),\r\n            nodes = _pluck( columns, 'nTh' );\r\n    \r\n        var run = function ( s ) {\r\n            var selInt = _intVal( s );\r\n    \r\n            // Selector - all\r\n            if ( s === '' ) {\r\n                return _range( columns.length );\r\n            }\r\n    \r\n            // Selector - index\r\n            if ( selInt !== null ) {\r\n                return [ selInt >= 0 ?\r\n                    selInt : // Count from left\r\n                    columns.length + selInt // Count from right (+ because its a negative value)\r\n                ];\r\n            }\r\n    \r\n            // Selector = function\r\n            if ( typeof s === 'function' ) {\r\n                var rows = _selector_row_indexes( settings, opts );\r\n    \r\n                return $.map( columns, function (col, idx) {\r\n                    return s(\r\n                            idx,\r\n                            __columnData( settings, idx, 0, 0, rows ),\r\n                            nodes[ idx ]\r\n                        ) ? idx : null;\r\n                } );\r\n            }\r\n    \r\n            // jQuery or string selector\r\n            var match = typeof s === 'string' ?\r\n                s.match( __re_column_selector ) :\r\n                '';\r\n    \r\n            if ( match ) {\r\n                switch( match[2] ) {\r\n                    case 'visIdx':\r\n                    case 'visible':\r\n                        var idx = parseInt( match[1], 10 );\r\n                        // Visible index given, convert to column index\r\n                        if ( idx < 0 ) {\r\n                            // Counting from the right\r\n                            var visColumns = $.map( columns, function (col,i) {\r\n                                return col.bVisible ? i : null;\r\n                            } );\r\n                            return [ visColumns[ visColumns.length + idx ] ];\r\n                        }\r\n                        // Counting from the left\r\n                        return [ _fnVisibleToColumnIndex( settings, idx ) ];\r\n    \r\n                    case 'name':\r\n                        // match by name. `names` is column index complete and in order\r\n                        return $.map( names, function (name, i) {\r\n                            return name === match[1] ? i : null;\r\n                        } );\r\n    \r\n                    default:\r\n                        return [];\r\n                }\r\n            }\r\n    \r\n            // Cell in the table body\r\n            if ( s.nodeName && s._DT_CellIndex ) {\r\n                return [ s._DT_CellIndex.column ];\r\n            }\r\n    \r\n            // jQuery selector on the TH elements for the columns\r\n            var jqResult = $( nodes )\r\n                .filter( s )\r\n                .map( function () {\r\n                    return $.inArray( this, nodes ); // `nodes` is column index complete and in order\r\n                } )\r\n                .toArray();\r\n    \r\n            if ( jqResult.length || ! s.nodeName ) {\r\n                return jqResult;\r\n            }\r\n    \r\n            // Otherwise a node which might have a `dt-column` data attribute, or be\r\n            // a child or such an element\r\n            var host = $(s).closest('*[data-dt-column]');\r\n            return host.length ?\r\n                [ host.data('dt-column') ] :\r\n                [];\r\n        };\r\n    \r\n        return _selector_run( 'column', selector, run, settings, opts );\r\n    };\r\n    \r\n    \r\n    var __setColumnVis = function ( settings, column, vis ) {\r\n        var\r\n            cols = settings.aoColumns,\r\n            col  = cols[ column ],\r\n            data = settings.aoData,\r\n            row, cells, i, ien, tr;\r\n    \r\n        // Get\r\n        if ( vis === undefined ) {\r\n            return col.bVisible;\r\n        }\r\n    \r\n        // Set\r\n        // No change\r\n        if ( col.bVisible === vis ) {\r\n            return;\r\n        }\r\n    \r\n        if ( vis ) {\r\n            // Insert column\r\n            // Need to decide if we should use appendChild or insertBefore\r\n            var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\r\n    \r\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                tr = data[i].nTr;\r\n                cells = data[i].anCells;\r\n    \r\n                if ( tr ) {\r\n                    // insertBefore can act like appendChild if 2nd arg is null\r\n                    tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Remove column\r\n            $( _pluck( settings.aoData, 'anCells', column ) ).detach();\r\n        }\r\n    \r\n        // Common actions\r\n        col.bVisible = vis;\r\n        _fnDrawHead( settings, settings.aoHeader );\r\n        _fnDrawHead( settings, settings.aoFooter );\r\n    \r\n        _fnSaveState( settings );\r\n    };\r\n    \r\n    \r\n    _api_register( 'columns()', function ( selector, opts ) {\r\n        // argument shifting\r\n        if ( selector === undefined ) {\r\n            selector = '';\r\n        }\r\n        else if ( $.isPlainObject( selector ) ) {\r\n            opts = selector;\r\n            selector = '';\r\n        }\r\n    \r\n        opts = _selector_opts( opts );\r\n    \r\n        var inst = this.iterator( 'table', function ( settings ) {\r\n            return __column_selector( settings, selector, opts );\r\n        }, 1 );\r\n    \r\n        // Want argument shifting here and in _row_selector?\r\n        inst.selector.cols = selector;\r\n        inst.selector.opts = opts;\r\n    \r\n        return inst;\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return settings.aoColumns[column].nTh;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return settings.aoColumns[column].nTf;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().data()', 'column().data()', function () {\r\n        return this.iterator( 'column-rows', __columnData, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return settings.aoColumns[column].mData;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\r\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n            return _pluck_order( settings.aoData, rows,\r\n                type === 'search' ? '_aFilterData' : '_aSortData', column\r\n            );\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\r\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n            return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\r\n        var ret = this.iterator( 'column', function ( settings, column ) {\r\n            if ( vis === undefined ) {\r\n                return settings.aoColumns[ column ].bVisible;\r\n            } // else\r\n            __setColumnVis( settings, column, vis );\r\n        } );\r\n    \r\n        // Group the column visibility changes\r\n        if ( vis !== undefined ) {\r\n            // Second loop once the first is done for events\r\n            this.iterator( 'column', function ( settings, column ) {\r\n                _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\r\n            } );\r\n    \r\n            if ( calc === undefined || calc ) {\r\n                this.columns.adjust();\r\n            }\r\n        }\r\n    \r\n        return ret;\r\n    } );\r\n    \r\n    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\r\n        return this.iterator( 'column', function ( settings, column ) {\r\n            return type === 'visible' ?\r\n                _fnColumnIndexToVisible( settings, column ) :\r\n                column;\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_register( 'columns.adjust()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnAdjustColumnSizing( settings );\r\n        }, 1 );\r\n    } );\r\n    \r\n    _api_register( 'column.index()', function ( type, idx ) {\r\n        if ( this.context.length !== 0 ) {\r\n            var ctx = this.context[0];\r\n    \r\n            if ( type === 'fromVisible' || type === 'toData' ) {\r\n                return _fnVisibleToColumnIndex( ctx, idx );\r\n            }\r\n            else if ( type === 'fromData' || type === 'toVisible' ) {\r\n                return _fnColumnIndexToVisible( ctx, idx );\r\n            }\r\n        }\r\n    } );\r\n    \r\n    _api_register( 'column()', function ( selector, opts ) {\r\n        return _selector_first( this.columns( selector, opts ) );\r\n    } );\r\n    \r\n    \r\n    \r\n    var __cell_selector = function ( settings, selector, opts )\r\n    {\r\n        var data = settings.aoData;\r\n        var rows = _selector_row_indexes( settings, opts );\r\n        var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\r\n        var allCells = $( [].concat.apply([], cells) );\r\n        var row;\r\n        var columns = settings.aoColumns.length;\r\n        var a, i, ien, j, o, host;\r\n    \r\n        var run = function ( s ) {\r\n            var fnSelector = typeof s === 'function';\r\n    \r\n            if ( s === null || s === undefined || fnSelector ) {\r\n                // All cells and function selectors\r\n                a = [];\r\n    \r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n    \r\n                    for ( j=0 ; j<columns ; j++ ) {\r\n                        o = {\r\n                            row: row,\r\n                            column: j\r\n                        };\r\n    \r\n                        if ( fnSelector ) {\r\n                            // Selector - function\r\n                            host = data[ row ];\r\n    \r\n                            if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\r\n                                a.push( o );\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Selector - all\r\n                            a.push( o );\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                return a;\r\n            }\r\n            \r\n            // Selector - index\r\n            if ( $.isPlainObject( s ) ) {\r\n                return [s];\r\n            }\r\n    \r\n            // Selector - jQuery filtered cells\r\n            var jqResult = allCells\r\n                .filter( s )\r\n                .map( function (i, el) {\r\n                    return { // use a new object, in case someone changes the values\r\n                        row:    el._DT_CellIndex.row,\r\n                        column: el._DT_CellIndex.column\r\n                    };\r\n                } )\r\n                .toArray();\r\n    \r\n            if ( jqResult.length || ! s.nodeName ) {\r\n                return jqResult;\r\n            }\r\n    \r\n            // Otherwise the selector is a node, and there is one last option - the\r\n            // element might be a child of an element which has dt-row and dt-column\r\n            // data attributes\r\n            host = $(s).closest('*[data-dt-row]');\r\n            return host.length ?\r\n                [ {\r\n                    row: host.data('dt-row'),\r\n                    column: host.data('dt-column')\r\n                } ] :\r\n                [];\r\n        };\r\n    \r\n        return _selector_run( 'cell', selector, run, settings, opts );\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\r\n        // Argument shifting\r\n        if ( $.isPlainObject( rowSelector ) ) {\r\n            // Indexes\r\n            if ( rowSelector.row === undefined ) {\r\n                // Selector options in first parameter\r\n                opts = rowSelector;\r\n                rowSelector = null;\r\n            }\r\n            else {\r\n                // Cell index objects in first parameter\r\n                opts = columnSelector;\r\n                columnSelector = null;\r\n            }\r\n        }\r\n        if ( $.isPlainObject( columnSelector ) ) {\r\n            opts = columnSelector;\r\n            columnSelector = null;\r\n        }\r\n    \r\n        // Cell selector\r\n        if ( columnSelector === null || columnSelector === undefined ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\r\n            } );\r\n        }\r\n    \r\n        // Row + column selector\r\n        var columns = this.columns( columnSelector, opts );\r\n        var rows = this.rows( rowSelector, opts );\r\n        var a, i, ien, j, jen;\r\n    \r\n        var cells = this.iterator( 'table', function ( settings, idx ) {\r\n            a = [];\r\n    \r\n            for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\r\n                for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\r\n                    a.push( {\r\n                        row:    rows[idx][i],\r\n                        column: columns[idx][j]\r\n                    } );\r\n                }\r\n            }\r\n    \r\n            return a;\r\n        }, 1 );\r\n    \r\n        $.extend( cells.selector, {\r\n            cols: columnSelector,\r\n            rows: rowSelector,\r\n            opts: opts\r\n        } );\r\n    \r\n        return cells;\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            var data = settings.aoData[ row ];\r\n    \r\n            return data && data.anCells ?\r\n                data.anCells[ column ] :\r\n                undefined;\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'cells().data()', function () {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return _fnGetCellData( settings, row, column );\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\r\n        type = type === 'search' ? '_aFilterData' : '_aSortData';\r\n    \r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return settings.aoData[ row ][ type ][ column ];\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return _fnGetCellData( settings, row, column, type );\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            return {\r\n                row: row,\r\n                column: column,\r\n                columnVisible: _fnColumnIndexToVisible( settings, column )\r\n            };\r\n        }, 1 );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\r\n        return this.iterator( 'cell', function ( settings, row, column ) {\r\n            _fnInvalidate( settings, row, src, column );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\r\n        return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'cell().data()', function ( data ) {\r\n        var ctx = this.context;\r\n        var cell = this[0];\r\n    \r\n        if ( data === undefined ) {\r\n            // Get\r\n            return ctx.length && cell.length ?\r\n                _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\r\n                undefined;\r\n        }\r\n    \r\n        // Set\r\n        _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\r\n        _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\r\n    \r\n        return this;\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Get current ordering (sorting) that has been applied to the table.\r\n     *\r\n     * @returns {array} 2D array containing the sorting information for the first\r\n     *   table in the current context. Each element in the parent array represents\r\n     *   a column being sorted upon (i.e. multi-sorting with two columns would have\r\n     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\r\n     *   the column index that the sorting condition applies to, the second is the\r\n     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\r\n     *   index of the sorting order from the `column.sorting` initialisation array.\r\n     *//**\r\n     * Set the ordering for the table.\r\n     *\r\n     * @param {integer} order Column index to sort upon.\r\n     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\r\n     * @returns {DataTables.Api} this\r\n     *//**\r\n     * Set the ordering for the table.\r\n     *\r\n     * @param {array} order 1D array of sorting information to be applied.\r\n     * @param {array} [...] Optional additional sorting conditions\r\n     * @returns {DataTables.Api} this\r\n     *//**\r\n     * Set the ordering for the table.\r\n     *\r\n     * @param {array} order 2D array of sorting information to be applied.\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'order()', function ( order, dir ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( order === undefined ) {\r\n            // get\r\n            return ctx.length !== 0 ?\r\n                ctx[0].aaSorting :\r\n                undefined;\r\n        }\r\n    \r\n        // set\r\n        if ( typeof order === 'number' ) {\r\n            // Simple column / direction passed in\r\n            order = [ [ order, dir ] ];\r\n        }\r\n        else if ( order.length && ! $.isArray( order[0] ) ) {\r\n            // Arguments passed in (list of 1D arrays)\r\n            order = Array.prototype.slice.call( arguments );\r\n        }\r\n        // otherwise a 2D array was passed in\r\n    \r\n        return this.iterator( 'table', function ( settings ) {\r\n            settings.aaSorting = order.slice();\r\n        } );\r\n    } );\r\n    \r\n    \r\n    /**\r\n     * Attach a sort listener to an element for a given column\r\n     *\r\n     * @param {node|jQuery|string} node Identifier for the element(s) to attach the\r\n     *   listener to. This can take the form of a single DOM node, a jQuery\r\n     *   collection of nodes or a jQuery selector which will identify the node(s).\r\n     * @param {integer} column the column that a click on this node will sort on\r\n     * @param {function} [callback] callback function when sort is run\r\n     * @returns {DataTables.Api} this\r\n     */\r\n    _api_register( 'order.listener()', function ( node, column, callback ) {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnSortAttachListener( settings, node, column, callback );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'order.fixed()', function ( set ) {\r\n        if ( ! set ) {\r\n            var ctx = this.context;\r\n            var fixed = ctx.length ?\r\n                ctx[0].aaSortingFixed :\r\n                undefined;\r\n    \r\n            return $.isArray( fixed ) ?\r\n                { pre: fixed } :\r\n                fixed;\r\n        }\r\n    \r\n        return this.iterator( 'table', function ( settings ) {\r\n            settings.aaSortingFixed = $.extend( true, {}, set );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    // Order by the selected column(s)\r\n    _api_register( [\r\n        'columns().order()',\r\n        'column().order()'\r\n    ], function ( dir ) {\r\n        var that = this;\r\n    \r\n        return this.iterator( 'table', function ( settings, i ) {\r\n            var sort = [];\r\n    \r\n            $.each( that[i], function (j, col) {\r\n                sort.push( [ col, dir ] );\r\n            } );\r\n    \r\n            settings.aaSorting = sort;\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\r\n        var ctx = this.context;\r\n    \r\n        if ( input === undefined ) {\r\n            // get\r\n            return ctx.length !== 0 ?\r\n                ctx[0].oPreviousSearch.sSearch :\r\n                undefined;\r\n        }\r\n    \r\n        // set\r\n        return this.iterator( 'table', function ( settings ) {\r\n            if ( ! settings.oFeatures.bFilter ) {\r\n                return;\r\n            }\r\n    \r\n            _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\r\n                \"sSearch\": input+\"\",\r\n                \"bRegex\":  regex === null ? false : regex,\r\n                \"bSmart\":  smart === null ? true  : smart,\r\n                \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n            } ), 1 );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_registerPlural(\r\n        'columns().search()',\r\n        'column().search()',\r\n        function ( input, regex, smart, caseInsen ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                var preSearch = settings.aoPreSearchCols;\r\n    \r\n                if ( input === undefined ) {\r\n                    // get\r\n                    return preSearch[ column ].sSearch;\r\n                }\r\n    \r\n                // set\r\n                if ( ! settings.oFeatures.bFilter ) {\r\n                    return;\r\n                }\r\n    \r\n                $.extend( preSearch[ column ], {\r\n                    \"sSearch\": input+\"\",\r\n                    \"bRegex\":  regex === null ? false : regex,\r\n                    \"bSmart\":  smart === null ? true  : smart,\r\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                } );\r\n    \r\n                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\r\n            } );\r\n        }\r\n    );\r\n    \r\n    /*\r\n     * State API methods\r\n     */\r\n    \r\n    _api_register( 'state()', function () {\r\n        return this.context.length ?\r\n            this.context[0].oSavedState :\r\n            null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'state.clear()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            // Save an empty object\r\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'state.loaded()', function () {\r\n        return this.context.length ?\r\n            this.context[0].oLoadedState :\r\n            null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'state.save()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnSaveState( settings );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    \r\n    /**\r\n     * Provide a common method for plug-ins to check the version of DataTables being\r\n     * used, in order to ensure compatibility.\r\n     *\r\n     *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\r\n     *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\r\n     *  @returns {boolean} true if this version of DataTables is greater or equal to\r\n     *    the required version, or false if this version of DataTales is not\r\n     *    suitable\r\n     *  @static\r\n     *  @dtopt API-Static\r\n     *\r\n     *  @example\r\n     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\r\n     */\r\n    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\r\n    {\r\n        var aThis = DataTable.version.split('.');\r\n        var aThat = version.split('.');\r\n        var iThis, iThat;\r\n    \r\n        for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\r\n            iThis = parseInt( aThis[i], 10 ) || 0;\r\n            iThat = parseInt( aThat[i], 10 ) || 0;\r\n    \r\n            // Parts are the same, keep comparing\r\n            if (iThis === iThat) {\r\n                continue;\r\n            }\r\n    \r\n            // Parts are different, return immediately\r\n            return iThis > iThat;\r\n        }\r\n    \r\n        return true;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Check if a `<table>` node is a DataTable table already or not.\r\n     *\r\n     *  @param {node|jquery|string} table Table node, jQuery object or jQuery\r\n     *      selector for the table to test. Note that if more than more than one\r\n     *      table is passed on, only the first will be checked\r\n     *  @returns {boolean} true the table given is a DataTable, or false otherwise\r\n     *  @static\r\n     *  @dtopt API-Static\r\n     *\r\n     *  @example\r\n     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\r\n     *      $('#example').dataTable();\r\n     *    }\r\n     */\r\n    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\r\n    {\r\n        var t = $(table).get(0);\r\n        var is = false;\r\n    \r\n        if ( table instanceof DataTable.Api ) {\r\n            return true;\r\n        }\r\n    \r\n        $.each( DataTable.settings, function (i, o) {\r\n            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\r\n            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\r\n    \r\n            if ( o.nTable === t || head === t || foot === t ) {\r\n                is = true;\r\n            }\r\n        } );\r\n    \r\n        return is;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Get all DataTable tables that have been initialised - optionally you can\r\n     * select to get only currently visible tables.\r\n     *\r\n     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\r\n     *    or visible tables only.\r\n     *  @returns {array} Array of `table` nodes (not DataTable instances) which are\r\n     *    DataTables\r\n     *  @static\r\n     *  @dtopt API-Static\r\n     *\r\n     *  @example\r\n     *    $.each( $.fn.dataTable.tables(true), function () {\r\n     *      $(table).DataTable().columns.adjust();\r\n     *    } );\r\n     */\r\n    DataTable.tables = DataTable.fnTables = function ( visible )\r\n    {\r\n        var api = false;\r\n    \r\n        if ( $.isPlainObject( visible ) ) {\r\n            api = visible.api;\r\n            visible = visible.visible;\r\n        }\r\n    \r\n        var a = $.map( DataTable.settings, function (o) {\r\n            if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\r\n                return o.nTable;\r\n            }\r\n        } );\r\n    \r\n        return api ?\r\n            new _Api( a ) :\r\n            a;\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Convert from camel case parameters to Hungarian notation. This is made public\r\n     * for the extensions to provide the same ability as DataTables core to accept\r\n     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\r\n     * parameters.\r\n     *\r\n     *  @param {object} src The model object which holds all parameters that can be\r\n     *    mapped.\r\n     *  @param {object} user The object to convert from camel case to Hungarian.\r\n     *  @param {boolean} force When set to `true`, properties which already have a\r\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n     *    won't be.\r\n     */\r\n    DataTable.camelToHungarian = _fnCamelToHungarian;\r\n    \r\n    \r\n    \r\n    /**\r\n     *\r\n     */\r\n    _api_register( '$()', function ( selector, opts ) {\r\n        var\r\n            rows   = this.rows( opts ).nodes(), // Get all rows\r\n            jqRows = $(rows);\r\n    \r\n        return $( [].concat(\r\n            jqRows.filter( selector ).toArray(),\r\n            jqRows.find( selector ).toArray()\r\n        ) );\r\n    } );\r\n    \r\n    \r\n    // jQuery functions to operate on the tables\r\n    $.each( [ 'on', 'one', 'off' ], function (i, key) {\r\n        _api_register( key+'()', function ( /* event, handler */ ) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n    \r\n            // Add the `dt` namespace automatically if it isn't already present\r\n            args[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\r\n                return ! e.match(/\\.dt\\b/) ?\r\n                    e+'.dt' :\r\n                    e;\r\n                } ).join( ' ' );\r\n    \r\n            var inst = $( this.tables().nodes() );\r\n            inst[key].apply( inst, args );\r\n            return this;\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'clear()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            _fnClearTable( settings );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'settings()', function () {\r\n        return new _Api( this.context, this.context );\r\n    } );\r\n    \r\n    \r\n    _api_register( 'init()', function () {\r\n        var ctx = this.context;\r\n        return ctx.length ? ctx[0].oInit : null;\r\n    } );\r\n    \r\n    \r\n    _api_register( 'data()', function () {\r\n        return this.iterator( 'table', function ( settings ) {\r\n            return _pluck( settings.aoData, '_aData' );\r\n        } ).flatten();\r\n    } );\r\n    \r\n    \r\n    _api_register( 'destroy()', function ( remove ) {\r\n        remove = remove || false;\r\n    \r\n        return this.iterator( 'table', function ( settings ) {\r\n            var orig      = settings.nTableWrapper.parentNode;\r\n            var classes   = settings.oClasses;\r\n            var table     = settings.nTable;\r\n            var tbody     = settings.nTBody;\r\n            var thead     = settings.nTHead;\r\n            var tfoot     = settings.nTFoot;\r\n            var jqTable   = $(table);\r\n            var jqTbody   = $(tbody);\r\n            var jqWrapper = $(settings.nTableWrapper);\r\n            var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\r\n            var i, ien;\r\n    \r\n            // Flag to note that the table is currently being destroyed - no action\r\n            // should be taken\r\n            settings.bDestroying = true;\r\n    \r\n            // Fire off the destroy callbacks for plug-ins etc\r\n            _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\r\n    \r\n            // If not being removed from the document, make all columns visible\r\n            if ( ! remove ) {\r\n                new _Api( settings ).columns().visible( true );\r\n            }\r\n    \r\n            // Blitz all `DT` namespaced events (these are internal events, the\r\n            // lowercase, `dt` events are user subscribed and they are responsible\r\n            // for removing them\r\n            jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\r\n            $(window).off('.DT-'+settings.sInstance);\r\n    \r\n            // When scrolling we had to break the table up - restore it\r\n            if ( table != thead.parentNode ) {\r\n                jqTable.children('thead').detach();\r\n                jqTable.append( thead );\r\n            }\r\n    \r\n            if ( tfoot && table != tfoot.parentNode ) {\r\n                jqTable.children('tfoot').detach();\r\n                jqTable.append( tfoot );\r\n            }\r\n    \r\n            settings.aaSorting = [];\r\n            settings.aaSortingFixed = [];\r\n            _fnSortingClasses( settings );\r\n    \r\n            $( rows ).removeClass( settings.asStripeClasses.join(' ') );\r\n    \r\n            $('th, td', thead).removeClass( classes.sSortable+' '+\r\n                classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\r\n            );\r\n    \r\n            if ( settings.bJUI ) {\r\n                $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\r\n                $('th, td', thead).each( function () {\r\n                    var wrapper = $('div.'+classes.sSortJUIWrapper, this);\r\n                    $(this).append( wrapper.contents() );\r\n                    wrapper.detach();\r\n                } );\r\n            }\r\n    \r\n            // Add the TR elements back into the table in their original order\r\n            jqTbody.children().detach();\r\n            jqTbody.append( rows );\r\n    \r\n            // Remove the DataTables generated nodes, events and classes\r\n            var removedMethod = remove ? 'remove' : 'detach';\r\n            jqTable[ removedMethod ]();\r\n            jqWrapper[ removedMethod ]();\r\n    \r\n            // If we need to reattach the table to the document\r\n            if ( ! remove && orig ) {\r\n                // insertBefore acts like appendChild if !arg[1]\r\n                orig.insertBefore( table, settings.nTableReinsertBefore );\r\n    \r\n                // Restore the width of the original table - was read from the style property,\r\n                // so we can restore directly to that\r\n                jqTable\r\n                    .css( 'width', settings.sDestroyWidth )\r\n                    .removeClass( classes.sTable );\r\n    \r\n                // If the were originally stripe classes - then we add them back here.\r\n                // Note this is not fool proof (for example if not all rows had stripe\r\n                // classes - but it's a good effort without getting carried away\r\n                ien = settings.asDestroyStripes.length;\r\n    \r\n                if ( ien ) {\r\n                    jqTbody.children().each( function (i) {\r\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\r\n                    } );\r\n                }\r\n            }\r\n    \r\n            /* Remove the settings object from the settings array */\r\n            var idx = $.inArray( settings, DataTable.settings );\r\n            if ( idx !== -1 ) {\r\n                DataTable.settings.splice( idx, 1 );\r\n            }\r\n        } );\r\n    } );\r\n    \r\n    \r\n    // Add the `every()` method for rows, columns and cells in a compact form\r\n    $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\r\n        _api_register( type+'s().every()', function ( fn ) {\r\n            var opts = this.selector.opts;\r\n            var api = this;\r\n    \r\n            return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\r\n                // Rows and columns:\r\n                //  arg1 - index\r\n                //  arg2 - table counter\r\n                //  arg3 - loop counter\r\n                //  arg4 - undefined\r\n                // Cells:\r\n                //  arg1 - row index\r\n                //  arg2 - column index\r\n                //  arg3 - table counter\r\n                //  arg4 - loop counter\r\n                fn.call(\r\n                    api[ type ](\r\n                        arg1,\r\n                        type==='cell' ? arg2 : opts,\r\n                        type==='cell' ? opts : undefined\r\n                    ),\r\n                    arg1, arg2, arg3, arg4\r\n                );\r\n            } );\r\n        } );\r\n    } );\r\n    \r\n    \r\n    // i18n method for extensions to be able to use the language object from the\r\n    // DataTable\r\n    _api_register( 'i18n()', function ( token, def, plural ) {\r\n        var ctx = this.context[0];\r\n        var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\r\n    \r\n        if ( resolved === undefined ) {\r\n            resolved = def;\r\n        }\r\n    \r\n        if ( plural !== undefined && $.isPlainObject( resolved ) ) {\r\n            resolved = resolved[ plural ] !== undefined ?\r\n                resolved[ plural ] :\r\n                resolved._;\r\n        }\r\n    \r\n        return resolved.replace( '%d', plural ); // nb: plural might be undefined,\r\n    } );\r\n\r\n    /**\r\n     * Version string for plug-ins to check compatibility. Allowed format is\r\n     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\r\n     * only for non-release builds. See http://semver.org/ for more information.\r\n     *  @member\r\n     *  @type string\r\n     *  @default Version number\r\n     */\r\n    DataTable.version = \"1.10.15\";\r\n\r\n    /**\r\n     * Private data store, containing all of the settings objects that are\r\n     * created for the tables on a given page.\r\n     *\r\n     * Note that the `DataTable.settings` object is aliased to\r\n     * `jQuery.fn.dataTableExt` through which it may be accessed and\r\n     * manipulated, or `jQuery.fn.dataTable.settings`.\r\n     *  @member\r\n     *  @type array\r\n     *  @default []\r\n     *  @private\r\n     */\r\n    DataTable.settings = [];\r\n\r\n    /**\r\n     * Object models container, for the various models that DataTables has\r\n     * available to it. These models define the objects that are used to hold\r\n     * the active state and configuration of the table.\r\n     *  @namespace\r\n     */\r\n    DataTable.models = {};\r\n    \r\n    \r\n    \r\n    /**\r\n     * Template object for the way in which DataTables holds information about\r\n     * search information for the global filter and individual column filters.\r\n     *  @namespace\r\n     */\r\n    DataTable.models.oSearch = {\r\n        /**\r\n         * Flag to indicate if the filtering should be case insensitive or not\r\n         *  @type boolean\r\n         *  @default true\r\n         */\r\n        \"bCaseInsensitive\": true,\r\n    \r\n        /**\r\n         * Applied search term\r\n         *  @type string\r\n         *  @default <i>Empty string</i>\r\n         */\r\n        \"sSearch\": \"\",\r\n    \r\n        /**\r\n         * Flag to indicate if the search term should be interpreted as a\r\n         * regular expression (true) or not (false) and therefore and special\r\n         * regex characters escaped.\r\n         *  @type boolean\r\n         *  @default false\r\n         */\r\n        \"bRegex\": false,\r\n    \r\n        /**\r\n         * Flag to indicate if DataTables is to use its smart filtering or not.\r\n         *  @type boolean\r\n         *  @default true\r\n         */\r\n        \"bSmart\": true\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     * Template object for the way in which DataTables holds information about\r\n     * each individual row. This is the object format used for the settings\r\n     * aoData array.\r\n     *  @namespace\r\n     */\r\n    DataTable.models.oRow = {\r\n        /**\r\n         * TR element for the row\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTr\": null,\r\n    \r\n        /**\r\n         * Array of TD elements for each row. This is null until the row has been\r\n         * created.\r\n         *  @type array nodes\r\n         *  @default []\r\n         */\r\n        \"anCells\": null,\r\n    \r\n        /**\r\n         * Data object from the original data source for the row. This is either\r\n         * an array if using the traditional form of DataTables, or an object if\r\n         * using mData options. The exact type will depend on the passed in\r\n         * data from the data source, or will be an array if using DOM a data\r\n         * source.\r\n         *  @type array|object\r\n         *  @default []\r\n         */\r\n        \"_aData\": [],\r\n    \r\n        /**\r\n         * Sorting data cache - this array is ostensibly the same length as the\r\n         * number of columns (although each index is generated only as it is\r\n         * needed), and holds the data that is used for sorting each column in the\r\n         * row. We do this cache generation at the start of the sort in order that\r\n         * the formatting of the sort data need be done only once for each cell\r\n         * per sort. This array should not be read from or written to by anything\r\n         * other than the master sorting methods.\r\n         *  @type array\r\n         *  @default null\r\n         *  @private\r\n         */\r\n        \"_aSortData\": null,\r\n    \r\n        /**\r\n         * Per cell filtering data cache. As per the sort data cache, used to\r\n         * increase the performance of the filtering in DataTables\r\n         *  @type array\r\n         *  @default null\r\n         *  @private\r\n         */\r\n        \"_aFilterData\": null,\r\n    \r\n        /**\r\n         * Filtering data cache. This is the same as the cell filtering cache, but\r\n         * in this case a string rather than an array. This is easily computed with\r\n         * a join on `_aFilterData`, but is provided as a cache so the join isn't\r\n         * needed on every search (memory traded for performance)\r\n         *  @type array\r\n         *  @default null\r\n         *  @private\r\n         */\r\n        \"_sFilterRow\": null,\r\n    \r\n        /**\r\n         * Cache of the class name that DataTables has applied to the row, so we\r\n         * can quickly look at this variable rather than needing to do a DOM check\r\n         * on className for the nTr property.\r\n         *  @type string\r\n         *  @default <i>Empty string</i>\r\n         *  @private\r\n         */\r\n        \"_sRowStripe\": \"\",\r\n    \r\n        /**\r\n         * Denote if the original data source was from the DOM, or the data source\r\n         * object. This is used for invalidating data, so DataTables can\r\n         * automatically read data from the original source, unless uninstructed\r\n         * otherwise.\r\n         *  @type string\r\n         *  @default null\r\n         *  @private\r\n         */\r\n        \"src\": null,\r\n    \r\n        /**\r\n         * Index in the aoData array. This saves an indexOf lookup when we have the\r\n         * object, but want to know the index\r\n         *  @type integer\r\n         *  @default -1\r\n         *  @private\r\n         */\r\n        \"idx\": -1\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Template object for the column information object in DataTables. This object\r\n     * is held in the settings aoColumns array and contains all the information that\r\n     * DataTables needs about each individual column.\r\n     *\r\n     * Note that this object is related to {@link DataTable.defaults.column}\r\n     * but this one is the internal data store for DataTables's cache of columns.\r\n     * It should NOT be manipulated outside of DataTables. Any configuration should\r\n     * be done through the initialisation options.\r\n     *  @namespace\r\n     */\r\n    DataTable.models.oColumn = {\r\n        /**\r\n         * Column index. This could be worked out on-the-fly with $.inArray, but it\r\n         * is faster to just hold it as a variable\r\n         *  @type integer\r\n         *  @default null\r\n         */\r\n        \"idx\": null,\r\n    \r\n        /**\r\n         * A list of the columns that sorting should occur on when this column\r\n         * is sorted. That this property is an array allows multi-column sorting\r\n         * to be defined for a column (for example first name / last name columns\r\n         * would benefit from this). The values are integers pointing to the\r\n         * columns to be sorted on (typically it will be a single integer pointing\r\n         * at itself, but that doesn't need to be the case).\r\n         *  @type array\r\n         */\r\n        \"aDataSort\": null,\r\n    \r\n        /**\r\n         * Define the sorting directions that are applied to the column, in sequence\r\n         * as the column is repeatedly sorted upon - i.e. the first value is used\r\n         * as the sorting direction when the column if first sorted (clicked on).\r\n         * Sort it again (click again) and it will move on to the next index.\r\n         * Repeat until loop.\r\n         *  @type array\r\n         */\r\n        \"asSorting\": null,\r\n    \r\n        /**\r\n         * Flag to indicate if the column is searchable, and thus should be included\r\n         * in the filtering or not.\r\n         *  @type boolean\r\n         */\r\n        \"bSearchable\": null,\r\n    \r\n        /**\r\n         * Flag to indicate if the column is sortable or not.\r\n         *  @type boolean\r\n         */\r\n        \"bSortable\": null,\r\n    \r\n        /**\r\n         * Flag to indicate if the column is currently visible in the table or not\r\n         *  @type boolean\r\n         */\r\n        \"bVisible\": null,\r\n    \r\n        /**\r\n         * Store for manual type assignment using the `column.type` option. This\r\n         * is held in store so we can manipulate the column's `sType` property.\r\n         *  @type string\r\n         *  @default null\r\n         *  @private\r\n         */\r\n        \"_sManualType\": null,\r\n    \r\n        /**\r\n         * Flag to indicate if HTML5 data attributes should be used as the data\r\n         * source for filtering or sorting. True is either are.\r\n         *  @type boolean\r\n         *  @default false\r\n         *  @private\r\n         */\r\n        \"_bAttrSrc\": false,\r\n    \r\n        /**\r\n         * Developer definable function that is called whenever a cell is created (Ajax source,\r\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n         * allowing you to modify the DOM element (add background colour for example) when the\r\n         * element is available.\r\n         *  @type function\r\n         *  @param {element} nTd The TD node that has been created\r\n         *  @param {*} sData The Data for the cell\r\n         *  @param {array|object} oData The data for the whole row\r\n         *  @param {int} iRow The row index for the aoData data store\r\n         *  @default null\r\n         */\r\n        \"fnCreatedCell\": null,\r\n    \r\n        /**\r\n         * Function to get data from a cell in a column. You should <b>never</b>\r\n         * access data directly through _aData internally in DataTables - always use\r\n         * the method attached to this property. It allows mData to function as\r\n         * required. This function is automatically assigned by the column\r\n         * initialisation method\r\n         *  @type function\r\n         *  @param {array|object} oData The data array/object for the array\r\n         *    (i.e. aoData[]._aData)\r\n         *  @param {string} sSpecific The specific data type you want to get -\r\n         *    'display', 'type' 'filter' 'sort'\r\n         *  @returns {*} The data for the cell from the given row's data\r\n         *  @default null\r\n         */\r\n        \"fnGetData\": null,\r\n    \r\n        /**\r\n         * Function to set data for a cell in the column. You should <b>never</b>\r\n         * set the data directly to _aData internally in DataTables - always use\r\n         * this method. It allows mData to function as required. This function\r\n         * is automatically assigned by the column initialisation method\r\n         *  @type function\r\n         *  @param {array|object} oData The data array/object for the array\r\n         *    (i.e. aoData[]._aData)\r\n         *  @param {*} sValue Value to set\r\n         *  @default null\r\n         */\r\n        \"fnSetData\": null,\r\n    \r\n        /**\r\n         * Property to read the value for the cells in the column from the data\r\n         * source array / object. If null, then the default content is used, if a\r\n         * function is given then the return from the function is used.\r\n         *  @type function|int|string|null\r\n         *  @default null\r\n         */\r\n        \"mData\": null,\r\n    \r\n        /**\r\n         * Partner property to mData which is used (only when defined) to get\r\n         * the data - i.e. it is basically the same as mData, but without the\r\n         * 'set' option, and also the data fed to it is the result from mData.\r\n         * This is the rendering method to match the data method of mData.\r\n         *  @type function|int|string|null\r\n         *  @default null\r\n         */\r\n        \"mRender\": null,\r\n    \r\n        /**\r\n         * Unique header TH/TD element for this column - this is what the sorting\r\n         * listener is attached to (if sorting is enabled.)\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTh\": null,\r\n    \r\n        /**\r\n         * Unique footer TH/TD element for this column (if there is one). Not used\r\n         * in DataTables as such, but can be used for plug-ins to reference the\r\n         * footer for each column.\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTf\": null,\r\n    \r\n        /**\r\n         * The class to apply to all TD elements in the table's TBODY for the column\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sClass\": null,\r\n    \r\n        /**\r\n         * When DataTables calculates the column widths to assign to each column,\r\n         * it finds the longest string in each column and then constructs a\r\n         * temporary table and reads the widths from that. The problem with this\r\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n         * string - thus the calculation can go wrong (doing it properly and putting\r\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n         * a \"work around\" we provide this option. It will append its value to the\r\n         * text that is found to be the longest string for the column - i.e. padding.\r\n         *  @type string\r\n         */\r\n        \"sContentPadding\": null,\r\n    \r\n        /**\r\n         * Allows a default value to be given for a column's data, and will be used\r\n         * whenever a null data source is encountered (this can be because mData\r\n         * is set to null, or because the data source itself is null).\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sDefaultContent\": null,\r\n    \r\n        /**\r\n         * Name for the column, allowing reference to the column by name as well as\r\n         * by index (needs a lookup to work by name).\r\n         *  @type string\r\n         */\r\n        \"sName\": null,\r\n    \r\n        /**\r\n         * Custom sorting data type - defines which of the available plug-ins in\r\n         * afnSortData the custom sorting will use - if any is defined.\r\n         *  @type string\r\n         *  @default std\r\n         */\r\n        \"sSortDataType\": 'std',\r\n    \r\n        /**\r\n         * Class to be applied to the header element when sorting on this column\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sSortingClass\": null,\r\n    \r\n        /**\r\n         * Class to be applied to the header element when sorting on this column -\r\n         * when jQuery UI theming is used.\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sSortingClassJUI\": null,\r\n    \r\n        /**\r\n         * Title of the column - what is seen in the TH element (nTh).\r\n         *  @type string\r\n         */\r\n        \"sTitle\": null,\r\n    \r\n        /**\r\n         * Column sorting and filtering type\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sType\": null,\r\n    \r\n        /**\r\n         * Width of the column\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sWidth\": null,\r\n    \r\n        /**\r\n         * Width of the column when it was first \"encountered\"\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sWidthOrig\": null\r\n    };\r\n    \r\n    \r\n    /*\r\n     * Developer note: The properties of the object below are given in Hungarian\r\n     * notation, that was used as the interface for DataTables prior to v1.10, however\r\n     * from v1.10 onwards the primary interface is camel case. In order to avoid\r\n     * breaking backwards compatibility utterly with this change, the Hungarian\r\n     * version is still, internally the primary interface, but is is not documented\r\n     * - hence the @name tags in each doc comment. This allows a Javascript function\r\n     * to create a map from Hungarian notation to camel case (going the other direction\r\n     * would require each property to be listed, which would at around 3K to the size\r\n     * of DataTables, while this method is about a 0.5K hit.\r\n     *\r\n     * Ultimately this does pave the way for Hungarian notation to be dropped\r\n     * completely, but that is a massive amount of work and will break current\r\n     * installs (therefore is on-hold until v2).\r\n     */\r\n    \r\n    /**\r\n     * Initialisation options that can be given to DataTables at initialisation\r\n     * time.\r\n     *  @namespace\r\n     */\r\n    DataTable.defaults = {\r\n        /**\r\n         * An array of data to use for the table, passed in at initialisation which\r\n         * will be used in preference to any data which is already in the DOM. This is\r\n         * particularly useful for constructing tables purely in Javascript, for\r\n         * example with a custom Ajax call.\r\n         *  @type array\r\n         *  @default null\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.data\r\n         *\r\n         *  @example\r\n         *    // Using a 2D array data source\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"data\": [\r\n         *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\r\n         *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\r\n         *        ],\r\n         *        \"columns\": [\r\n         *          { \"title\": \"Engine\" },\r\n         *          { \"title\": \"Browser\" },\r\n         *          { \"title\": \"Platform\" },\r\n         *          { \"title\": \"Version\" },\r\n         *          { \"title\": \"Grade\" }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using an array of objects as a data source (`data`)\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"data\": [\r\n         *          {\r\n         *            \"engine\":   \"Trident\",\r\n         *            \"browser\":  \"Internet Explorer 4.0\",\r\n         *            \"platform\": \"Win 95+\",\r\n         *            \"version\":  4,\r\n         *            \"grade\":    \"X\"\r\n         *          },\r\n         *          {\r\n         *            \"engine\":   \"Trident\",\r\n         *            \"browser\":  \"Internet Explorer 5.0\",\r\n         *            \"platform\": \"Win 95+\",\r\n         *            \"version\":  5,\r\n         *            \"grade\":    \"C\"\r\n         *          }\r\n         *        ],\r\n         *        \"columns\": [\r\n         *          { \"title\": \"Engine\",   \"data\": \"engine\" },\r\n         *          { \"title\": \"Browser\",  \"data\": \"browser\" },\r\n         *          { \"title\": \"Platform\", \"data\": \"platform\" },\r\n         *          { \"title\": \"Version\",  \"data\": \"version\" },\r\n         *          { \"title\": \"Grade\",    \"data\": \"grade\" }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"aaData\": null,\r\n    \r\n    \r\n        /**\r\n         * If ordering is enabled, then DataTables will perform a first pass sort on\r\n         * initialisation. You can define which column(s) the sort is performed\r\n         * upon, and the sorting direction, with this variable. The `sorting` array\r\n         * should contain an array for each column to be sorted initially containing\r\n         * the column's index and a direction string ('asc' or 'desc').\r\n         *  @type array\r\n         *  @default [[0,'asc']]\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.order\r\n         *\r\n         *  @example\r\n         *    // Sort by 3rd column first, and then 4th column\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"order\": [[2,'asc'], [3,'desc']]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *    // No initial sorting\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"order\": []\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"aaSorting\": [[0,'asc']],\r\n    \r\n    \r\n        /**\r\n         * This parameter is basically identical to the `sorting` parameter, but\r\n         * cannot be overridden by user interaction with the table. What this means\r\n         * is that you could have a column (visible or hidden) which the sorting\r\n         * will always be forced on first - any sorting after that (from the user)\r\n         * will then be performed as required. This can be useful for grouping rows\r\n         * together.\r\n         *  @type array\r\n         *  @default null\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.orderFixed\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"orderFixed\": [[0,'asc']]\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"aaSortingFixed\": [],\r\n    \r\n    \r\n        /**\r\n         * DataTables can be instructed to load data to display in the table from a\r\n         * Ajax source. This option defines how that Ajax call is made and where to.\r\n         *\r\n         * The `ajax` property has three different modes of operation, depending on\r\n         * how it is defined. These are:\r\n         *\r\n         * * `string` - Set the URL from where the data should be loaded from.\r\n         * * `object` - Define properties for `jQuery.ajax`.\r\n         * * `function` - Custom data get function\r\n         *\r\n         * `string`\r\n         * --------\r\n         *\r\n         * As a string, the `ajax` property simply defines the URL from which\r\n         * DataTables will load data.\r\n         *\r\n         * `object`\r\n         * --------\r\n         *\r\n         * As an object, the parameters in the object are passed to\r\n         * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\r\n         * of the Ajax request. DataTables has a number of default parameters which\r\n         * you can override using this option. Please refer to the jQuery\r\n         * documentation for a full description of the options available, although\r\n         * the following parameters provide additional options in DataTables or\r\n         * require special consideration:\r\n         *\r\n         * * `data` - As with jQuery, `data` can be provided as an object, but it\r\n         *   can also be used as a function to manipulate the data DataTables sends\r\n         *   to the server. The function takes a single parameter, an object of\r\n         *   parameters with the values that DataTables has readied for sending. An\r\n         *   object may be returned which will be merged into the DataTables\r\n         *   defaults, or you can add the items to the object that was passed in and\r\n         *   not return anything from the function. This supersedes `fnServerParams`\r\n         *   from DataTables 1.9-.\r\n         *\r\n         * * `dataSrc` - By default DataTables will look for the property `data` (or\r\n         *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\r\n         *   from an Ajax source or for server-side processing - this parameter\r\n         *   allows that property to be changed. You can use Javascript dotted\r\n         *   object notation to get a data source for multiple levels of nesting, or\r\n         *   it my be used as a function. As a function it takes a single parameter,\r\n         *   the JSON returned from the server, which can be manipulated as\r\n         *   required, with the returned value being that used by DataTables as the\r\n         *   data source for the table. This supersedes `sAjaxDataProp` from\r\n         *   DataTables 1.9-.\r\n         *\r\n         * * `success` - Should not be overridden it is used internally in\r\n         *   DataTables. To manipulate / transform the data returned by the server\r\n         *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\r\n         *\r\n         * `function`\r\n         * ----------\r\n         *\r\n         * As a function, making the Ajax call is left up to yourself allowing\r\n         * complete control of the Ajax request. Indeed, if desired, a method other\r\n         * than Ajax could be used to obtain the required data, such as Web storage\r\n         * or an AIR database.\r\n         *\r\n         * The function is given four parameters and no return is required. The\r\n         * parameters are:\r\n         *\r\n         * 1. _object_ - Data to send to the server\r\n         * 2. _function_ - Callback function that must be executed when the required\r\n         *    data has been obtained. That data should be passed into the callback\r\n         *    as the only parameter\r\n         * 3. _object_ - DataTables settings object for the table\r\n         *\r\n         * Note that this supersedes `fnServerData` from DataTables 1.9-.\r\n         *\r\n         *  @type string|object|function\r\n         *  @default null\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.ajax\r\n         *  @since 1.10.0\r\n         *\r\n         * @example\r\n         *   // Get JSON data from a file via Ajax.\r\n         *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": \"data.json\"\r\n         *   } );\r\n         *\r\n         * @example\r\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to change\r\n         *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": {\r\n         *       \"url\": \"data.json\",\r\n         *       \"dataSrc\": \"tableData\"\r\n         *     }\r\n         *   } );\r\n         *\r\n         * @example\r\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\r\n         *   // from a plain array rather than an array in an object\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": {\r\n         *       \"url\": \"data.json\",\r\n         *       \"dataSrc\": \"\"\r\n         *     }\r\n         *   } );\r\n         *\r\n         * @example\r\n         *   // Manipulate the data returned from the server - add a link to data\r\n         *   // (note this can, should, be done using `render` for the column - this\r\n         *   // is just a simple example of how the data can be manipulated).\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": {\r\n         *       \"url\": \"data.json\",\r\n         *       \"dataSrc\": function ( json ) {\r\n         *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\r\n         *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\r\n         *         }\r\n         *         return json;\r\n         *       }\r\n         *     }\r\n         *   } );\r\n         *\r\n         * @example\r\n         *   // Add data to the request\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": {\r\n         *       \"url\": \"data.json\",\r\n         *       \"data\": function ( d ) {\r\n         *         return {\r\n         *           \"extra_search\": $('#extra').val()\r\n         *         };\r\n         *       }\r\n         *     }\r\n         *   } );\r\n         *\r\n         * @example\r\n         *   // Send request as POST\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": {\r\n         *       \"url\": \"data.json\",\r\n         *       \"type\": \"POST\"\r\n         *     }\r\n         *   } );\r\n         *\r\n         * @example\r\n         *   // Get the data from localStorage (could interface with a form for\r\n         *   // adding, editing and removing rows).\r\n         *   $('#example').dataTable( {\r\n         *     \"ajax\": function (data, callback, settings) {\r\n         *       callback(\r\n         *         JSON.parse( localStorage.getItem('dataTablesData') )\r\n         *       );\r\n         *     }\r\n         *   } );\r\n         */\r\n        \"ajax\": null,\r\n    \r\n    \r\n        /**\r\n         * This parameter allows you to readily specify the entries in the length drop\r\n         * down menu that DataTables shows when pagination is enabled. It can be\r\n         * either a 1D array of options which will be used for both the displayed\r\n         * option and the value, or a 2D array which will use the array in the first\r\n         * position as the value, and the array in the second position as the\r\n         * displayed options (useful for language strings such as 'All').\r\n         *\r\n         * Note that the `pageLength` property will be automatically set to the\r\n         * first value given in this array, unless `pageLength` is also provided.\r\n         *  @type array\r\n         *  @default [ 10, 25, 50, 100 ]\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.lengthMenu\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"aLengthMenu\": [ 10, 25, 50, 100 ],\r\n    \r\n    \r\n        /**\r\n         * The `columns` option in the initialisation parameter allows you to define\r\n         * details about the way individual columns behave. For a full list of\r\n         * column options that can be set, please see\r\n         * {@link DataTable.defaults.column}. Note that if you use `columns` to\r\n         * define your columns, you must have an entry in the array for every single\r\n         * column that you have in your table (these can be null if you don't which\r\n         * to specify any options).\r\n         *  @member\r\n         *\r\n         *  @name DataTable.defaults.column\r\n         */\r\n        \"aoColumns\": null,\r\n    \r\n        /**\r\n         * Very similar to `columns`, `columnDefs` allows you to target a specific\r\n         * column, multiple columns, or all columns, using the `targets` property of\r\n         * each object in the array. This allows great flexibility when creating\r\n         * tables, as the `columnDefs` arrays can be of any length, targeting the\r\n         * columns you specifically want. `columnDefs` may use any of the column\r\n         * options available: {@link DataTable.defaults.column}, but it _must_\r\n         * have `targets` defined in each object in the array. Values in the `targets`\r\n         * array may be:\r\n         *   <ul>\r\n         *     <li>a string - class name will be matched on the TH for the column</li>\r\n         *     <li>0 or a positive integer - column index counting from the left</li>\r\n         *     <li>a negative integer - column index counting from the right</li>\r\n         *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\r\n         *   </ul>\r\n         *  @member\r\n         *\r\n         *  @name DataTable.defaults.columnDefs\r\n         */\r\n        \"aoColumnDefs\": null,\r\n    \r\n    \r\n        /**\r\n         * Basically the same as `search`, this parameter defines the individual column\r\n         * filtering state at initialisation time. The array must be of the same size\r\n         * as the number of columns, and each element be an object with the parameters\r\n         * `search` and `escapeRegex` (the latter is optional). 'null' is also\r\n         * accepted and the default will be used.\r\n         *  @type array\r\n         *  @default []\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.searchCols\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"searchCols\": [\r\n         *          null,\r\n         *          { \"search\": \"My filter\" },\r\n         *          null,\r\n         *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\r\n         *        ]\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"aoSearchCols\": [],\r\n    \r\n    \r\n        /**\r\n         * An array of CSS classes that should be applied to displayed rows. This\r\n         * array may be of any length, and DataTables will apply each class\r\n         * sequentially, looping when required.\r\n         *  @type array\r\n         *  @default null <i>Will take the values determined by the `oClasses.stripe*`\r\n         *    options</i>\r\n         *\r\n         *  @dtopt Option\r\n         *  @name DataTable.defaults.stripeClasses\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"asStripeClasses\": null,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable automatic column width calculation. This can be disabled\r\n         * as an optimisation (it takes some time to calculate the widths) if the\r\n         * tables widths are passed in using `columns`.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.autoWidth\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"autoWidth\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bAutoWidth\": true,\r\n    \r\n    \r\n        /**\r\n         * Deferred rendering can provide DataTables with a huge speed boost when you\r\n         * are using an Ajax or JS data source for the table. This option, when set to\r\n         * true, will cause DataTables to defer the creation of the table elements for\r\n         * each row until they are needed for a draw - saving a significant amount of\r\n         * time.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.deferRender\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"ajax\": \"sources/arrays.txt\",\r\n         *        \"deferRender\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bDeferRender\": false,\r\n    \r\n    \r\n        /**\r\n         * Replace a DataTable which matches the given selector and replace it with\r\n         * one which has the properties of the new initialisation object passed. If no\r\n         * table matches the selector, then the new DataTable will be constructed as\r\n         * per normal.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.destroy\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"srollY\": \"200px\",\r\n         *        \"paginate\": false\r\n         *      } );\r\n         *\r\n         *      // Some time later....\r\n         *      $('#example').dataTable( {\r\n         *        \"filter\": false,\r\n         *        \"destroy\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bDestroy\": false,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\r\n         * that it allows the end user to input multiple words (space separated) and\r\n         * will match a row containing those words, even if not in the order that was\r\n         * specified (this allow matching across multiple columns). Note that if you\r\n         * wish to use filtering in DataTables this must remain 'true' - to remove the\r\n         * default filtering input box and retain filtering abilities, please use\r\n         * {@link DataTable.defaults.dom}.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.searching\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"searching\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bFilter\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable the table information display. This shows information\r\n         * about the data that is currently visible on the page, including information\r\n         * about filtered data if that action is being performed.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.info\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"info\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bInfo\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\r\n         * slightly different and additional mark-up from what DataTables has\r\n         * traditionally used).\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.jQueryUI\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"jQueryUI\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bJQueryUI\": false,\r\n    \r\n    \r\n        /**\r\n         * Allows the end user to select the size of a formatted page from a select\r\n         * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.lengthChange\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"lengthChange\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bLengthChange\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable pagination.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.paging\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"paging\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bPaginate\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable the display of a 'processing' indicator when the table is\r\n         * being processed (e.g. a sort). This is particularly useful for tables with\r\n         * large amounts of data where it can take a noticeable amount of time to sort\r\n         * the entries.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.processing\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"processing\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bProcessing\": false,\r\n    \r\n    \r\n        /**\r\n         * Retrieve the DataTables object for the given selector. Note that if the\r\n         * table has already been initialised, this parameter will cause DataTables\r\n         * to simply return the object that has already been set up - it will not take\r\n         * account of any changes you might have made to the initialisation object\r\n         * passed to DataTables (setting this parameter to true is an acknowledgement\r\n         * that you understand this). `destroy` can be used to reinitialise a table if\r\n         * you need.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.retrieve\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      initTable();\r\n         *      tableActions();\r\n         *    } );\r\n         *\r\n         *    function initTable ()\r\n         *    {\r\n         *      return $('#example').dataTable( {\r\n         *        \"scrollY\": \"200px\",\r\n         *        \"paginate\": false,\r\n         *        \"retrieve\": true\r\n         *      } );\r\n         *    }\r\n         *\r\n         *    function tableActions ()\r\n         *    {\r\n         *      var table = initTable();\r\n         *      // perform API operations with oTable\r\n         *    }\r\n         */\r\n        \"bRetrieve\": false,\r\n    \r\n    \r\n        /**\r\n         * When vertical (y) scrolling is enabled, DataTables will force the height of\r\n         * the table's viewport to the given height at all times (useful for layout).\r\n         * However, this can look odd when filtering data down to a small data set,\r\n         * and the footer is left \"floating\" further down. This parameter (when\r\n         * enabled) will cause DataTables to collapse the table's viewport down when\r\n         * the result set will fit within the given Y height.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.scrollCollapse\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"scrollY\": \"200\",\r\n         *        \"scrollCollapse\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bScrollCollapse\": false,\r\n    \r\n    \r\n        /**\r\n         * Configure DataTables to use server-side processing. Note that the\r\n         * `ajax` parameter must also be given in order to give DataTables a\r\n         * source to obtain the required data for each draw.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Features\r\n         *  @dtopt Server-side\r\n         *  @name DataTable.defaults.serverSide\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"serverSide\": true,\r\n         *        \"ajax\": \"xhr.php\"\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bServerSide\": false,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable sorting of columns. Sorting of individual columns can be\r\n         * disabled by the `sortable` option for each column.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.ordering\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"ordering\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bSort\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or display DataTables' ability to sort multiple columns at the\r\n         * same time (activated by shift-click by the user).\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.orderMulti\r\n         *\r\n         *  @example\r\n         *    // Disable multiple column sorting ability\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"orderMulti\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bSortMulti\": true,\r\n    \r\n    \r\n        /**\r\n         * Allows control over whether DataTables should use the top (true) unique\r\n         * cell that is found for a single column, or the bottom (false - default).\r\n         * This is useful when using complex headers.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.orderCellsTop\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"orderCellsTop\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bSortCellsTop\": false,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\r\n         * `sorting\\_3` to the columns which are currently being sorted on. This is\r\n         * presented as a feature switch as it can increase processing time (while\r\n         * classes are removed and added) so for large data sets you might want to\r\n         * turn this off.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.orderClasses\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"orderClasses\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bSortClasses\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable state saving. When enabled HTML5 `localStorage` will be\r\n         * used to save table display information such as pagination information,\r\n         * display length, filtering and sorting. As such when the end user reloads\r\n         * the page the display display will match what thy had previously set up.\r\n         *\r\n         * Due to the use of `localStorage` the default state saving is not supported\r\n         * in IE6 or 7. If state saving is required in those browsers, use\r\n         * `stateSaveCallback` to provide a storage solution such as cookies.\r\n         *  @type boolean\r\n         *  @default false\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.stateSave\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function () {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"bStateSave\": false,\r\n    \r\n    \r\n        /**\r\n         * This function is called when a TR element is created (and all TD child\r\n         * elements have been inserted), or registered if using a DOM source, allowing\r\n         * manipulation of the TR element (adding classes etc).\r\n         *  @type function\r\n         *  @param {node} row \"TR\" element for the current row\r\n         *  @param {array} data Raw data array for this row\r\n         *  @param {int} dataIndex The index of this row in the internal aoData array\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.createdRow\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"createdRow\": function( row, data, dataIndex ) {\r\n         *          // Bold the grade for all 'A' grade browsers\r\n         *          if ( data[4] == \"A\" )\r\n         *          {\r\n         *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n         *          }\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnCreatedRow\": null,\r\n    \r\n    \r\n        /**\r\n         * This function is called on every 'draw' event, and allows you to\r\n         * dynamically modify any aspect you want about the created DOM.\r\n         *  @type function\r\n         *  @param {object} settings DataTables settings object\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.drawCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"drawCallback\": function( settings ) {\r\n         *          alert( 'DataTables has redrawn the table' );\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnDrawCallback\": null,\r\n    \r\n    \r\n        /**\r\n         * Identical to fnHeaderCallback() but for the table footer this function\r\n         * allows you to modify the table footer on every 'draw' event.\r\n         *  @type function\r\n         *  @param {node} foot \"TR\" element for the footer\r\n         *  @param {array} data Full table data (as derived from the original HTML)\r\n         *  @param {int} start Index for the current display starting point in the\r\n         *    display array\r\n         *  @param {int} end Index for the current display ending point in the\r\n         *    display array\r\n         *  @param {array int} display Index array to translate the visual position\r\n         *    to the full data array\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.footerCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"footerCallback\": function( tfoot, data, start, end, display ) {\r\n         *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\r\n         *        }\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"fnFooterCallback\": null,\r\n    \r\n    \r\n        /**\r\n         * When rendering large numbers in the information element for the table\r\n         * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\r\n         * to have a comma separator for the 'thousands' units (e.g. 1 million is\r\n         * rendered as \"1,000,000\") to help readability for the end user. This\r\n         * function will override the default method DataTables uses.\r\n         *  @type function\r\n         *  @member\r\n         *  @param {int} toFormat number to be formatted\r\n         *  @returns {string} formatted string for DataTables to show the number\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.formatNumber\r\n         *\r\n         *  @example\r\n         *    // Format a number using a single quote for the separator (note that\r\n         *    // this can also be done with the language.thousands option)\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"formatNumber\": function ( toFormat ) {\r\n         *          return toFormat.toString().replace(\r\n         *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\r\n         *          );\r\n         *        };\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnFormatNumber\": function ( toFormat ) {\r\n            return toFormat.toString().replace(\r\n                /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                this.oLanguage.sThousands\r\n            );\r\n        },\r\n    \r\n    \r\n        /**\r\n         * This function is called on every 'draw' event, and allows you to\r\n         * dynamically modify the header row. This can be used to calculate and\r\n         * display useful information about the table.\r\n         *  @type function\r\n         *  @param {node} head \"TR\" element for the header\r\n         *  @param {array} data Full table data (as derived from the original HTML)\r\n         *  @param {int} start Index for the current display starting point in the\r\n         *    display array\r\n         *  @param {int} end Index for the current display ending point in the\r\n         *    display array\r\n         *  @param {array int} display Index array to translate the visual position\r\n         *    to the full data array\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.headerCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"fheaderCallback\": function( head, data, start, end, display ) {\r\n         *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\r\n         *        }\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"fnHeaderCallback\": null,\r\n    \r\n    \r\n        /**\r\n         * The information element can be used to convey information about the current\r\n         * state of the table. Although the internationalisation options presented by\r\n         * DataTables are quite capable of dealing with most customisations, there may\r\n         * be times where you wish to customise the string further. This callback\r\n         * allows you to do exactly that.\r\n         *  @type function\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {int} start Starting position in data for the draw\r\n         *  @param {int} end End position in data for the draw\r\n         *  @param {int} max Total number of rows in the table (regardless of\r\n         *    filtering)\r\n         *  @param {int} total Total number of rows in the data set, after filtering\r\n         *  @param {string} pre The string that DataTables has formatted using it's\r\n         *    own rules\r\n         *  @returns {string} The string to be displayed in the information element.\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.infoCallback\r\n         *\r\n         *  @example\r\n         *    $('#example').dataTable( {\r\n         *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n         *        return start +\" to \"+ end;\r\n         *      }\r\n         *    } );\r\n         */\r\n        \"fnInfoCallback\": null,\r\n    \r\n    \r\n        /**\r\n         * Called when the table has been initialised. Normally DataTables will\r\n         * initialise sequentially and there will be no need for this function,\r\n         * however, this does not hold true when using external language information\r\n         * since that is obtained using an async XHR call.\r\n         *  @type function\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {object} json The JSON object request from the server - only\r\n         *    present if client-side Ajax sourced data is used\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.initComplete\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"initComplete\": function(settings, json) {\r\n         *          alert( 'DataTables has finished its initialisation.' );\r\n         *        }\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"fnInitComplete\": null,\r\n    \r\n    \r\n        /**\r\n         * Called at the very start of each table draw and can be used to cancel the\r\n         * draw by returning false, any other return (including undefined) results in\r\n         * the full draw occurring).\r\n         *  @type function\r\n         *  @param {object} settings DataTables settings object\r\n         *  @returns {boolean} False will cancel the draw, anything else (including no\r\n         *    return) will allow it to complete.\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.preDrawCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"preDrawCallback\": function( settings ) {\r\n         *          if ( $('#test').val() == 1 ) {\r\n         *            return false;\r\n         *          }\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnPreDrawCallback\": null,\r\n    \r\n    \r\n        /**\r\n         * This function allows you to 'post process' each row after it have been\r\n         * generated for each table draw, but before it is rendered on screen. This\r\n         * function might be used for setting the row class name etc.\r\n         *  @type function\r\n         *  @param {node} row \"TR\" element for the current row\r\n         *  @param {array} data Raw data array for this row\r\n         *  @param {int} displayIndex The display index for the current table draw\r\n         *  @param {int} displayIndexFull The index of the data in the full list of\r\n         *    rows (after filtering)\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.rowCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\r\n         *          // Bold the grade for all 'A' grade browsers\r\n         *          if ( data[4] == \"A\" ) {\r\n         *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n         *          }\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnRowCallback\": null,\r\n    \r\n    \r\n        /**\r\n         * __Deprecated__ The functionality provided by this parameter has now been\r\n         * superseded by that provided through `ajax`, which should be used instead.\r\n         *\r\n         * This parameter allows you to override the default function which obtains\r\n         * the data from the server so something more suitable for your application.\r\n         * For example you could use POST data, or pull information from a Gears or\r\n         * AIR database.\r\n         *  @type function\r\n         *  @member\r\n         *  @param {string} source HTTP source to obtain the data from (`ajax`)\r\n         *  @param {array} data A key/value pair object containing the data to send\r\n         *    to the server\r\n         *  @param {function} callback to be called on completion of the data get\r\n         *    process that will draw the data on the page.\r\n         *  @param {object} settings DataTables settings object\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @dtopt Server-side\r\n         *  @name DataTable.defaults.serverData\r\n         *\r\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n         */\r\n        \"fnServerData\": null,\r\n    \r\n    \r\n        /**\r\n         * __Deprecated__ The functionality provided by this parameter has now been\r\n         * superseded by that provided through `ajax`, which should be used instead.\r\n         *\r\n         *  It is often useful to send extra data to the server when making an Ajax\r\n         * request - for example custom filtering information, and this callback\r\n         * function makes it trivial to send extra information to the server. The\r\n         * passed in parameter is the data set that has been constructed by\r\n         * DataTables, and you can add to this or modify it as you require.\r\n         *  @type function\r\n         *  @param {array} data Data array (array of objects which are name/value\r\n         *    pairs) that has been constructed by DataTables and will be sent to the\r\n         *    server. In the case of Ajax sourced data with server-side processing\r\n         *    this will be an empty array, for server-side processing there will be a\r\n         *    significant number of parameters!\r\n         *  @returns {undefined} Ensure that you modify the data array passed in,\r\n         *    as this is passed by reference.\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @dtopt Server-side\r\n         *  @name DataTable.defaults.serverParams\r\n         *\r\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n         */\r\n        \"fnServerParams\": null,\r\n    \r\n    \r\n        /**\r\n         * Load the table state. With this function you can define from where, and how, the\r\n         * state of a table is loaded. By default DataTables will load from `localStorage`\r\n         * but you might wish to use a server-side database or cookies.\r\n         *  @type function\r\n         *  @member\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {object} callback Callback that can be executed when done. It\r\n         *    should be passed the loaded state object.\r\n         *  @return {object} The DataTables state object to be loaded\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.stateLoadCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true,\r\n         *        \"stateLoadCallback\": function (settings, callback) {\r\n         *          $.ajax( {\r\n         *            \"url\": \"/state_load\",\r\n         *            \"dataType\": \"json\",\r\n         *            \"success\": function (json) {\r\n         *              callback( json );\r\n         *            }\r\n         *          } );\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnStateLoadCallback\": function ( settings ) {\r\n            try {\r\n                return JSON.parse(\r\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\r\n                        'DataTables_'+settings.sInstance+'_'+location.pathname\r\n                    )\r\n                );\r\n            } catch (e) {}\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Callback which allows modification of the saved state prior to loading that state.\r\n         * This callback is called when the table is loading state from the stored data, but\r\n         * prior to the settings object being modified by the saved state. Note that for\r\n         * plug-in authors, you should use the `stateLoadParams` event to load parameters for\r\n         * a plug-in.\r\n         *  @type function\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {object} data The state object that is to be loaded\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.stateLoadParams\r\n         *\r\n         *  @example\r\n         *    // Remove a saved filter, so filtering is never loaded\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true,\r\n         *        \"stateLoadParams\": function (settings, data) {\r\n         *          data.oSearch.sSearch = \"\";\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Disallow state loading by returning false\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true,\r\n         *        \"stateLoadParams\": function (settings, data) {\r\n         *          return false;\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnStateLoadParams\": null,\r\n    \r\n    \r\n        /**\r\n         * Callback that is called when the state has been loaded from the state saving method\r\n         * and the DataTables settings object has been modified as a result of the loaded state.\r\n         *  @type function\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {object} data The state object that was loaded\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.stateLoaded\r\n         *\r\n         *  @example\r\n         *    // Show an alert with the filtering value that was saved\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true,\r\n         *        \"stateLoaded\": function (settings, data) {\r\n         *          alert( 'Saved filter was: '+data.oSearch.sSearch );\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnStateLoaded\": null,\r\n    \r\n    \r\n        /**\r\n         * Save the table state. This function allows you to define where and how the state\r\n         * information for the table is stored By default DataTables will use `localStorage`\r\n         * but you might wish to use a server-side database or cookies.\r\n         *  @type function\r\n         *  @member\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {object} data The state object to be saved\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.stateSaveCallback\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true,\r\n         *        \"stateSaveCallback\": function (settings, data) {\r\n         *          // Send an Ajax request to the server with the state object\r\n         *          $.ajax( {\r\n         *            \"url\": \"/state_save\",\r\n         *            \"data\": data,\r\n         *            \"dataType\": \"json\",\r\n         *            \"method\": \"POST\"\r\n         *            \"success\": function () {}\r\n         *          } );\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnStateSaveCallback\": function ( settings, data ) {\r\n            try {\r\n                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\r\n                    'DataTables_'+settings.sInstance+'_'+location.pathname,\r\n                    JSON.stringify( data )\r\n                );\r\n            } catch (e) {}\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Callback which allows modification of the state to be saved. Called when the table\r\n         * has changed state a new state save is required. This method allows modification of\r\n         * the state saving object prior to actually doing the save, including addition or\r\n         * other state properties or modification. Note that for plug-in authors, you should\r\n         * use the `stateSaveParams` event to save parameters for a plug-in.\r\n         *  @type function\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {object} data The state object to be saved\r\n         *\r\n         *  @dtopt Callbacks\r\n         *  @name DataTable.defaults.stateSaveParams\r\n         *\r\n         *  @example\r\n         *    // Remove a saved filter, so filtering is never saved\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateSave\": true,\r\n         *        \"stateSaveParams\": function (settings, data) {\r\n         *          data.oSearch.sSearch = \"\";\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"fnStateSaveParams\": null,\r\n    \r\n    \r\n        /**\r\n         * Duration for which the saved state information is considered valid. After this period\r\n         * has elapsed the state will be returned to the default.\r\n         * Value is given in seconds.\r\n         *  @type int\r\n         *  @default 7200 <i>(2 hours)</i>\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.stateDuration\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"stateDuration\": 60*60*24; // 1 day\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"iStateDuration\": 7200,\r\n    \r\n    \r\n        /**\r\n         * When enabled DataTables will not make a request to the server for the first\r\n         * page draw - rather it will use the data already on the page (no sorting etc\r\n         * will be applied to it), thus saving on an XHR at load time. `deferLoading`\r\n         * is used to indicate that deferred loading is required, but it is also used\r\n         * to tell DataTables how many records there are in the full table (allowing\r\n         * the information element and pagination to be displayed correctly). In the case\r\n         * where a filtering is applied to the table on initial load, this can be\r\n         * indicated by giving the parameter as an array, where the first element is\r\n         * the number of records available after filtering and the second element is the\r\n         * number of records without filtering (allowing the table information element\r\n         * to be shown correctly).\r\n         *  @type int | array\r\n         *  @default null\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.deferLoading\r\n         *\r\n         *  @example\r\n         *    // 57 records available in the table, no filtering applied\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"serverSide\": true,\r\n         *        \"ajax\": \"scripts/server_processing.php\",\r\n         *        \"deferLoading\": 57\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // 57 records after filtering, 100 without filtering (an initial filter applied)\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"serverSide\": true,\r\n         *        \"ajax\": \"scripts/server_processing.php\",\r\n         *        \"deferLoading\": [ 57, 100 ],\r\n         *        \"search\": {\r\n         *          \"search\": \"my_filter\"\r\n         *        }\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"iDeferLoading\": null,\r\n    \r\n    \r\n        /**\r\n         * Number of rows to display on a single page when using pagination. If\r\n         * feature enabled (`lengthChange`) then the end user will be able to override\r\n         * this to a custom setting using a pop-up menu.\r\n         *  @type int\r\n         *  @default 10\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.pageLength\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"pageLength\": 50\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"iDisplayLength\": 10,\r\n    \r\n    \r\n        /**\r\n         * Define the starting point for data display when using DataTables with\r\n         * pagination. Note that this parameter is the number of records, rather than\r\n         * the page number, so if you have 10 records per page and want to start on\r\n         * the third page, it should be \"20\".\r\n         *  @type int\r\n         *  @default 0\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.displayStart\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"displayStart\": 20\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"iDisplayStart\": 0,\r\n    \r\n    \r\n        /**\r\n         * By default DataTables allows keyboard navigation of the table (sorting, paging,\r\n         * and filtering) by adding a `tabindex` attribute to the required elements. This\r\n         * allows you to tab through the controls and press the enter key to activate them.\r\n         * The tabindex is default 0, meaning that the tab follows the flow of the document.\r\n         * You can overrule this using this parameter if you wish. Use a value of -1 to\r\n         * disable built-in keyboard navigation.\r\n         *  @type int\r\n         *  @default 0\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.tabIndex\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"tabIndex\": 1\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"iTabIndex\": 0,\r\n    \r\n    \r\n        /**\r\n         * Classes that DataTables assigns to the various components and features\r\n         * that it adds to the HTML table. This allows classes to be configured\r\n         * during initialisation in addition to through the static\r\n         * {@link DataTable.ext.oStdClasses} object).\r\n         *  @namespace\r\n         *  @name DataTable.defaults.classes\r\n         */\r\n        \"oClasses\": {},\r\n    \r\n    \r\n        /**\r\n         * All strings that DataTables uses in the user interface that it creates\r\n         * are defined in this object, allowing you to modified them individually or\r\n         * completely replace them all as required.\r\n         *  @namespace\r\n         *  @name DataTable.defaults.language\r\n         */\r\n        \"oLanguage\": {\r\n            /**\r\n             * Strings that are used for WAI-ARIA labels and controls only (these are not\r\n             * actually visible on the page, but will be read by screenreaders, and thus\r\n             * must be internationalised as well).\r\n             *  @namespace\r\n             *  @name DataTable.defaults.language.aria\r\n             */\r\n            \"oAria\": {\r\n                /**\r\n                 * ARIA label that is added to the table headers when the column may be\r\n                 * sorted ascending by activing the column (click or return when focused).\r\n                 * Note that the column header is prefixed to this string.\r\n                 *  @type string\r\n                 *  @default : activate to sort column ascending\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.aria.sortAscending\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"aria\": {\r\n                 *            \"sortAscending\": \" - click/return to sort ascending\"\r\n                 *          }\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sSortAscending\": \": activate to sort column ascending\",\r\n    \r\n                /**\r\n                 * ARIA label that is added to the table headers when the column may be\r\n                 * sorted descending by activing the column (click or return when focused).\r\n                 * Note that the column header is prefixed to this string.\r\n                 *  @type string\r\n                 *  @default : activate to sort column ascending\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.aria.sortDescending\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"aria\": {\r\n                 *            \"sortDescending\": \" - click/return to sort descending\"\r\n                 *          }\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sSortDescending\": \": activate to sort column descending\"\r\n            },\r\n    \r\n            /**\r\n             * Pagination string used by DataTables for the built-in pagination\r\n             * control types.\r\n             *  @namespace\r\n             *  @name DataTable.defaults.language.paginate\r\n             */\r\n            \"oPaginate\": {\r\n                /**\r\n                 * Text to use when using the 'full_numbers' type of pagination for the\r\n                 * button to take the user to the first page.\r\n                 *  @type string\r\n                 *  @default First\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.paginate.first\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"paginate\": {\r\n                 *            \"first\": \"First page\"\r\n                 *          }\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sFirst\": \"First\",\r\n    \r\n    \r\n                /**\r\n                 * Text to use when using the 'full_numbers' type of pagination for the\r\n                 * button to take the user to the last page.\r\n                 *  @type string\r\n                 *  @default Last\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.paginate.last\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"paginate\": {\r\n                 *            \"last\": \"Last page\"\r\n                 *          }\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sLast\": \"Last\",\r\n    \r\n    \r\n                /**\r\n                 * Text to use for the 'next' pagination button (to take the user to the\r\n                 * next page).\r\n                 *  @type string\r\n                 *  @default Next\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.paginate.next\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"paginate\": {\r\n                 *            \"next\": \"Next page\"\r\n                 *          }\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sNext\": \"Next\",\r\n    \r\n    \r\n                /**\r\n                 * Text to use for the 'previous' pagination button (to take the user to\r\n                 * the previous page).\r\n                 *  @type string\r\n                 *  @default Previous\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.paginate.previous\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n                 *      $('#example').dataTable( {\r\n                 *        \"language\": {\r\n                 *          \"paginate\": {\r\n                 *            \"previous\": \"Previous page\"\r\n                 *          }\r\n                 *        }\r\n                 *      } );\r\n                 *    } );\r\n                 */\r\n                \"sPrevious\": \"Previous\"\r\n            },\r\n    \r\n            /**\r\n             * This string is shown in preference to `zeroRecords` when the table is\r\n             * empty of data (regardless of filtering). Note that this is an optional\r\n             * parameter - if it is not given, the value of `zeroRecords` will be used\r\n             * instead (either the default or given value).\r\n             *  @type string\r\n             *  @default No data available in table\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.emptyTable\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"emptyTable\": \"No data available in table\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sEmptyTable\": \"No data available in table\",\r\n    \r\n    \r\n            /**\r\n             * This string gives information to the end user about the information\r\n             * that is current on display on the page. The following tokens can be\r\n             * used in the string and will be dynamically replaced as the table\r\n             * display updates. This tokens can be placed anywhere in the string, or\r\n             * removed as needed by the language requires:\r\n             *\r\n             * * `\\_START\\_` - Display index of the first record on the current page\r\n             * * `\\_END\\_` - Display index of the last record on the current page\r\n             * * `\\_TOTAL\\_` - Number of records in the table after filtering\r\n             * * `\\_MAX\\_` - Number of records in the table without filtering\r\n             * * `\\_PAGE\\_` - Current page number\r\n             * * `\\_PAGES\\_` - Total number of pages of data in the table\r\n             *\r\n             *  @type string\r\n             *  @default Showing _START_ to _END_ of _TOTAL_ entries\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.info\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\r\n    \r\n    \r\n            /**\r\n             * Display information string for when the table is empty. Typically the\r\n             * format of this string should match `info`.\r\n             *  @type string\r\n             *  @default Showing 0 to 0 of 0 entries\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.infoEmpty\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"infoEmpty\": \"No entries to show\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\r\n    \r\n    \r\n            /**\r\n             * When a user filters the information in a table, this string is appended\r\n             * to the information (`info`) to give an idea of how strong the filtering\r\n             * is. The variable _MAX_ is dynamically updated.\r\n             *  @type string\r\n             *  @default (filtered from _MAX_ total entries)\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.infoFiltered\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"infoFiltered\": \" - filtering from _MAX_ records\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\r\n    \r\n    \r\n            /**\r\n             * If can be useful to append extra information to the info string at times,\r\n             * and this variable does exactly that. This information will be appended to\r\n             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\r\n             * being used) at all times.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.infoPostFix\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"infoPostFix\": \"All records shown are derived from real information.\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sInfoPostFix\": \"\",\r\n    \r\n    \r\n            /**\r\n             * This decimal place operator is a little different from the other\r\n             * language options since DataTables doesn't output floating point\r\n             * numbers, so it won't ever use this for display of a number. Rather,\r\n             * what this parameter does is modify the sort methods of the table so\r\n             * that numbers which are in a format which has a character other than\r\n             * a period (`.`) as a decimal place will be sorted numerically.\r\n             *\r\n             * Note that numbers with different decimal places cannot be shown in\r\n             * the same table and still be sortable, the table must be consistent.\r\n             * However, multiple different tables on the page can use different\r\n             * decimal place characters.\r\n             *  @type string\r\n             *  @default \r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.decimal\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"decimal\": \",\"\r\n             *          \"thousands\": \".\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sDecimal\": \"\",\r\n    \r\n    \r\n            /**\r\n             * DataTables has a build in number formatter (`formatNumber`) which is\r\n             * used to format large numbers that are used in the table information.\r\n             * By default a comma is used, but this can be trivially changed to any\r\n             * character you wish with this parameter.\r\n             *  @type string\r\n             *  @default ,\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.thousands\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"thousands\": \"'\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sThousands\": \",\",\r\n    \r\n    \r\n            /**\r\n             * Detail the action that will be taken when the drop down menu for the\r\n             * pagination length option is changed. The '_MENU_' variable is replaced\r\n             * with a default select list of 10, 25, 50 and 100, and can be replaced\r\n             * with a custom select box if required.\r\n             *  @type string\r\n             *  @default Show _MENU_ entries\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.lengthMenu\r\n             *\r\n             *  @example\r\n             *    // Language change only\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"lengthMenu\": \"Display _MENU_ records\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Language and options change\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"lengthMenu\": 'Display <select>'+\r\n             *            '<option value=\"10\">10</option>'+\r\n             *            '<option value=\"20\">20</option>'+\r\n             *            '<option value=\"30\">30</option>'+\r\n             *            '<option value=\"40\">40</option>'+\r\n             *            '<option value=\"50\">50</option>'+\r\n             *            '<option value=\"-1\">All</option>'+\r\n             *            '</select> records'\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sLengthMenu\": \"Show _MENU_ entries\",\r\n    \r\n    \r\n            /**\r\n             * When using Ajax sourced data and during the first draw when DataTables is\r\n             * gathering the data, this message is shown in an empty row in the table to\r\n             * indicate to the end user the the data is being loaded. Note that this\r\n             * parameter is not used when loading data by server-side processing, just\r\n             * Ajax sourced data with client-side processing.\r\n             *  @type string\r\n             *  @default Loading...\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.loadingRecords\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"loadingRecords\": \"Please wait - loading...\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sLoadingRecords\": \"Loading...\",\r\n    \r\n    \r\n            /**\r\n             * Text which is displayed when the table is processing a user action\r\n             * (usually a sort command or similar).\r\n             *  @type string\r\n             *  @default Processing...\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.processing\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"processing\": \"DataTables is currently busy\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sProcessing\": \"Processing...\",\r\n    \r\n    \r\n            /**\r\n             * Details the actions that will be taken when the user types into the\r\n             * filtering input text box. The variable \"_INPUT_\", if used in the string,\r\n             * is replaced with the HTML text box for the filtering input allowing\r\n             * control over where it appears in the string. If \"_INPUT_\" is not given\r\n             * then the input box is appended to the string automatically.\r\n             *  @type string\r\n             *  @default Search:\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.search\r\n             *\r\n             *  @example\r\n             *    // Input text box will be appended at the end automatically\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"search\": \"Filter records:\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Specify where the filter should appear\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"search\": \"Apply filter _INPUT_ to table\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sSearch\": \"Search:\",\r\n    \r\n    \r\n            /**\r\n             * Assign a `placeholder` attribute to the search `input` element\r\n             *  @type string\r\n             *  @default \r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.searchPlaceholder\r\n             */\r\n            \"sSearchPlaceholder\": \"\",\r\n    \r\n    \r\n            /**\r\n             * All of the language information can be stored in a file on the\r\n             * server-side, which DataTables will look up if this parameter is passed.\r\n             * It must store the URL of the language file, which is in a JSON format,\r\n             * and the object has the same properties as the oLanguage object in the\r\n             * initialiser object (i.e. the above parameters). Please refer to one of\r\n             * the example language files to see how this works in action.\r\n             *  @type string\r\n             *  @default <i>Empty string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.url\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sUrl\": \"\",\r\n    \r\n    \r\n            /**\r\n             * Text shown inside the table records when the is no information to be\r\n             * displayed after filtering. `emptyTable` is shown when there is simply no\r\n             * information in the table at all (regardless of filtering).\r\n             *  @type string\r\n             *  @default No matching records found\r\n             *\r\n             *  @dtopt Language\r\n             *  @name DataTable.defaults.language.zeroRecords\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n             *      $('#example').dataTable( {\r\n             *        \"language\": {\r\n             *          \"zeroRecords\": \"No records to display\"\r\n             *        }\r\n             *      } );\r\n             *    } );\r\n             */\r\n            \"sZeroRecords\": \"No matching records found\"\r\n        },\r\n    \r\n    \r\n        /**\r\n         * This parameter allows you to have define the global filtering state at\r\n         * initialisation time. As an object the `search` parameter must be\r\n         * defined, but all other parameters are optional. When `regex` is true,\r\n         * the search string will be treated as a regular expression, when false\r\n         * (default) it will be treated as a straight string. When `smart`\r\n         * DataTables will use it's smart filtering methods (to word match at\r\n         * any point in the data), when false this will not be done.\r\n         *  @namespace\r\n         *  @extends DataTable.models.oSearch\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.search\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"search\": {\"search\": \"Initial search\"}\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\r\n    \r\n    \r\n        /**\r\n         * __Deprecated__ The functionality provided by this parameter has now been\r\n         * superseded by that provided through `ajax`, which should be used instead.\r\n         *\r\n         * By default DataTables will look for the property `data` (or `aaData` for\r\n         * compatibility with DataTables 1.9-) when obtaining data from an Ajax\r\n         * source or for server-side processing - this parameter allows that\r\n         * property to be changed. You can use Javascript dotted object notation to\r\n         * get a data source for multiple levels of nesting.\r\n         *  @type string\r\n         *  @default data\r\n         *\r\n         *  @dtopt Options\r\n         *  @dtopt Server-side\r\n         *  @name DataTable.defaults.ajaxDataProp\r\n         *\r\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n         */\r\n        \"sAjaxDataProp\": \"data\",\r\n    \r\n    \r\n        /**\r\n         * __Deprecated__ The functionality provided by this parameter has now been\r\n         * superseded by that provided through `ajax`, which should be used instead.\r\n         *\r\n         * You can instruct DataTables to load data from an external\r\n         * source using this parameter (use aData if you want to pass data in you\r\n         * already have). Simply provide a url a JSON object can be obtained from.\r\n         *  @type string\r\n         *  @default null\r\n         *\r\n         *  @dtopt Options\r\n         *  @dtopt Server-side\r\n         *  @name DataTable.defaults.ajaxSource\r\n         *\r\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n         */\r\n        \"sAjaxSource\": null,\r\n    \r\n    \r\n        /**\r\n         * This initialisation variable allows you to specify exactly where in the\r\n         * DOM you want DataTables to inject the various controls it adds to the page\r\n         * (for example you might want the pagination controls at the top of the\r\n         * table). DIV elements (with or without a custom class) can also be added to\r\n         * aid styling. The follow syntax is used:\r\n         *   <ul>\r\n         *     <li>The following options are allowed:\r\n         *       <ul>\r\n         *         <li>'l' - Length changing</li>\r\n         *         <li>'f' - Filtering input</li>\r\n         *         <li>'t' - The table!</li>\r\n         *         <li>'i' - Information</li>\r\n         *         <li>'p' - Pagination</li>\r\n         *         <li>'r' - pRocessing</li>\r\n         *       </ul>\r\n         *     </li>\r\n         *     <li>The following constants are allowed:\r\n         *       <ul>\r\n         *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\r\n         *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\r\n         *       </ul>\r\n         *     </li>\r\n         *     <li>The following syntax is expected:\r\n         *       <ul>\r\n         *         <li>'&lt;' and '&gt;' - div elements</li>\r\n         *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\r\n         *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\r\n         *       </ul>\r\n         *     </li>\r\n         *     <li>Examples:\r\n         *       <ul>\r\n         *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\r\n         *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\r\n         *       </ul>\r\n         *     </li>\r\n         *   </ul>\r\n         *  @type string\r\n         *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\r\n         *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.dom\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sDom\": \"lfrtip\",\r\n    \r\n    \r\n        /**\r\n         * Search delay option. This will throttle full table searches that use the\r\n         * DataTables provided search input element (it does not effect calls to\r\n         * `dt-api search()`, providing a delay before the search is made.\r\n         *  @type integer\r\n         *  @default 0\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.searchDelay\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"searchDelay\": 200\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"searchDelay\": null,\r\n    \r\n    \r\n        /**\r\n         * DataTables features six different built-in options for the buttons to\r\n         * display for pagination control:\r\n         *\r\n         * * `numbers` - Page number buttons only\r\n         * * `simple` - 'Previous' and 'Next' buttons only\r\n         * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\r\n         * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\r\n         * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\r\n         * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\r\n         *  \r\n         * Further methods can be added using {@link DataTable.ext.oPagination}.\r\n         *  @type string\r\n         *  @default simple_numbers\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.pagingType\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"pagingType\": \"full_numbers\"\r\n         *      } );\r\n         *    } )\r\n         */\r\n        \"sPaginationType\": \"simple_numbers\",\r\n    \r\n    \r\n        /**\r\n         * Enable horizontal scrolling. When a table is too wide to fit into a\r\n         * certain layout, or you have a large number of columns in the table, you\r\n         * can enable x-scrolling to show the table in a viewport, which can be\r\n         * scrolled. This property can be `true` which will allow the table to\r\n         * scroll horizontally when needed, or any CSS unit, or a number (in which\r\n         * case it will be treated as a pixel measurement). Setting as simply `true`\r\n         * is recommended.\r\n         *  @type boolean|string\r\n         *  @default <i>blank string - i.e. disabled</i>\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.scrollX\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"scrollX\": true,\r\n         *        \"scrollCollapse\": true\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sScrollX\": \"\",\r\n    \r\n    \r\n        /**\r\n         * This property can be used to force a DataTable to use more width than it\r\n         * might otherwise do when x-scrolling is enabled. For example if you have a\r\n         * table which requires to be well spaced, this parameter is useful for\r\n         * \"over-sizing\" the table, and thus forcing scrolling. This property can by\r\n         * any CSS unit, or a number (in which case it will be treated as a pixel\r\n         * measurement).\r\n         *  @type string\r\n         *  @default <i>blank string - i.e. disabled</i>\r\n         *\r\n         *  @dtopt Options\r\n         *  @name DataTable.defaults.scrollXInner\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"scrollX\": \"100%\",\r\n         *        \"scrollXInner\": \"110%\"\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sScrollXInner\": \"\",\r\n    \r\n    \r\n        /**\r\n         * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\r\n         * to the given height, and enable scrolling for any data which overflows the\r\n         * current viewport. This can be used as an alternative to paging to display\r\n         * a lot of data in a small area (although paging and scrolling can both be\r\n         * enabled at the same time). This property can be any CSS unit, or a number\r\n         * (in which case it will be treated as a pixel measurement).\r\n         *  @type string\r\n         *  @default <i>blank string - i.e. disabled</i>\r\n         *\r\n         *  @dtopt Features\r\n         *  @name DataTable.defaults.scrollY\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"scrollY\": \"200px\",\r\n         *        \"paginate\": false\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sScrollY\": \"\",\r\n    \r\n    \r\n        /**\r\n         * __Deprecated__ The functionality provided by this parameter has now been\r\n         * superseded by that provided through `ajax`, which should be used instead.\r\n         *\r\n         * Set the HTTP method that is used to make the Ajax call for server-side\r\n         * processing or Ajax sourced data.\r\n         *  @type string\r\n         *  @default GET\r\n         *\r\n         *  @dtopt Options\r\n         *  @dtopt Server-side\r\n         *  @name DataTable.defaults.serverMethod\r\n         *\r\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n         */\r\n        \"sServerMethod\": \"GET\",\r\n    \r\n    \r\n        /**\r\n         * DataTables makes use of renderers when displaying HTML elements for\r\n         * a table. These renderers can be added or modified by plug-ins to\r\n         * generate suitable mark-up for a site. For example the Bootstrap\r\n         * integration plug-in for DataTables uses a paging button renderer to\r\n         * display pagination buttons in the mark-up required by Bootstrap.\r\n         *\r\n         * For further information about the renderers available see\r\n         * DataTable.ext.renderer\r\n         *  @type string|object\r\n         *  @default null\r\n         *\r\n         *  @name DataTable.defaults.renderer\r\n         *\r\n         */\r\n        \"renderer\": null,\r\n    \r\n    \r\n        /**\r\n         * Set the data property name that DataTables should use to get a row's id\r\n         * to set as the `id` property in the node.\r\n         *  @type string\r\n         *  @default DT_RowId\r\n         *\r\n         *  @name DataTable.defaults.rowId\r\n         */\r\n        \"rowId\": \"DT_RowId\"\r\n    };\r\n    \r\n    _fnHungarianMap( DataTable.defaults );\r\n    \r\n    \r\n    \r\n    /*\r\n     * Developer note - See note in model.defaults.js about the use of Hungarian\r\n     * notation and camel case.\r\n     */\r\n    \r\n    /**\r\n     * Column options that can be given to DataTables at initialisation time.\r\n     *  @namespace\r\n     */\r\n    DataTable.defaults.column = {\r\n        /**\r\n         * Define which column(s) an order will occur on for this column. This\r\n         * allows a column's ordering to take multiple columns into account when\r\n         * doing a sort or use the data from a different column. For example first\r\n         * name / last name columns make sense to do a multi-column sort over the\r\n         * two columns.\r\n         *  @type array|int\r\n         *  @default null <i>Takes the value of the column index automatically</i>\r\n         *\r\n         *  @name DataTable.defaults.column.orderData\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\r\n         *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\r\n         *          { \"orderData\": 2, \"targets\": [ 2 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"orderData\": [ 0, 1 ] },\r\n         *          { \"orderData\": [ 1, 0 ] },\r\n         *          { \"orderData\": 2 },\r\n         *          null,\r\n         *          null\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"aDataSort\": null,\r\n        \"iDataSort\": -1,\r\n    \r\n    \r\n        /**\r\n         * You can control the default ordering direction, and even alter the\r\n         * behaviour of the sort handler (i.e. only allow ascending ordering etc)\r\n         * using this parameter.\r\n         *  @type array\r\n         *  @default [ 'asc', 'desc' ]\r\n         *\r\n         *  @name DataTable.defaults.column.orderSequence\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\r\n         *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\r\n         *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          null,\r\n         *          { \"orderSequence\": [ \"asc\" ] },\r\n         *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\r\n         *          { \"orderSequence\": [ \"desc\" ] },\r\n         *          null\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"asSorting\": [ 'asc', 'desc' ],\r\n    \r\n    \r\n        /**\r\n         * Enable or disable filtering on the data in this column.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @name DataTable.defaults.column.searchable\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"searchable\": false, \"targets\": [ 0 ] }\r\n         *        ] } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"searchable\": false },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ] } );\r\n         *    } );\r\n         */\r\n        \"bSearchable\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable ordering on this column.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @name DataTable.defaults.column.orderable\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"orderable\": false, \"targets\": [ 0 ] }\r\n         *        ] } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"orderable\": false },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ] } );\r\n         *    } );\r\n         */\r\n        \"bSortable\": true,\r\n    \r\n    \r\n        /**\r\n         * Enable or disable the display of this column.\r\n         *  @type boolean\r\n         *  @default true\r\n         *\r\n         *  @name DataTable.defaults.column.visible\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"visible\": false, \"targets\": [ 0 ] }\r\n         *        ] } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"visible\": false },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ] } );\r\n         *    } );\r\n         */\r\n        \"bVisible\": true,\r\n    \r\n    \r\n        /**\r\n         * Developer definable function that is called whenever a cell is created (Ajax source,\r\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n         * allowing you to modify the DOM element (add background colour for example) when the\r\n         * element is available.\r\n         *  @type function\r\n         *  @param {element} td The TD node that has been created\r\n         *  @param {*} cellData The Data for the cell\r\n         *  @param {array|object} rowData The data for the whole row\r\n         *  @param {int} row The row index for the aoData data store\r\n         *  @param {int} col The column index for aoColumns\r\n         *\r\n         *  @name DataTable.defaults.column.createdCell\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [3],\r\n         *          \"createdCell\": function (td, cellData, rowData, row, col) {\r\n         *            if ( cellData == \"1.7\" ) {\r\n         *              $(td).css('color', 'blue')\r\n         *            }\r\n         *          }\r\n         *        } ]\r\n         *      });\r\n         *    } );\r\n         */\r\n        \"fnCreatedCell\": null,\r\n    \r\n    \r\n        /**\r\n         * This parameter has been replaced by `data` in DataTables to ensure naming\r\n         * consistency. `dataProp` can still be used, as there is backwards\r\n         * compatibility in DataTables for this option, but it is strongly\r\n         * recommended that you use `data` in preference to `dataProp`.\r\n         *  @name DataTable.defaults.column.dataProp\r\n         */\r\n    \r\n    \r\n        /**\r\n         * This property can be used to read data from any data source property,\r\n         * including deeply nested objects / properties. `data` can be given in a\r\n         * number of different ways which effect its behaviour:\r\n         *\r\n         * * `integer` - treated as an array index for the data source. This is the\r\n         *   default that DataTables uses (incrementally increased for each column).\r\n         * * `string` - read an object property from the data source. There are\r\n         *   three 'special' options that can be used in the string to alter how\r\n         *   DataTables reads the data from the source object:\r\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n         *      Javascript to read from nested objects, so to can the options\r\n         *      specified in `data`. For example: `browser.version` or\r\n         *      `browser.name`. If your object parameter name contains a period, use\r\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n         *    * `[]` - Array notation. DataTables can automatically combine data\r\n         *      from and array source, joining the data with the characters provided\r\n         *      between the two brackets. For example: `name[, ]` would provide a\r\n         *      comma-space separated list from the source array. If no characters\r\n         *      are provided between the brackets, the original array source is\r\n         *      returned.\r\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n         *      execute a function of the name given. For example: `browser()` for a\r\n         *      simple function on the data source, `browser.version()` for a\r\n         *      function in a nested property or even `browser().version` to get an\r\n         *      object property if the function called returns an object. Note that\r\n         *      function notation is recommended for use in `render` rather than\r\n         *      `data` as it is much simpler to use as a renderer.\r\n         * * `null` - use the original data source for the row rather than plucking\r\n         *   data directly from it. This action has effects on two other\r\n         *   initialisation options:\r\n         *    * `defaultContent` - When null is given as the `data` option and\r\n         *      `defaultContent` is specified for the column, the value defined by\r\n         *      `defaultContent` will be used for the cell.\r\n         *    * `render` - When null is used for the `data` option and the `render`\r\n         *      option is specified for the column, the whole data source for the\r\n         *      row is used for the renderer.\r\n         * * `function` - the function given will be executed whenever DataTables\r\n         *   needs to set or get the data for a cell in the column. The function\r\n         *   takes three parameters:\r\n         *    * Parameters:\r\n         *      * `{array|object}` The data source for the row\r\n         *      * `{string}` The type call data requested - this will be 'set' when\r\n         *        setting data or 'filter', 'display', 'type', 'sort' or undefined\r\n         *        when gathering data. Note that when `undefined` is given for the\r\n         *        type DataTables expects to get the raw data for the object back<\r\n         *      * `{*}` Data to set when the second parameter is 'set'.\r\n         *    * Return:\r\n         *      * The return value from the function is not required when 'set' is\r\n         *        the type of call, but otherwise the return is what will be used\r\n         *        for the data requested.\r\n         *\r\n         * Note that `data` is a getter and setter option. If you just require\r\n         * formatting of data for output, you will likely want to use `render` which\r\n         * is simply a getter and thus simpler to use.\r\n         *\r\n         * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\r\n         * name change reflects the flexibility of this property and is consistent\r\n         * with the naming of mRender. If 'mDataProp' is given, then it will still\r\n         * be used by DataTables, as it automatically maps the old name to the new\r\n         * if required.\r\n         *\r\n         *  @type string|int|function|null\r\n         *  @default null <i>Use automatically calculated column index</i>\r\n         *\r\n         *  @name DataTable.defaults.column.data\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Read table data from objects\r\n         *    // JSON structure for each row:\r\n         *    //   {\r\n         *    //      \"engine\": {value},\r\n         *    //      \"browser\": {value},\r\n         *    //      \"platform\": {value},\r\n         *    //      \"version\": {value},\r\n         *    //      \"grade\": {value}\r\n         *    //   }\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"ajaxSource\": \"sources/objects.txt\",\r\n         *        \"columns\": [\r\n         *          { \"data\": \"engine\" },\r\n         *          { \"data\": \"browser\" },\r\n         *          { \"data\": \"platform\" },\r\n         *          { \"data\": \"version\" },\r\n         *          { \"data\": \"grade\" }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Read information from deeply nested objects\r\n         *    // JSON structure for each row:\r\n         *    //   {\r\n         *    //      \"engine\": {value},\r\n         *    //      \"browser\": {value},\r\n         *    //      \"platform\": {\r\n         *    //         \"inner\": {value}\r\n         *    //      },\r\n         *    //      \"details\": [\r\n         *    //         {value}, {value}\r\n         *    //      ]\r\n         *    //   }\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"ajaxSource\": \"sources/deep.txt\",\r\n         *        \"columns\": [\r\n         *          { \"data\": \"engine\" },\r\n         *          { \"data\": \"browser\" },\r\n         *          { \"data\": \"platform.inner\" },\r\n         *          { \"data\": \"platform.details.0\" },\r\n         *          { \"data\": \"platform.details.1\" }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `data` as a function to provide different information for\r\n         *    // sorting, filtering and display. In this case, currency (price)\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"data\": function ( source, type, val ) {\r\n         *            if (type === 'set') {\r\n         *              source.price = val;\r\n         *              // Store the computed dislay and filter values for efficiency\r\n         *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n         *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n         *              return;\r\n         *            }\r\n         *            else if (type === 'display') {\r\n         *              return source.price_display;\r\n         *            }\r\n         *            else if (type === 'filter') {\r\n         *              return source.price_filter;\r\n         *            }\r\n         *            // 'sort', 'type' and undefined all just use the integer\r\n         *            return source.price;\r\n         *          }\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using default content\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"data\": null,\r\n         *          \"defaultContent\": \"Click to edit\"\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using array notation - outputting a list from an array\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"data\": \"name[, ]\"\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         */\r\n        \"mData\": null,\r\n    \r\n    \r\n        /**\r\n         * This property is the rendering partner to `data` and it is suggested that\r\n         * when you want to manipulate data for display (including filtering,\r\n         * sorting etc) without altering the underlying data for the table, use this\r\n         * property. `render` can be considered to be the the read only companion to\r\n         * `data` which is read / write (then as such more complex). Like `data`\r\n         * this option can be given in a number of different ways to effect its\r\n         * behaviour:\r\n         *\r\n         * * `integer` - treated as an array index for the data source. This is the\r\n         *   default that DataTables uses (incrementally increased for each column).\r\n         * * `string` - read an object property from the data source. There are\r\n         *   three 'special' options that can be used in the string to alter how\r\n         *   DataTables reads the data from the source object:\r\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n         *      Javascript to read from nested objects, so to can the options\r\n         *      specified in `data`. For example: `browser.version` or\r\n         *      `browser.name`. If your object parameter name contains a period, use\r\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n         *    * `[]` - Array notation. DataTables can automatically combine data\r\n         *      from and array source, joining the data with the characters provided\r\n         *      between the two brackets. For example: `name[, ]` would provide a\r\n         *      comma-space separated list from the source array. If no characters\r\n         *      are provided between the brackets, the original array source is\r\n         *      returned.\r\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n         *      execute a function of the name given. For example: `browser()` for a\r\n         *      simple function on the data source, `browser.version()` for a\r\n         *      function in a nested property or even `browser().version` to get an\r\n         *      object property if the function called returns an object.\r\n         * * `object` - use different data for the different data types requested by\r\n         *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\r\n         *   of the object is the data type the property refers to and the value can\r\n         *   defined using an integer, string or function using the same rules as\r\n         *   `render` normally does. Note that an `_` option _must_ be specified.\r\n         *   This is the default value to use if you haven't specified a value for\r\n         *   the data type requested by DataTables.\r\n         * * `function` - the function given will be executed whenever DataTables\r\n         *   needs to set or get the data for a cell in the column. The function\r\n         *   takes three parameters:\r\n         *    * Parameters:\r\n         *      * {array|object} The data source for the row (based on `data`)\r\n         *      * {string} The type call data requested - this will be 'filter',\r\n         *        'display', 'type' or 'sort'.\r\n         *      * {array|object} The full data source for the row (not based on\r\n         *        `data`)\r\n         *    * Return:\r\n         *      * The return value from the function is what will be used for the\r\n         *        data requested.\r\n         *\r\n         *  @type string|int|function|object|null\r\n         *  @default null Use the data source value.\r\n         *\r\n         *  @name DataTable.defaults.column.render\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Create a comma separated list from an array of objects\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"ajaxSource\": \"sources/deep.txt\",\r\n         *        \"columns\": [\r\n         *          { \"data\": \"engine\" },\r\n         *          { \"data\": \"browser\" },\r\n         *          {\r\n         *            \"data\": \"platform\",\r\n         *            \"render\": \"[, ].name\"\r\n         *          }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Execute a function to obtain data\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"data\": null, // Use the full data source object for the renderer's source\r\n         *          \"render\": \"browserName()\"\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // As an object, extracting different data for the different types\r\n         *    // This would be used with a data source such as:\r\n         *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\r\n         *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n         *    // (which has both forms) is used for filtering for if a user inputs either format, while\r\n         *    // the formatted phone number is the one that is shown in the table.\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"data\": null, // Use the full data source object for the renderer's source\r\n         *          \"render\": {\r\n         *            \"_\": \"phone\",\r\n         *            \"filter\": \"phone_filter\",\r\n         *            \"display\": \"phone_display\"\r\n         *          }\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Use as a function to create a link from the data source\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"data\": \"download_link\",\r\n         *          \"render\": function ( data, type, full ) {\r\n         *            return '<a href=\"'+data+'\">Download</a>';\r\n         *          }\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"mRender\": null,\r\n    \r\n    \r\n        /**\r\n         * Change the cell type created for the column - either TD cells or TH cells. This\r\n         * can be useful as TH cells have semantic meaning in the table body, allowing them\r\n         * to act as a header for a row (you may wish to add scope='row' to the TH elements).\r\n         *  @type string\r\n         *  @default td\r\n         *\r\n         *  @name DataTable.defaults.column.cellType\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Make the first column use TH cells\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [ {\r\n         *          \"targets\": [ 0 ],\r\n         *          \"cellType\": \"th\"\r\n         *        } ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sCellType\": \"td\",\r\n    \r\n    \r\n        /**\r\n         * Class to give to each cell in this column.\r\n         *  @type string\r\n         *  @default <i>Empty string</i>\r\n         *\r\n         *  @name DataTable.defaults.column.class\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"class\": \"my_class\" },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sClass\": \"\",\r\n    \r\n        /**\r\n         * When DataTables calculates the column widths to assign to each column,\r\n         * it finds the longest string in each column and then constructs a\r\n         * temporary table and reads the widths from that. The problem with this\r\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n         * string - thus the calculation can go wrong (doing it properly and putting\r\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n         * a \"work around\" we provide this option. It will append its value to the\r\n         * text that is found to be the longest string for the column - i.e. padding.\r\n         * Generally you shouldn't need this!\r\n         *  @type string\r\n         *  @default <i>Empty string<i>\r\n         *\r\n         *  @name DataTable.defaults.column.contentPadding\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          {\r\n         *            \"contentPadding\": \"mmm\"\r\n         *          }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sContentPadding\": \"\",\r\n    \r\n    \r\n        /**\r\n         * Allows a default value to be given for a column's data, and will be used\r\n         * whenever a null data source is encountered (this can be because `data`\r\n         * is set to null, or because the data source itself is null).\r\n         *  @type string\r\n         *  @default null\r\n         *\r\n         *  @name DataTable.defaults.column.defaultContent\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          {\r\n         *            \"data\": null,\r\n         *            \"defaultContent\": \"Edit\",\r\n         *            \"targets\": [ -1 ]\r\n         *          }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          {\r\n         *            \"data\": null,\r\n         *            \"defaultContent\": \"Edit\"\r\n         *          }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sDefaultContent\": null,\r\n    \r\n    \r\n        /**\r\n         * This parameter is only used in DataTables' server-side processing. It can\r\n         * be exceptionally useful to know what columns are being displayed on the\r\n         * client side, and to map these to database fields. When defined, the names\r\n         * also allow DataTables to reorder information from the server if it comes\r\n         * back in an unexpected order (i.e. if you switch your columns around on the\r\n         * client-side, your server-side code does not also need updating).\r\n         *  @type string\r\n         *  @default <i>Empty string</i>\r\n         *\r\n         *  @name DataTable.defaults.column.name\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"name\": \"engine\", \"targets\": [ 0 ] },\r\n         *          { \"name\": \"browser\", \"targets\": [ 1 ] },\r\n         *          { \"name\": \"platform\", \"targets\": [ 2 ] },\r\n         *          { \"name\": \"version\", \"targets\": [ 3 ] },\r\n         *          { \"name\": \"grade\", \"targets\": [ 4 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"name\": \"engine\" },\r\n         *          { \"name\": \"browser\" },\r\n         *          { \"name\": \"platform\" },\r\n         *          { \"name\": \"version\" },\r\n         *          { \"name\": \"grade\" }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sName\": \"\",\r\n    \r\n    \r\n        /**\r\n         * Defines a data source type for the ordering which can be used to read\r\n         * real-time information from the table (updating the internally cached\r\n         * version) prior to ordering. This allows ordering to occur on user\r\n         * editable elements such as form inputs.\r\n         *  @type string\r\n         *  @default std\r\n         *\r\n         *  @name DataTable.defaults.column.orderDataType\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\r\n         *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\r\n         *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\r\n         *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          null,\r\n         *          null,\r\n         *          { \"orderDataType\": \"dom-text\" },\r\n         *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\r\n         *          { \"orderDataType\": \"dom-select\" },\r\n         *          { \"orderDataType\": \"dom-checkbox\" }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sSortDataType\": \"std\",\r\n    \r\n    \r\n        /**\r\n         * The title of this column.\r\n         *  @type string\r\n         *  @default null <i>Derived from the 'TH' value for this column in the\r\n         *    original HTML table.</i>\r\n         *\r\n         *  @name DataTable.defaults.column.title\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"title\": \"My column title\" },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sTitle\": null,\r\n    \r\n    \r\n        /**\r\n         * The type allows you to specify how the data for this column will be\r\n         * ordered. Four types (string, numeric, date and html (which will strip\r\n         * HTML tags before ordering)) are currently available. Note that only date\r\n         * formats understood by Javascript's Date() object will be accepted as type\r\n         * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\r\n         * 'numeric', 'date' or 'html' (by default). Further types can be adding\r\n         * through plug-ins.\r\n         *  @type string\r\n         *  @default null <i>Auto-detected from raw data</i>\r\n         *\r\n         *  @name DataTable.defaults.column.type\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"type\": \"html\", \"targets\": [ 0 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"type\": \"html\" },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sType\": null,\r\n    \r\n    \r\n        /**\r\n         * Defining the width of the column, this parameter may take any CSS value\r\n         * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\r\n         * been given a specific width through this interface ensuring that the table\r\n         * remains readable.\r\n         *  @type string\r\n         *  @default null <i>Automatic</i>\r\n         *\r\n         *  @name DataTable.defaults.column.width\r\n         *  @dtopt Columns\r\n         *\r\n         *  @example\r\n         *    // Using `columnDefs`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columnDefs\": [\r\n         *          { \"width\": \"20%\", \"targets\": [ 0 ] }\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         *\r\n         *  @example\r\n         *    // Using `columns`\r\n         *    $(document).ready( function() {\r\n         *      $('#example').dataTable( {\r\n         *        \"columns\": [\r\n         *          { \"width\": \"20%\" },\r\n         *          null,\r\n         *          null,\r\n         *          null,\r\n         *          null\r\n         *        ]\r\n         *      } );\r\n         *    } );\r\n         */\r\n        \"sWidth\": null\r\n    };\r\n    \r\n    _fnHungarianMap( DataTable.defaults.column );\r\n    \r\n    \r\n    \r\n    /**\r\n     * DataTables settings object - this holds all the information needed for a\r\n     * given table, including configuration, data and current application of the\r\n     * table options. DataTables does not have a single instance for each DataTable\r\n     * with the settings attached to that instance, but rather instances of the\r\n     * DataTable \"class\" are created on-the-fly as needed (typically by a\r\n     * $().dataTable() call) and the settings object is then applied to that\r\n     * instance.\r\n     *\r\n     * Note that this object is related to {@link DataTable.defaults} but this\r\n     * one is the internal data store for DataTables's cache of columns. It should\r\n     * NOT be manipulated outside of DataTables. Any configuration should be done\r\n     * through the initialisation options.\r\n     *  @namespace\r\n     *  @todo Really should attach the settings object to individual instances so we\r\n     *    don't need to create new instances on each $().dataTable() call (if the\r\n     *    table already exists). It would also save passing oSettings around and\r\n     *    into every single function. However, this is a very significant\r\n     *    architecture change for DataTables and will almost certainly break\r\n     *    backwards compatibility with older installations. This is something that\r\n     *    will be done in 2.0.\r\n     */\r\n    DataTable.models.oSettings = {\r\n        /**\r\n         * Primary features of DataTables and their enablement state.\r\n         *  @namespace\r\n         */\r\n        \"oFeatures\": {\r\n    \r\n            /**\r\n             * Flag to say if DataTables should automatically try to calculate the\r\n             * optimum table and columns widths (true) or not (false).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bAutoWidth\": null,\r\n    \r\n            /**\r\n             * Delay the creation of TR and TD elements until they are actually\r\n             * needed by a driven page draw. This can give a significant speed\r\n             * increase for Ajax source and Javascript source data, but makes no\r\n             * difference at all fro DOM and server-side processing tables.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bDeferRender\": null,\r\n    \r\n            /**\r\n             * Enable filtering on the table or not. Note that if this is disabled\r\n             * then there is no filtering at all on the table, including fnFilter.\r\n             * To just remove the filtering input use sDom and remove the 'f' option.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bFilter\": null,\r\n    \r\n            /**\r\n             * Table information element (the 'Showing x of y records' div) enable\r\n             * flag.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bInfo\": null,\r\n    \r\n            /**\r\n             * Present a user control allowing the end user to change the page size\r\n             * when pagination is enabled.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bLengthChange\": null,\r\n    \r\n            /**\r\n             * Pagination enabled or not. Note that if this is disabled then length\r\n             * changing must also be disabled.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bPaginate\": null,\r\n    \r\n            /**\r\n             * Processing indicator enable flag whenever DataTables is enacting a\r\n             * user request - typically an Ajax request for server-side processing.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bProcessing\": null,\r\n    \r\n            /**\r\n             * Server-side processing enabled flag - when enabled DataTables will\r\n             * get all data from the server for every draw - there is no filtering,\r\n             * sorting or paging done on the client-side.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bServerSide\": null,\r\n    \r\n            /**\r\n             * Sorting enablement flag.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSort\": null,\r\n    \r\n            /**\r\n             * Multi-column sorting\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSortMulti\": null,\r\n    \r\n            /**\r\n             * Apply a class to the columns which are being sorted to provide a\r\n             * visual highlight or not. This can slow things down when enabled since\r\n             * there is a lot of DOM interaction.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSortClasses\": null,\r\n    \r\n            /**\r\n             * State saving enablement flag.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bStateSave\": null\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Scrolling settings for a table.\r\n         *  @namespace\r\n         */\r\n        \"oScroll\": {\r\n            /**\r\n             * When the table is shorter in height than sScrollY, collapse the\r\n             * table container down to the height of the table (when true).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bCollapse\": null,\r\n    \r\n            /**\r\n             * Width of the scrollbar for the web-browser's platform. Calculated\r\n             * during table initialisation.\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iBarWidth\": 0,\r\n    \r\n            /**\r\n             * Viewport width for horizontal scrolling. Horizontal scrolling is\r\n             * disabled if an empty string.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sX\": null,\r\n    \r\n            /**\r\n             * Width to expand the table to when using x-scrolling. Typically you\r\n             * should not need to use this.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @deprecated\r\n             */\r\n            \"sXInner\": null,\r\n    \r\n            /**\r\n             * Viewport height for vertical scrolling. Vertical scrolling is disabled\r\n             * if an empty string.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sY\": null\r\n        },\r\n    \r\n        /**\r\n         * Language information for the table.\r\n         *  @namespace\r\n         *  @extends DataTable.defaults.oLanguage\r\n         */\r\n        \"oLanguage\": {\r\n            /**\r\n             * Information callback function. See\r\n             * {@link DataTable.defaults.fnInfoCallback}\r\n             *  @type function\r\n             *  @default null\r\n             */\r\n            \"fnInfoCallback\": null\r\n        },\r\n    \r\n        /**\r\n         * Browser support parameters\r\n         *  @namespace\r\n         */\r\n        \"oBrowser\": {\r\n            /**\r\n             * Indicate if the browser incorrectly calculates width:100% inside a\r\n             * scrolling element (IE6/7)\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bScrollOversize\": false,\r\n    \r\n            /**\r\n             * Determine if the vertical scrollbar is on the right or left of the\r\n             * scrolling container - needed for rtl language layout, although not\r\n             * all browsers move the scrollbar (Safari).\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bScrollbarLeft\": false,\r\n    \r\n            /**\r\n             * Flag for if `getBoundingClientRect` is fully supported or not\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bBounding\": false,\r\n    \r\n            /**\r\n             * Browser scrollbar width\r\n             *  @type integer\r\n             *  @default 0\r\n             */\r\n            \"barWidth\": 0\r\n        },\r\n    \r\n    \r\n        \"ajax\": null,\r\n    \r\n    \r\n        /**\r\n         * Array referencing the nodes which are used for the features. The\r\n         * parameters of this object match what is allowed by sDom - i.e.\r\n         *   <ul>\r\n         *     <li>'l' - Length changing</li>\r\n         *     <li>'f' - Filtering input</li>\r\n         *     <li>'t' - The table!</li>\r\n         *     <li>'i' - Information</li>\r\n         *     <li>'p' - Pagination</li>\r\n         *     <li>'r' - pRocessing</li>\r\n         *   </ul>\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aanFeatures\": [],\r\n    \r\n        /**\r\n         * Store data information - see {@link DataTable.models.oRow} for detailed\r\n         * information.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoData\": [],\r\n    \r\n        /**\r\n         * Array of indexes which are in the current display (after filtering etc)\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aiDisplay\": [],\r\n    \r\n        /**\r\n         * Array of indexes for display - no filtering\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aiDisplayMaster\": [],\r\n    \r\n        /**\r\n         * Map of row ids to data indexes\r\n         *  @type object\r\n         *  @default {}\r\n         */\r\n        \"aIds\": {},\r\n    \r\n        /**\r\n         * Store information about each column that is in use\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoColumns\": [],\r\n    \r\n        /**\r\n         * Store information about the table's header\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoHeader\": [],\r\n    \r\n        /**\r\n         * Store information about the table's footer\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoFooter\": [],\r\n    \r\n        /**\r\n         * Store the applied global search information in case we want to force a\r\n         * research or compare the old search to a new one.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @namespace\r\n         *  @extends DataTable.models.oSearch\r\n         */\r\n        \"oPreviousSearch\": {},\r\n    \r\n        /**\r\n         * Store the applied search for each column - see\r\n         * {@link DataTable.models.oSearch} for the format that is used for the\r\n         * filtering information for each column.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoPreSearchCols\": [],\r\n    \r\n        /**\r\n         * Sorting that is applied to the table. Note that the inner arrays are\r\n         * used in the following manner:\r\n         * <ul>\r\n         *   <li>Index 0 - column number</li>\r\n         *   <li>Index 1 - current sorting direction</li>\r\n         * </ul>\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type array\r\n         *  @todo These inner arrays should really be objects\r\n         */\r\n        \"aaSorting\": null,\r\n    \r\n        /**\r\n         * Sorting that is always applied to the table (i.e. prefixed in front of\r\n         * aaSorting).\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aaSortingFixed\": [],\r\n    \r\n        /**\r\n         * Classes to use for the striping of a table.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"asStripeClasses\": null,\r\n    \r\n        /**\r\n         * If restoring a table - we should restore its striping classes as well\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"asDestroyStripes\": [],\r\n    \r\n        /**\r\n         * If restoring a table - we should restore its width\r\n         *  @type int\r\n         *  @default 0\r\n         */\r\n        \"sDestroyWidth\": 0,\r\n    \r\n        /**\r\n         * Callback functions array for every time a row is inserted (i.e. on a draw).\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoRowCallback\": [],\r\n    \r\n        /**\r\n         * Callback functions for the header on each draw.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoHeaderCallback\": [],\r\n    \r\n        /**\r\n         * Callback function for the footer on each draw.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoFooterCallback\": [],\r\n    \r\n        /**\r\n         * Array of callback functions for draw callback functions\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoDrawCallback\": [],\r\n    \r\n        /**\r\n         * Array of callback functions for row created function\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoRowCreatedCallback\": [],\r\n    \r\n        /**\r\n         * Callback functions for just before the table is redrawn. A return of\r\n         * false will be used to cancel the draw.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoPreDrawCallback\": [],\r\n    \r\n        /**\r\n         * Callback functions for when the table has been initialised.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoInitComplete\": [],\r\n    \r\n    \r\n        /**\r\n         * Callbacks for modifying the settings to be stored for state saving, prior to\r\n         * saving state.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoStateSaveParams\": [],\r\n    \r\n        /**\r\n         * Callbacks for modifying the settings that have been stored for state saving\r\n         * prior to using the stored values to restore the state.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoStateLoadParams\": [],\r\n    \r\n        /**\r\n         * Callbacks for operating on the settings object once the saved state has been\r\n         * loaded\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoStateLoaded\": [],\r\n    \r\n        /**\r\n         * Cache the table ID for quick access\r\n         *  @type string\r\n         *  @default <i>Empty string</i>\r\n         */\r\n        \"sTableId\": \"\",\r\n    \r\n        /**\r\n         * The TABLE node for the main table\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTable\": null,\r\n    \r\n        /**\r\n         * Permanent ref to the thead element\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTHead\": null,\r\n    \r\n        /**\r\n         * Permanent ref to the tfoot element - if it exists\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTFoot\": null,\r\n    \r\n        /**\r\n         * Permanent ref to the tbody element\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTBody\": null,\r\n    \r\n        /**\r\n         * Cache the wrapper node (contains all DataTables controlled elements)\r\n         *  @type node\r\n         *  @default null\r\n         */\r\n        \"nTableWrapper\": null,\r\n    \r\n        /**\r\n         * Indicate if when using server-side processing the loading of data\r\n         * should be deferred until the second draw.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type boolean\r\n         *  @default false\r\n         */\r\n        \"bDeferLoading\": false,\r\n    \r\n        /**\r\n         * Indicate if all required information has been read in\r\n         *  @type boolean\r\n         *  @default false\r\n         */\r\n        \"bInitialised\": false,\r\n    \r\n        /**\r\n         * Information about open rows. Each object in the array has the parameters\r\n         * 'nTr' and 'nParent'\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoOpenRows\": [],\r\n    \r\n        /**\r\n         * Dictate the positioning of DataTables' control elements - see\r\n         * {@link DataTable.model.oInit.sDom}.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sDom\": null,\r\n    \r\n        /**\r\n         * Search delay (in mS)\r\n         *  @type integer\r\n         *  @default null\r\n         */\r\n        \"searchDelay\": null,\r\n    \r\n        /**\r\n         * Which type of pagination should be used.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type string\r\n         *  @default two_button\r\n         */\r\n        \"sPaginationType\": \"two_button\",\r\n    \r\n        /**\r\n         * The state duration (for `stateSave`) in seconds.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type int\r\n         *  @default 0\r\n         */\r\n        \"iStateDuration\": 0,\r\n    \r\n        /**\r\n         * Array of callback functions for state saving. Each array element is an\r\n         * object with the following parameters:\r\n         *   <ul>\r\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n         *       and the JSON string to save that has been thus far created. Returns\r\n         *       a JSON string to be inserted into a json object\r\n         *       (i.e. '\"param\": [ 0, 1, 2]')</li>\r\n         *     <li>string:sName - name of callback</li>\r\n         *   </ul>\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoStateSave\": [],\r\n    \r\n        /**\r\n         * Array of callback functions for state loading. Each array element is an\r\n         * object with the following parameters:\r\n         *   <ul>\r\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n         *       and the object stored. May return false to cancel state loading</li>\r\n         *     <li>string:sName - name of callback</li>\r\n         *   </ul>\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoStateLoad\": [],\r\n    \r\n        /**\r\n         * State that was saved. Useful for back reference\r\n         *  @type object\r\n         *  @default null\r\n         */\r\n        \"oSavedState\": null,\r\n    \r\n        /**\r\n         * State that was loaded. Useful for back reference\r\n         *  @type object\r\n         *  @default null\r\n         */\r\n        \"oLoadedState\": null,\r\n    \r\n        /**\r\n         * Source url for AJAX data for the table.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sAjaxSource\": null,\r\n    \r\n        /**\r\n         * Property from a given object from which to read the table data from. This\r\n         * can be an empty string (when not server-side processing), in which case\r\n         * it is  assumed an an array is given directly.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type string\r\n         */\r\n        \"sAjaxDataProp\": null,\r\n    \r\n        /**\r\n         * Note if draw should be blocked while getting data\r\n         *  @type boolean\r\n         *  @default true\r\n         */\r\n        \"bAjaxDataGet\": true,\r\n    \r\n        /**\r\n         * The last jQuery XHR object that was used for server-side data gathering.\r\n         * This can be used for working with the XHR information in one of the\r\n         * callbacks\r\n         *  @type object\r\n         *  @default null\r\n         */\r\n        \"jqXHR\": null,\r\n    \r\n        /**\r\n         * JSON returned from the server in the last Ajax request\r\n         *  @type object\r\n         *  @default undefined\r\n         */\r\n        \"json\": undefined,\r\n    \r\n        /**\r\n         * Data submitted as part of the last Ajax request\r\n         *  @type object\r\n         *  @default undefined\r\n         */\r\n        \"oAjaxData\": undefined,\r\n    \r\n        /**\r\n         * Function to get the server-side data.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type function\r\n         */\r\n        \"fnServerData\": null,\r\n    \r\n        /**\r\n         * Functions which are called prior to sending an Ajax request so extra\r\n         * parameters can easily be sent to the server\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoServerParams\": [],\r\n    \r\n        /**\r\n         * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\r\n         * required).\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type string\r\n         */\r\n        \"sServerMethod\": null,\r\n    \r\n        /**\r\n         * Format numbers for display.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type function\r\n         */\r\n        \"fnFormatNumber\": null,\r\n    \r\n        /**\r\n         * List of options that can be used for the user selectable length menu.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aLengthMenu\": null,\r\n    \r\n        /**\r\n         * Counter for the draws that the table does. Also used as a tracker for\r\n         * server-side processing\r\n         *  @type int\r\n         *  @default 0\r\n         */\r\n        \"iDraw\": 0,\r\n    \r\n        /**\r\n         * Indicate if a redraw is being done - useful for Ajax\r\n         *  @type boolean\r\n         *  @default false\r\n         */\r\n        \"bDrawing\": false,\r\n    \r\n        /**\r\n         * Draw index (iDraw) of the last error when parsing the returned data\r\n         *  @type int\r\n         *  @default -1\r\n         */\r\n        \"iDrawError\": -1,\r\n    \r\n        /**\r\n         * Paging display length\r\n         *  @type int\r\n         *  @default 10\r\n         */\r\n        \"_iDisplayLength\": 10,\r\n    \r\n        /**\r\n         * Paging start point - aiDisplay index\r\n         *  @type int\r\n         *  @default 0\r\n         */\r\n        \"_iDisplayStart\": 0,\r\n    \r\n        /**\r\n         * Server-side processing - number of records in the result set\r\n         * (i.e. before filtering), Use fnRecordsTotal rather than\r\n         * this property to get the value of the number of records, regardless of\r\n         * the server-side processing setting.\r\n         *  @type int\r\n         *  @default 0\r\n         *  @private\r\n         */\r\n        \"_iRecordsTotal\": 0,\r\n    \r\n        /**\r\n         * Server-side processing - number of records in the current display set\r\n         * (i.e. after filtering). Use fnRecordsDisplay rather than\r\n         * this property to get the value of the number of records, regardless of\r\n         * the server-side processing setting.\r\n         *  @type boolean\r\n         *  @default 0\r\n         *  @private\r\n         */\r\n        \"_iRecordsDisplay\": 0,\r\n    \r\n        /**\r\n         * Flag to indicate if jQuery UI marking and classes should be used.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type boolean\r\n         */\r\n        \"bJUI\": null,\r\n    \r\n        /**\r\n         * The classes to use for the table\r\n         *  @type object\r\n         *  @default {}\r\n         */\r\n        \"oClasses\": {},\r\n    \r\n        /**\r\n         * Flag attached to the settings object so you can check in the draw\r\n         * callback if filtering has been done in the draw. Deprecated in favour of\r\n         * events.\r\n         *  @type boolean\r\n         *  @default false\r\n         *  @deprecated\r\n         */\r\n        \"bFiltered\": false,\r\n    \r\n        /**\r\n         * Flag attached to the settings object so you can check in the draw\r\n         * callback if sorting has been done in the draw. Deprecated in favour of\r\n         * events.\r\n         *  @type boolean\r\n         *  @default false\r\n         *  @deprecated\r\n         */\r\n        \"bSorted\": false,\r\n    \r\n        /**\r\n         * Indicate that if multiple rows are in the header and there is more than\r\n         * one unique cell per column, if the top one (true) or bottom one (false)\r\n         * should be used for sorting / title by DataTables.\r\n         * Note that this parameter will be set by the initialisation routine. To\r\n         * set a default use {@link DataTable.defaults}.\r\n         *  @type boolean\r\n         */\r\n        \"bSortCellsTop\": null,\r\n    \r\n        /**\r\n         * Initialisation object that is used for the table\r\n         *  @type object\r\n         *  @default null\r\n         */\r\n        \"oInit\": null,\r\n    \r\n        /**\r\n         * Destroy callback functions - for plug-ins to attach themselves to the\r\n         * destroy so they can clean up markup and events.\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aoDestroyCallback\": [],\r\n    \r\n    \r\n        /**\r\n         * Get the number of records in the current record set, before filtering\r\n         *  @type function\r\n         */\r\n        \"fnRecordsTotal\": function ()\r\n        {\r\n            return _fnDataSource( this ) == 'ssp' ?\r\n                this._iRecordsTotal * 1 :\r\n                this.aiDisplayMaster.length;\r\n        },\r\n    \r\n        /**\r\n         * Get the number of records in the current record set, after filtering\r\n         *  @type function\r\n         */\r\n        \"fnRecordsDisplay\": function ()\r\n        {\r\n            return _fnDataSource( this ) == 'ssp' ?\r\n                this._iRecordsDisplay * 1 :\r\n                this.aiDisplay.length;\r\n        },\r\n    \r\n        /**\r\n         * Get the display end point - aiDisplay index\r\n         *  @type function\r\n         */\r\n        \"fnDisplayEnd\": function ()\r\n        {\r\n            var\r\n                len      = this._iDisplayLength,\r\n                start    = this._iDisplayStart,\r\n                calc     = start + len,\r\n                records  = this.aiDisplay.length,\r\n                features = this.oFeatures,\r\n                paginate = features.bPaginate;\r\n    \r\n            if ( features.bServerSide ) {\r\n                return paginate === false || len === -1 ?\r\n                    start + records :\r\n                    Math.min( start+len, this._iRecordsDisplay );\r\n            }\r\n            else {\r\n                return ! paginate || calc>records || len===-1 ?\r\n                    records :\r\n                    calc;\r\n            }\r\n        },\r\n    \r\n        /**\r\n         * The DataTables object for this table\r\n         *  @type object\r\n         *  @default null\r\n         */\r\n        \"oInstance\": null,\r\n    \r\n        /**\r\n         * Unique identifier for each instance of the DataTables object. If there\r\n         * is an ID on the table node, then it takes that value, otherwise an\r\n         * incrementing internal counter is used.\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"sInstance\": null,\r\n    \r\n        /**\r\n         * tabindex attribute value that is added to DataTables control elements, allowing\r\n         * keyboard navigation of the table and its controls.\r\n         */\r\n        \"iTabIndex\": 0,\r\n    \r\n        /**\r\n         * DIV container for the footer scrolling table if scrolling\r\n         */\r\n        \"nScrollHead\": null,\r\n    \r\n        /**\r\n         * DIV container for the footer scrolling table if scrolling\r\n         */\r\n        \"nScrollFoot\": null,\r\n    \r\n        /**\r\n         * Last applied sort\r\n         *  @type array\r\n         *  @default []\r\n         */\r\n        \"aLastSort\": [],\r\n    \r\n        /**\r\n         * Stored plug-in instances\r\n         *  @type object\r\n         *  @default {}\r\n         */\r\n        \"oPlugins\": {},\r\n    \r\n        /**\r\n         * Function used to get a row's id from the row's data\r\n         *  @type function\r\n         *  @default null\r\n         */\r\n        \"rowIdFn\": null,\r\n    \r\n        /**\r\n         * Data location where to store a row's id\r\n         *  @type string\r\n         *  @default null\r\n         */\r\n        \"rowId\": null\r\n    };\r\n\r\n    /**\r\n     * Extension object for DataTables that is used to provide all extension\r\n     * options.\r\n     *\r\n     * Note that the `DataTable.ext` object is available through\r\n     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\r\n     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\r\n     *  @namespace\r\n     *  @extends DataTable.models.ext\r\n     */\r\n    \r\n    \r\n    /**\r\n     * DataTables extensions\r\n     * \r\n     * This namespace acts as a collection area for plug-ins that can be used to\r\n     * extend DataTables capabilities. Indeed many of the build in methods\r\n     * use this method to provide their own capabilities (sorting methods for\r\n     * example).\r\n     *\r\n     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\r\n     * reasons\r\n     *\r\n     *  @namespace\r\n     */\r\n    DataTable.ext = _ext = {\r\n        /**\r\n         * Buttons. For use with the Buttons extension for DataTables. This is\r\n         * defined here so other extensions can define buttons regardless of load\r\n         * order. It is _not_ used by DataTables core.\r\n         *\r\n         *  @type object\r\n         *  @default {}\r\n         */\r\n        buttons: {},\r\n    \r\n    \r\n        /**\r\n         * Element class names\r\n         *\r\n         *  @type object\r\n         *  @default {}\r\n         */\r\n        classes: {},\r\n    \r\n    \r\n        /**\r\n         * DataTables build type (expanded by the download builder)\r\n         *\r\n         *  @type string\r\n         */\r\n        builder: \"-source-\",\r\n    \r\n    \r\n        /**\r\n         * Error reporting.\r\n         * \r\n         * How should DataTables report an error. Can take the value 'alert',\r\n         * 'throw', 'none' or a function.\r\n         *\r\n         *  @type string|function\r\n         *  @default alert\r\n         */\r\n        errMode: \"alert\",\r\n    \r\n    \r\n        /**\r\n         * Feature plug-ins.\r\n         * \r\n         * This is an array of objects which describe the feature plug-ins that are\r\n         * available to DataTables. These feature plug-ins are then available for\r\n         * use through the `dom` initialisation option.\r\n         * \r\n         * Each feature plug-in is described by an object which must have the\r\n         * following properties:\r\n         * \r\n         * * `fnInit` - function that is used to initialise the plug-in,\r\n         * * `cFeature` - a character so the feature can be enabled by the `dom`\r\n         *   instillation option. This is case sensitive.\r\n         *\r\n         * The `fnInit` function has the following input parameters:\r\n         *\r\n         * 1. `{object}` DataTables settings object: see\r\n         *    {@link DataTable.models.oSettings}\r\n         *\r\n         * And the following return is expected:\r\n         * \r\n         * * {node|null} The element which contains your feature. Note that the\r\n         *   return may also be void if your plug-in does not require to inject any\r\n         *   DOM elements into DataTables control (`dom`) - for example this might\r\n         *   be useful when developing a plug-in which allows table control via\r\n         *   keyboard entry\r\n         *\r\n         *  @type array\r\n         *\r\n         *  @example\r\n         *    $.fn.dataTable.ext.features.push( {\r\n         *      \"fnInit\": function( oSettings ) {\r\n         *        return new TableTools( { \"oDTSettings\": oSettings } );\r\n         *      },\r\n         *      \"cFeature\": \"T\"\r\n         *    } );\r\n         */\r\n        feature: [],\r\n    \r\n    \r\n        /**\r\n         * Row searching.\r\n         * \r\n         * This method of searching is complimentary to the default type based\r\n         * searching, and a lot more comprehensive as it allows you complete control\r\n         * over the searching logic. Each element in this array is a function\r\n         * (parameters described below) that is called for every row in the table,\r\n         * and your logic decides if it should be included in the searching data set\r\n         * or not.\r\n         *\r\n         * Searching functions have the following input parameters:\r\n         *\r\n         * 1. `{object}` DataTables settings object: see\r\n         *    {@link DataTable.models.oSettings}\r\n         * 2. `{array|object}` Data for the row to be processed (same as the\r\n         *    original format that was passed in as the data source, or an array\r\n         *    from a DOM data source\r\n         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\r\n         *    can be useful to retrieve the `TR` element if you need DOM interaction.\r\n         *\r\n         * And the following return is expected:\r\n         *\r\n         * * {boolean} Include the row in the searched result set (true) or not\r\n         *   (false)\r\n         *\r\n         * Note that as with the main search ability in DataTables, technically this\r\n         * is \"filtering\", since it is subtractive. However, for consistency in\r\n         * naming we call it searching here.\r\n         *\r\n         *  @type array\r\n         *  @default []\r\n         *\r\n         *  @example\r\n         *    // The following example shows custom search being applied to the\r\n         *    // fourth column (i.e. the data[3] index) based on two input values\r\n         *    // from the end-user, matching the data in a certain range.\r\n         *    $.fn.dataTable.ext.search.push(\r\n         *      function( settings, data, dataIndex ) {\r\n         *        var min = document.getElementById('min').value * 1;\r\n         *        var max = document.getElementById('max').value * 1;\r\n         *        var version = data[3] == \"-\" ? 0 : data[3]*1;\r\n         *\r\n         *        if ( min == \"\" && max == \"\" ) {\r\n         *          return true;\r\n         *        }\r\n         *        else if ( min == \"\" && version < max ) {\r\n         *          return true;\r\n         *        }\r\n         *        else if ( min < version && \"\" == max ) {\r\n         *          return true;\r\n         *        }\r\n         *        else if ( min < version && version < max ) {\r\n         *          return true;\r\n         *        }\r\n         *        return false;\r\n         *      }\r\n         *    );\r\n         */\r\n        search: [],\r\n    \r\n    \r\n        /**\r\n         * Selector extensions\r\n         *\r\n         * The `selector` option can be used to extend the options available for the\r\n         * selector modifier options (`selector-modifier` object data type) that\r\n         * each of the three built in selector types offer (row, column and cell +\r\n         * their plural counterparts). For example the Select extension uses this\r\n         * mechanism to provide an option to select only rows, columns and cells\r\n         * that have been marked as selected by the end user (`{selected: true}`),\r\n         * which can be used in conjunction with the existing built in selector\r\n         * options.\r\n         *\r\n         * Each property is an array to which functions can be pushed. The functions\r\n         * take three attributes:\r\n         *\r\n         * * Settings object for the host table\r\n         * * Options object (`selector-modifier` object type)\r\n         * * Array of selected item indexes\r\n         *\r\n         * The return is an array of the resulting item indexes after the custom\r\n         * selector has been applied.\r\n         *\r\n         *  @type object\r\n         */\r\n        selector: {\r\n            cell: [],\r\n            column: [],\r\n            row: []\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Internal functions, exposed for used in plug-ins.\r\n         * \r\n         * Please note that you should not need to use the internal methods for\r\n         * anything other than a plug-in (and even then, try to avoid if possible).\r\n         * The internal function may change between releases.\r\n         *\r\n         *  @type object\r\n         *  @default {}\r\n         */\r\n        internal: {},\r\n    \r\n    \r\n        /**\r\n         * Legacy configuration options. Enable and disable legacy options that\r\n         * are available in DataTables.\r\n         *\r\n         *  @type object\r\n         */\r\n        legacy: {\r\n            /**\r\n             * Enable / disable DataTables 1.9 compatible server-side processing\r\n             * requests\r\n             *\r\n             *  @type boolean\r\n             *  @default null\r\n             */\r\n            ajax: null\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Pagination plug-in methods.\r\n         * \r\n         * Each entry in this object is a function and defines which buttons should\r\n         * be shown by the pagination rendering method that is used for the table:\r\n         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\r\n         * buttons are displayed in the document, while the functions here tell it\r\n         * what buttons to display. This is done by returning an array of button\r\n         * descriptions (what each button will do).\r\n         *\r\n         * Pagination types (the four built in options and any additional plug-in\r\n         * options defined here) can be used through the `paginationType`\r\n         * initialisation parameter.\r\n         *\r\n         * The functions defined take two parameters:\r\n         *\r\n         * 1. `{int} page` The current page index\r\n         * 2. `{int} pages` The number of pages in the table\r\n         *\r\n         * Each function is expected to return an array where each element of the\r\n         * array can be one of:\r\n         *\r\n         * * `first` - Jump to first page when activated\r\n         * * `last` - Jump to last page when activated\r\n         * * `previous` - Show previous page when activated\r\n         * * `next` - Show next page when activated\r\n         * * `{int}` - Show page of the index given\r\n         * * `{array}` - A nested array containing the above elements to add a\r\n         *   containing 'DIV' element (might be useful for styling).\r\n         *\r\n         * Note that DataTables v1.9- used this object slightly differently whereby\r\n         * an object with two functions would be defined for each plug-in. That\r\n         * ability is still supported by DataTables 1.10+ to provide backwards\r\n         * compatibility, but this option of use is now decremented and no longer\r\n         * documented in DataTables 1.10+.\r\n         *\r\n         *  @type object\r\n         *  @default {}\r\n         *\r\n         *  @example\r\n         *    // Show previous, next and current page buttons only\r\n         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\r\n         *      return [ 'previous', page, 'next' ];\r\n         *    };\r\n         */\r\n        pager: {},\r\n    \r\n    \r\n        renderer: {\r\n            pageButton: {},\r\n            header: {}\r\n        },\r\n    \r\n    \r\n        /**\r\n         * Ordering plug-ins - custom data source\r\n         * \r\n         * The extension options for ordering of data available here is complimentary\r\n         * to the default type based ordering that DataTables typically uses. It\r\n         * allows much greater control over the the data that is being used to\r\n         * order a column, but is necessarily therefore more complex.\r\n         * \r\n         * This type of ordering is useful if you want to do ordering based on data\r\n         * live from the DOM (for example the contents of an 'input' element) rather\r\n         * than just the static string that DataTables knows of.\r\n         * \r\n         * The way these plug-ins work is that you create an array of the values you\r\n         * wish to be ordering for the column in question and then return that\r\n         * array. The data in the array much be in the index order of the rows in\r\n         * the table (not the currently ordering order!). Which order data gathering\r\n         * function is run here depends on the `dt-init columns.orderDataType`\r\n         * parameter that is used for the column (if any).\r\n         *\r\n         * The functions defined take two parameters:\r\n         *\r\n         * 1. `{object}` DataTables settings object: see\r\n         *    {@link DataTable.models.oSettings}\r\n         * 2. `{int}` Target column index\r\n         *\r\n         * Each function is expected to return an array:\r\n         *\r\n         * * `{array}` Data for the column to be ordering upon\r\n         *\r\n         *  @type array\r\n         *\r\n         *  @example\r\n         *    // Ordering using `input` node values\r\n         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\r\n         *    {\r\n         *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\r\n         *        return $('input', td).val();\r\n         *      } );\r\n         *    }\r\n         */\r\n        order: {},\r\n    \r\n    \r\n        /**\r\n         * Type based plug-ins.\r\n         *\r\n         * Each column in DataTables has a type assigned to it, either by automatic\r\n         * detection or by direct assignment using the `type` option for the column.\r\n         * The type of a column will effect how it is ordering and search (plug-ins\r\n         * can also make use of the column type if required).\r\n         *\r\n         * @namespace\r\n         */\r\n        type: {\r\n            /**\r\n             * Type detection functions.\r\n             *\r\n             * The functions defined in this object are used to automatically detect\r\n             * a column's type, making initialisation of DataTables super easy, even\r\n             * when complex data is in the table.\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             *  1. `{*}` Data from the column cell to be analysed\r\n             *  2. `{settings}` DataTables settings object. This can be used to\r\n             *     perform context specific type detection - for example detection\r\n             *     based on language settings such as using a comma for a decimal\r\n             *     place. Generally speaking the options from the settings will not\r\n             *     be required\r\n             *\r\n             * Each function is expected to return:\r\n             *\r\n             * * `{string|null}` Data type detected, or null if unknown (and thus\r\n             *   pass it on to the other type detection functions.\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    // Currency type detection plug-in:\r\n             *    $.fn.dataTable.ext.type.detect.push(\r\n             *      function ( data, settings ) {\r\n             *        // Check the numeric part\r\n             *        if ( ! $.isNumeric( data.substring(1) ) ) {\r\n             *          return null;\r\n             *        }\r\n             *\r\n             *        // Check prefixed by currency\r\n             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\r\n             *          return 'currency';\r\n             *        }\r\n             *        return null;\r\n             *      }\r\n             *    );\r\n             */\r\n            detect: [],\r\n    \r\n    \r\n            /**\r\n             * Type based search formatting.\r\n             *\r\n             * The type based searching functions can be used to pre-format the\r\n             * data to be search on. For example, it can be used to strip HTML\r\n             * tags or to de-format telephone numbers for numeric only searching.\r\n             *\r\n             * Note that is a search is not defined for a column of a given type,\r\n             * no search formatting will be performed.\r\n             * \r\n             * Pre-processing of searching data plug-ins - When you assign the sType\r\n             * for a column (or have it automatically detected for you by DataTables\r\n             * or a type detection plug-in), you will typically be using this for\r\n             * custom sorting, but it can also be used to provide custom searching\r\n             * by allowing you to pre-processing the data and returning the data in\r\n             * the format that should be searched upon. This is done by adding\r\n             * functions this object with a parameter name which matches the sType\r\n             * for that target column. This is the corollary of <i>afnSortData</i>\r\n             * for searching data.\r\n             *\r\n             * The functions defined take a single parameter:\r\n             *\r\n             *  1. `{*}` Data from the column cell to be prepared for searching\r\n             *\r\n             * Each function is expected to return:\r\n             *\r\n             * * `{string|null}` Formatted string that will be used for the searching.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             *\r\n             *  @example\r\n             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\r\n             *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\r\n             *    }\r\n             */\r\n            search: {},\r\n    \r\n    \r\n            /**\r\n             * Type based ordering.\r\n             *\r\n             * The column type tells DataTables what ordering to apply to the table\r\n             * when a column is sorted upon. The order for each type that is defined,\r\n             * is defined by the functions available in this object.\r\n             *\r\n             * Each ordering option can be described by three properties added to\r\n             * this object:\r\n             *\r\n             * * `{type}-pre` - Pre-formatting function\r\n             * * `{type}-asc` - Ascending order function\r\n             * * `{type}-desc` - Descending order function\r\n             *\r\n             * All three can be used together, only `{type}-pre` or only\r\n             * `{type}-asc` and `{type}-desc` together. It is generally recommended\r\n             * that only `{type}-pre` is used, as this provides the optimal\r\n             * implementation in terms of speed, although the others are provided\r\n             * for compatibility with existing Javascript sort functions.\r\n             *\r\n             * `{type}-pre`: Functions defined take a single parameter:\r\n             *\r\n             *  1. `{*}` Data from the column cell to be prepared for ordering\r\n             *\r\n             * And return:\r\n             *\r\n             * * `{*}` Data to be sorted upon\r\n             *\r\n             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\r\n             * functions, taking two parameters:\r\n             *\r\n             *  1. `{*}` Data to compare to the second parameter\r\n             *  2. `{*}` Data to compare to the first parameter\r\n             *\r\n             * And returning:\r\n             *\r\n             * * `{*}` Ordering match: <0 if first parameter should be sorted lower\r\n             *   than the second parameter, ===0 if the two parameters are equal and\r\n             *   >0 if the first parameter should be sorted height than the second\r\n             *   parameter.\r\n             * \r\n             *  @type object\r\n             *  @default {}\r\n             *\r\n             *  @example\r\n             *    // Numeric ordering of formatted numbers with a pre-formatter\r\n             *    $.extend( $.fn.dataTable.ext.type.order, {\r\n             *      \"string-pre\": function(x) {\r\n             *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\r\n             *        return parseFloat( a );\r\n             *      }\r\n             *    } );\r\n             *\r\n             *  @example\r\n             *    // Case-sensitive string ordering, with no pre-formatting method\r\n             *    $.extend( $.fn.dataTable.ext.order, {\r\n             *      \"string-case-asc\": function(x,y) {\r\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n             *      },\r\n             *      \"string-case-desc\": function(x,y) {\r\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n             *      }\r\n             *    } );\r\n             */\r\n            order: {}\r\n        },\r\n    \r\n        /**\r\n         * Unique DataTables instance counter\r\n         *\r\n         * @type int\r\n         * @private\r\n         */\r\n        _unique: 0,\r\n    \r\n    \r\n        //\r\n        // Depreciated\r\n        // The following properties are retained for backwards compatiblity only.\r\n        // The should not be used in new projects and will be removed in a future\r\n        // version\r\n        //\r\n    \r\n        /**\r\n         * Version check function.\r\n         *  @type function\r\n         *  @depreciated Since 1.10\r\n         */\r\n        fnVersionCheck: DataTable.fnVersionCheck,\r\n    \r\n    \r\n        /**\r\n         * Index for what 'this' index API functions should use\r\n         *  @type int\r\n         *  @deprecated Since v1.10\r\n         */\r\n        iApiIndex: 0,\r\n    \r\n    \r\n        /**\r\n         * jQuery UI class container\r\n         *  @type object\r\n         *  @deprecated Since v1.10\r\n         */\r\n        oJUIClasses: {},\r\n    \r\n    \r\n        /**\r\n         * Software version\r\n         *  @type string\r\n         *  @deprecated Since v1.10\r\n         */\r\n        sVersion: DataTable.version\r\n    };\r\n    \r\n    \r\n    //\r\n    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\r\n    //\r\n    $.extend( _ext, {\r\n        afnFiltering: _ext.search,\r\n        aTypes:       _ext.type.detect,\r\n        ofnSearch:    _ext.type.search,\r\n        oSort:        _ext.type.order,\r\n        afnSortData:  _ext.order,\r\n        aoFeatures:   _ext.feature,\r\n        oApi:         _ext.internal,\r\n        oStdClasses:  _ext.classes,\r\n        oPagination:  _ext.pager\r\n    } );\r\n    \r\n    \r\n    $.extend( DataTable.ext.classes, {\r\n        \"sTable\": \"dataTable\",\r\n        \"sNoFooter\": \"no-footer\",\r\n    \r\n        /* Paging buttons */\r\n        \"sPageButton\": \"paginate_button\",\r\n        \"sPageButtonActive\": \"current\",\r\n        \"sPageButtonDisabled\": \"disabled\",\r\n    \r\n        /* Striping classes */\r\n        \"sStripeOdd\": \"odd\",\r\n        \"sStripeEven\": \"even\",\r\n    \r\n        /* Empty row */\r\n        \"sRowEmpty\": \"dataTables_empty\",\r\n    \r\n        /* Features */\r\n        \"sWrapper\": \"dataTables_wrapper\",\r\n        \"sFilter\": \"dataTables_filter\",\r\n        \"sInfo\": \"dataTables_info\",\r\n        \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\r\n        \"sLength\": \"dataTables_length\",\r\n        \"sProcessing\": \"dataTables_processing\",\r\n    \r\n        /* Sorting */\r\n        \"sSortAsc\": \"sorting_asc\",\r\n        \"sSortDesc\": \"sorting_desc\",\r\n        \"sSortable\": \"sorting\", /* Sortable in both directions */\r\n        \"sSortableAsc\": \"sorting_asc_disabled\",\r\n        \"sSortableDesc\": \"sorting_desc_disabled\",\r\n        \"sSortableNone\": \"sorting_disabled\",\r\n        \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\r\n    \r\n        /* Filtering */\r\n        \"sFilterInput\": \"\",\r\n    \r\n        /* Page length */\r\n        \"sLengthSelect\": \"\",\r\n    \r\n        /* Scrolling */\r\n        \"sScrollWrapper\": \"dataTables_scroll\",\r\n        \"sScrollHead\": \"dataTables_scrollHead\",\r\n        \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\r\n        \"sScrollBody\": \"dataTables_scrollBody\",\r\n        \"sScrollFoot\": \"dataTables_scrollFoot\",\r\n        \"sScrollFootInner\": \"dataTables_scrollFootInner\",\r\n    \r\n        /* Misc */\r\n        \"sHeaderTH\": \"\",\r\n        \"sFooterTH\": \"\",\r\n    \r\n        // Deprecated\r\n        \"sSortJUIAsc\": \"\",\r\n        \"sSortJUIDesc\": \"\",\r\n        \"sSortJUI\": \"\",\r\n        \"sSortJUIAscAllowed\": \"\",\r\n        \"sSortJUIDescAllowed\": \"\",\r\n        \"sSortJUIWrapper\": \"\",\r\n        \"sSortIcon\": \"\",\r\n        \"sJUIHeader\": \"\",\r\n        \"sJUIFooter\": \"\"\r\n    } );\r\n    \r\n    \r\n    (function() {\r\n    \r\n    // Reused strings for better compression. Closure compiler appears to have a\r\n    // weird edge case where it is trying to expand strings rather than use the\r\n    // variable version. This results in about 200 bytes being added, for very\r\n    // little preference benefit since it this run on script load only.\r\n    var _empty = '';\r\n    _empty = '';\r\n    \r\n    var _stateDefault = _empty + 'ui-state-default';\r\n    var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\r\n    var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\r\n    \r\n    $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\r\n        /* Full numbers paging buttons */\r\n        \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\r\n        \"sPageButtonActive\":   \"ui-state-disabled\",\r\n        \"sPageButtonDisabled\": \"ui-state-disabled\",\r\n    \r\n        /* Features */\r\n        \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\r\n            \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\r\n    \r\n        /* Sorting */\r\n        \"sSortAsc\":            _stateDefault+\" sorting_asc\",\r\n        \"sSortDesc\":           _stateDefault+\" sorting_desc\",\r\n        \"sSortable\":           _stateDefault+\" sorting\",\r\n        \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\r\n        \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\r\n        \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\r\n        \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\r\n        \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\r\n        \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\r\n        \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\r\n        \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\r\n        \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\r\n        \"sSortIcon\":           \"DataTables_sort_icon\",\r\n    \r\n        /* Scrolling */\r\n        \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\r\n        \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\r\n    \r\n        /* Misc */\r\n        \"sHeaderTH\":  _stateDefault,\r\n        \"sFooterTH\":  _stateDefault,\r\n        \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\r\n        \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\r\n    } );\r\n    \r\n    }());\r\n    \r\n    \r\n    \r\n    var extPagination = DataTable.ext.pager;\r\n    \r\n    function _numbers ( page, pages ) {\r\n        var\r\n            numbers = [],\r\n            buttons = extPagination.numbers_length,\r\n            half = Math.floor( buttons / 2 ),\r\n            i = 1;\r\n    \r\n        if ( pages <= buttons ) {\r\n            numbers = _range( 0, pages );\r\n        }\r\n        else if ( page <= half ) {\r\n            numbers = _range( 0, buttons-2 );\r\n            numbers.push( 'ellipsis' );\r\n            numbers.push( pages-1 );\r\n        }\r\n        else if ( page >= pages - 1 - half ) {\r\n            numbers = _range( pages-(buttons-2), pages );\r\n            numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\r\n            numbers.splice( 0, 0, 0 );\r\n        }\r\n        else {\r\n            numbers = _range( page-half+2, page+half-1 );\r\n            numbers.push( 'ellipsis' );\r\n            numbers.push( pages-1 );\r\n            numbers.splice( 0, 0, 'ellipsis' );\r\n            numbers.splice( 0, 0, 0 );\r\n        }\r\n    \r\n        numbers.DT_el = 'span';\r\n        return numbers;\r\n    }\r\n    \r\n    \r\n    $.extend( extPagination, {\r\n        simple: function ( page, pages ) {\r\n            return [ 'previous', 'next' ];\r\n        },\r\n    \r\n        full: function ( page, pages ) {\r\n            return [  'first', 'previous', 'next', 'last' ];\r\n        },\r\n    \r\n        numbers: function ( page, pages ) {\r\n            return [ _numbers(page, pages) ];\r\n        },\r\n    \r\n        simple_numbers: function ( page, pages ) {\r\n            return [ 'previous', _numbers(page, pages), 'next' ];\r\n        },\r\n    \r\n        full_numbers: function ( page, pages ) {\r\n            return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\r\n        },\r\n        \r\n        first_last_numbers: function (page, pages) {\r\n            return ['first', _numbers(page, pages), 'last'];\r\n        },\r\n    \r\n        // For testing and plug-ins to use\r\n        _numbers: _numbers,\r\n    \r\n        // Number of number buttons (including ellipsis) to show. _Must be odd!_\r\n        numbers_length: 7\r\n    } );\r\n    \r\n    \r\n    $.extend( true, DataTable.ext.renderer, {\r\n        pageButton: {\r\n            _: function ( settings, host, idx, buttons, page, pages ) {\r\n                var classes = settings.oClasses;\r\n                var lang = settings.oLanguage.oPaginate;\r\n                var aria = settings.oLanguage.oAria.paginate || {};\r\n                var btnDisplay, btnClass, counter=0;\r\n    \r\n                var attach = function( container, buttons ) {\r\n                    var i, ien, node, button;\r\n                    var clickHandler = function ( e ) {\r\n                        _fnPageChange( settings, e.data.action, true );\r\n                    };\r\n    \r\n                    for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n                        button = buttons[i];\r\n    \r\n                        if ( $.isArray( button ) ) {\r\n                            var inner = $( '<'+(button.DT_el || 'div')+'/>' )\r\n                                .appendTo( container );\r\n                            attach( inner, button );\r\n                        }\r\n                        else {\r\n                            btnDisplay = null;\r\n                            btnClass = '';\r\n    \r\n                            switch ( button ) {\r\n                                case 'ellipsis':\r\n                                    container.append('<span class=\"ellipsis\">&#x2026;</span>');\r\n                                    break;\r\n    \r\n                                case 'first':\r\n                                    btnDisplay = lang.sFirst;\r\n                                    btnClass = button + (page > 0 ?\r\n                                        '' : ' '+classes.sPageButtonDisabled);\r\n                                    break;\r\n    \r\n                                case 'previous':\r\n                                    btnDisplay = lang.sPrevious;\r\n                                    btnClass = button + (page > 0 ?\r\n                                        '' : ' '+classes.sPageButtonDisabled);\r\n                                    break;\r\n    \r\n                                case 'next':\r\n                                    btnDisplay = lang.sNext;\r\n                                    btnClass = button + (page < pages-1 ?\r\n                                        '' : ' '+classes.sPageButtonDisabled);\r\n                                    break;\r\n    \r\n                                case 'last':\r\n                                    btnDisplay = lang.sLast;\r\n                                    btnClass = button + (page < pages-1 ?\r\n                                        '' : ' '+classes.sPageButtonDisabled);\r\n                                    break;\r\n    \r\n                                default:\r\n                                    btnDisplay = button + 1;\r\n                                    btnClass = page === button ?\r\n                                        classes.sPageButtonActive : '';\r\n                                    break;\r\n                            }\r\n    \r\n                            if ( btnDisplay !== null ) {\r\n                                node = $('<a>', {\r\n                                        'class': classes.sPageButton+' '+btnClass,\r\n                                        'aria-controls': settings.sTableId,\r\n                                        'aria-label': aria[ button ],\r\n                                        'data-dt-idx': counter,\r\n                                        'tabindex': settings.iTabIndex,\r\n                                        'id': idx === 0 && typeof button === 'string' ?\r\n                                            settings.sTableId +'_'+ button :\r\n                                            null\r\n                                    } )\r\n                                    .html( btnDisplay )\r\n                                    .appendTo( container );\r\n    \r\n                                _fnBindAction(\r\n                                    node, {action: button}, clickHandler\r\n                                );\r\n    \r\n                                counter++;\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n    \r\n                // IE9 throws an 'unknown error' if document.activeElement is used\r\n                // inside an iframe or frame. Try / catch the error. Not good for\r\n                // accessibility, but neither are frames.\r\n                var activeEl;\r\n    \r\n                try {\r\n                    // Because this approach is destroying and recreating the paging\r\n                    // elements, focus is lost on the select button which is bad for\r\n                    // accessibility. So we want to restore focus once the draw has\r\n                    // completed\r\n                    activeEl = $(host).find(document.activeElement).data('dt-idx');\r\n                }\r\n                catch (e) {}\r\n    \r\n                attach( $(host).empty(), buttons );\r\n    \r\n                if ( activeEl !== undefined ) {\r\n                    $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\r\n                }\r\n            }\r\n        }\r\n    } );\r\n    \r\n    \r\n    \r\n    // Built in type detection. See model.ext.aTypes for information about\r\n    // what is required from this methods.\r\n    $.extend( DataTable.ext.type.detect, [\r\n        // Plain numbers - first since V8 detects some plain numbers as dates\r\n        // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\r\n        function ( d, settings )\r\n        {\r\n            var decimal = settings.oLanguage.sDecimal;\r\n            return _isNumber( d, decimal ) ? 'num'+decimal : null;\r\n        },\r\n    \r\n        // Dates (only those recognised by the browser's Date.parse)\r\n        function ( d, settings )\r\n        {\r\n            // V8 tries _very_ hard to make a string passed into `Date.parse()`\r\n            // valid, so we need to use a regex to restrict date formats. Use a\r\n            // plug-in for anything other than ISO8601 style strings\r\n            if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\r\n                return null;\r\n            }\r\n            var parsed = Date.parse(d);\r\n            return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\r\n        },\r\n    \r\n        // Formatted numbers\r\n        function ( d, settings )\r\n        {\r\n            var decimal = settings.oLanguage.sDecimal;\r\n            return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\r\n        },\r\n    \r\n        // HTML numeric\r\n        function ( d, settings )\r\n        {\r\n            var decimal = settings.oLanguage.sDecimal;\r\n            return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\r\n        },\r\n    \r\n        // HTML numeric, formatted\r\n        function ( d, settings )\r\n        {\r\n            var decimal = settings.oLanguage.sDecimal;\r\n            return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\r\n        },\r\n    \r\n        // HTML (this is strict checking - there must be html)\r\n        function ( d, settings )\r\n        {\r\n            return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\r\n                'html' : null;\r\n        }\r\n    ] );\r\n    \r\n    \r\n    \r\n    // Filter formatting functions. See model.ext.ofnSearch for information about\r\n    // what is required from these methods.\r\n    // \r\n    // Note that additional search methods are added for the html numbers and\r\n    // html formatted numbers by `_addNumericSort()` when we know what the decimal\r\n    // place is\r\n    \r\n    \r\n    $.extend( DataTable.ext.type.search, {\r\n        html: function ( data ) {\r\n            return _empty(data) ?\r\n                data :\r\n                typeof data === 'string' ?\r\n                    data\r\n                        .replace( _re_new_lines, \" \" )\r\n                        .replace( _re_html, \"\" ) :\r\n                    '';\r\n        },\r\n    \r\n        string: function ( data ) {\r\n            return _empty(data) ?\r\n                data :\r\n                typeof data === 'string' ?\r\n                    data.replace( _re_new_lines, \" \" ) :\r\n                    data;\r\n        }\r\n    } );\r\n    \r\n    \r\n    \r\n    var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\r\n        if ( d !== 0 && (!d || d === '-') ) {\r\n            return -Infinity;\r\n        }\r\n    \r\n        // If a decimal place other than `.` is used, it needs to be given to the\r\n        // function so we can detect it and replace with a `.` which is the only\r\n        // decimal place Javascript recognises - it is not locale aware.\r\n        if ( decimalPlace ) {\r\n            d = _numToDecimal( d, decimalPlace );\r\n        }\r\n    \r\n        if ( d.replace ) {\r\n            if ( re1 ) {\r\n                d = d.replace( re1, '' );\r\n            }\r\n    \r\n            if ( re2 ) {\r\n                d = d.replace( re2, '' );\r\n            }\r\n        }\r\n    \r\n        return d * 1;\r\n    };\r\n    \r\n    \r\n    // Add the numeric 'deformatting' functions for sorting and search. This is done\r\n    // in a function to provide an easy ability for the language options to add\r\n    // additional methods if a non-period decimal place is used.\r\n    function _addNumericSort ( decimalPlace ) {\r\n        $.each(\r\n            {\r\n                // Plain numbers\r\n                \"num\": function ( d ) {\r\n                    return __numericReplace( d, decimalPlace );\r\n                },\r\n    \r\n                // Formatted numbers\r\n                \"num-fmt\": function ( d ) {\r\n                    return __numericReplace( d, decimalPlace, _re_formatted_numeric );\r\n                },\r\n    \r\n                // HTML numeric\r\n                \"html-num\": function ( d ) {\r\n                    return __numericReplace( d, decimalPlace, _re_html );\r\n                },\r\n    \r\n                // HTML numeric, formatted\r\n                \"html-num-fmt\": function ( d ) {\r\n                    return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\r\n                }\r\n            },\r\n            function ( key, fn ) {\r\n                // Add the ordering method\r\n                _ext.type.order[ key+decimalPlace+'-pre' ] = fn;\r\n    \r\n                // For HTML types add a search formatter that will strip the HTML\r\n                if ( key.match(/^html\\-/) ) {\r\n                    _ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\r\n                }\r\n            }\r\n        );\r\n    }\r\n    \r\n    \r\n    // Default sort methods\r\n    $.extend( _ext.type.order, {\r\n        // Dates\r\n        \"date-pre\": function ( d ) {\r\n            return Date.parse( d ) || -Infinity;\r\n        },\r\n    \r\n        // html\r\n        \"html-pre\": function ( a ) {\r\n            return _empty(a) ?\r\n                '' :\r\n                a.replace ?\r\n                    a.replace( /<.*?>/g, \"\" ).toLowerCase() :\r\n                    a+'';\r\n        },\r\n    \r\n        // string\r\n        \"string-pre\": function ( a ) {\r\n            // This is a little complex, but faster than always calling toString,\r\n            // http://jsperf.com/tostring-v-check\r\n            return _empty(a) ?\r\n                '' :\r\n                typeof a === 'string' ?\r\n                    a.toLowerCase() :\r\n                    ! a.toString ?\r\n                        '' :\r\n                        a.toString();\r\n        },\r\n    \r\n        // string-asc and -desc are retained only for compatibility with the old\r\n        // sort methods\r\n        \"string-asc\": function ( x, y ) {\r\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n        },\r\n    \r\n        \"string-desc\": function ( x, y ) {\r\n            return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n        }\r\n    } );\r\n    \r\n    \r\n    // Numeric sorting types - order doesn't matter here\r\n    _addNumericSort( '' );\r\n    \r\n    \r\n    $.extend( true, DataTable.ext.renderer, {\r\n        header: {\r\n            _: function ( settings, cell, column, classes ) {\r\n                // No additional mark-up required\r\n                // Attach a sort listener to update on sort - note that using the\r\n                // `DT` namespace will allow the event to be removed automatically\r\n                // on destroy, while the `dt` namespaced event is the one we are\r\n                // listening for\r\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                    if ( settings !== ctx ) { // need to check this this is the host\r\n                        return;               // table, not a nested one\r\n                    }\r\n    \r\n                    var colIdx = column.idx;\r\n    \r\n                    cell\r\n                        .removeClass(\r\n                            column.sSortingClass +' '+\r\n                            classes.sSortAsc +' '+\r\n                            classes.sSortDesc\r\n                        )\r\n                        .addClass( columns[ colIdx ] == 'asc' ?\r\n                            classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                        );\r\n                } );\r\n            },\r\n    \r\n            jqueryui: function ( settings, cell, column, classes ) {\r\n                $('<div/>')\r\n                    .addClass( classes.sSortJUIWrapper )\r\n                    .append( cell.contents() )\r\n                    .append( $('<span/>')\r\n                        .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\r\n                    )\r\n                    .appendTo( cell );\r\n    \r\n                // Attach a sort listener to update on sort\r\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n    \r\n                    var colIdx = column.idx;\r\n    \r\n                    cell\r\n                        .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\r\n                        .addClass( columns[ colIdx ] == 'asc' ?\r\n                            classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                        );\r\n    \r\n                    cell\r\n                        .find( 'span.'+classes.sSortIcon )\r\n                        .removeClass(\r\n                            classes.sSortJUIAsc +\" \"+\r\n                            classes.sSortJUIDesc +\" \"+\r\n                            classes.sSortJUI +\" \"+\r\n                            classes.sSortJUIAscAllowed +\" \"+\r\n                            classes.sSortJUIDescAllowed\r\n                        )\r\n                        .addClass( columns[ colIdx ] == 'asc' ?\r\n                            classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortJUIDesc :\r\n                                column.sSortingClassJUI\r\n                        );\r\n                } );\r\n            }\r\n        }\r\n    } );\r\n    \r\n    /*\r\n     * Public helper functions. These aren't used internally by DataTables, or\r\n     * called by any of the options passed into DataTables, but they can be used\r\n     * externally by developers working with DataTables. They are helper functions\r\n     * to make working with DataTables a little bit easier.\r\n     */\r\n    \r\n    var __htmlEscapeEntities = function ( d ) {\r\n        return typeof d === 'string' ?\r\n            d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') :\r\n            d;\r\n    };\r\n    \r\n    /**\r\n     * Helpers for `columns.render`.\r\n     *\r\n     * The options defined here can be used with the `columns.render` initialisation\r\n     * option to provide a display renderer. The following functions are defined:\r\n     *\r\n     * * `number` - Will format numeric data (defined by `columns.data`) for\r\n     *   display, retaining the original unformatted data for sorting and filtering.\r\n     *   It takes 5 parameters:\r\n     *   * `string` - Thousands grouping separator\r\n     *   * `string` - Decimal point indicator\r\n     *   * `integer` - Number of decimal points to show\r\n     *   * `string` (optional) - Prefix.\r\n     *   * `string` (optional) - Postfix (/suffix).\r\n     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\r\n     *   parameters.\r\n     *\r\n     * @example\r\n     *   // Column definition using the number renderer\r\n     *   {\r\n     *     data: \"salary\",\r\n     *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\r\n     *   }\r\n     *\r\n     * @namespace\r\n     */\r\n    DataTable.render = {\r\n        number: function ( thousands, decimal, precision, prefix, postfix ) {\r\n            return {\r\n                display: function ( d ) {\r\n                    if ( typeof d !== 'number' && typeof d !== 'string' ) {\r\n                        return d;\r\n                    }\r\n    \r\n                    var negative = d < 0 ? '-' : '';\r\n                    var flo = parseFloat( d );\r\n    \r\n                    // If NaN then there isn't much formatting that we can do - just\r\n                    // return immediately, escaping any HTML (this was supposed to\r\n                    // be a number after all)\r\n                    if ( isNaN( flo ) ) {\r\n                        return __htmlEscapeEntities( d );\r\n                    }\r\n    \r\n                    flo = flo.toFixed( precision );\r\n                    d = Math.abs( flo );\r\n    \r\n                    var intPart = parseInt( d, 10 );\r\n                    var floatPart = precision ?\r\n                        decimal+(d - intPart).toFixed( precision ).substring( 2 ):\r\n                        '';\r\n    \r\n                    return negative + (prefix||'') +\r\n                        intPart.toString().replace(\r\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\r\n                        ) +\r\n                        floatPart +\r\n                        (postfix||'');\r\n                }\r\n            };\r\n        },\r\n    \r\n        text: function () {\r\n            return {\r\n                display: __htmlEscapeEntities\r\n            };\r\n        }\r\n    };\r\n    \r\n    \r\n    /*\r\n     * This is really a good bit rubbish this method of exposing the internal methods\r\n     * publicly... - To be fixed in 2.0 using methods on the prototype\r\n     */\r\n    \r\n    \r\n    /**\r\n     * Create a wrapper function for exporting an internal functions to an external API.\r\n     *  @param {string} fn API function name\r\n     *  @returns {function} wrapped function\r\n     *  @memberof DataTable#internal\r\n     */\r\n    function _fnExternApiFunc (fn)\r\n    {\r\n        return function() {\r\n            var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\r\n                Array.prototype.slice.call(arguments)\r\n            );\r\n            return DataTable.ext.internal[fn].apply( this, args );\r\n        };\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Reference to internal functions for use by plug-in developers. Note that\r\n     * these methods are references to internal functions and are considered to be\r\n     * private. If you use these methods, be aware that they are liable to change\r\n     * between versions.\r\n     *  @namespace\r\n     */\r\n    $.extend( DataTable.ext.internal, {\r\n        _fnExternApiFunc: _fnExternApiFunc,\r\n        _fnBuildAjax: _fnBuildAjax,\r\n        _fnAjaxUpdate: _fnAjaxUpdate,\r\n        _fnAjaxParameters: _fnAjaxParameters,\r\n        _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\r\n        _fnAjaxDataSrc: _fnAjaxDataSrc,\r\n        _fnAddColumn: _fnAddColumn,\r\n        _fnColumnOptions: _fnColumnOptions,\r\n        _fnAdjustColumnSizing: _fnAdjustColumnSizing,\r\n        _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\r\n        _fnColumnIndexToVisible: _fnColumnIndexToVisible,\r\n        _fnVisbleColumns: _fnVisbleColumns,\r\n        _fnGetColumns: _fnGetColumns,\r\n        _fnColumnTypes: _fnColumnTypes,\r\n        _fnApplyColumnDefs: _fnApplyColumnDefs,\r\n        _fnHungarianMap: _fnHungarianMap,\r\n        _fnCamelToHungarian: _fnCamelToHungarian,\r\n        _fnLanguageCompat: _fnLanguageCompat,\r\n        _fnBrowserDetect: _fnBrowserDetect,\r\n        _fnAddData: _fnAddData,\r\n        _fnAddTr: _fnAddTr,\r\n        _fnNodeToDataIndex: _fnNodeToDataIndex,\r\n        _fnNodeToColumnIndex: _fnNodeToColumnIndex,\r\n        _fnGetCellData: _fnGetCellData,\r\n        _fnSetCellData: _fnSetCellData,\r\n        _fnSplitObjNotation: _fnSplitObjNotation,\r\n        _fnGetObjectDataFn: _fnGetObjectDataFn,\r\n        _fnSetObjectDataFn: _fnSetObjectDataFn,\r\n        _fnGetDataMaster: _fnGetDataMaster,\r\n        _fnClearTable: _fnClearTable,\r\n        _fnDeleteIndex: _fnDeleteIndex,\r\n        _fnInvalidate: _fnInvalidate,\r\n        _fnGetRowElements: _fnGetRowElements,\r\n        _fnCreateTr: _fnCreateTr,\r\n        _fnBuildHead: _fnBuildHead,\r\n        _fnDrawHead: _fnDrawHead,\r\n        _fnDraw: _fnDraw,\r\n        _fnReDraw: _fnReDraw,\r\n        _fnAddOptionsHtml: _fnAddOptionsHtml,\r\n        _fnDetectHeader: _fnDetectHeader,\r\n        _fnGetUniqueThs: _fnGetUniqueThs,\r\n        _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\r\n        _fnFilterComplete: _fnFilterComplete,\r\n        _fnFilterCustom: _fnFilterCustom,\r\n        _fnFilterColumn: _fnFilterColumn,\r\n        _fnFilter: _fnFilter,\r\n        _fnFilterCreateSearch: _fnFilterCreateSearch,\r\n        _fnEscapeRegex: _fnEscapeRegex,\r\n        _fnFilterData: _fnFilterData,\r\n        _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\r\n        _fnUpdateInfo: _fnUpdateInfo,\r\n        _fnInfoMacros: _fnInfoMacros,\r\n        _fnInitialise: _fnInitialise,\r\n        _fnInitComplete: _fnInitComplete,\r\n        _fnLengthChange: _fnLengthChange,\r\n        _fnFeatureHtmlLength: _fnFeatureHtmlLength,\r\n        _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\r\n        _fnPageChange: _fnPageChange,\r\n        _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\r\n        _fnProcessingDisplay: _fnProcessingDisplay,\r\n        _fnFeatureHtmlTable: _fnFeatureHtmlTable,\r\n        _fnScrollDraw: _fnScrollDraw,\r\n        _fnApplyToChildren: _fnApplyToChildren,\r\n        _fnCalculateColumnWidths: _fnCalculateColumnWidths,\r\n        _fnThrottle: _fnThrottle,\r\n        _fnConvertToWidth: _fnConvertToWidth,\r\n        _fnGetWidestNode: _fnGetWidestNode,\r\n        _fnGetMaxLenString: _fnGetMaxLenString,\r\n        _fnStringToCss: _fnStringToCss,\r\n        _fnSortFlatten: _fnSortFlatten,\r\n        _fnSort: _fnSort,\r\n        _fnSortAria: _fnSortAria,\r\n        _fnSortListener: _fnSortListener,\r\n        _fnSortAttachListener: _fnSortAttachListener,\r\n        _fnSortingClasses: _fnSortingClasses,\r\n        _fnSortData: _fnSortData,\r\n        _fnSaveState: _fnSaveState,\r\n        _fnLoadState: _fnLoadState,\r\n        _fnSettingsFromNode: _fnSettingsFromNode,\r\n        _fnLog: _fnLog,\r\n        _fnMap: _fnMap,\r\n        _fnBindAction: _fnBindAction,\r\n        _fnCallbackReg: _fnCallbackReg,\r\n        _fnCallbackFire: _fnCallbackFire,\r\n        _fnLengthOverflow: _fnLengthOverflow,\r\n        _fnRenderer: _fnRenderer,\r\n        _fnDataSource: _fnDataSource,\r\n        _fnRowAttributes: _fnRowAttributes,\r\n        _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\r\n                                        // in 1.10, so this dead-end function is\r\n                                        // added to prevent errors\r\n    } );\r\n    \r\n\r\n    // jQuery access\r\n    $.fn.dataTable = DataTable;\r\n\r\n    // Provide access to the host jQuery object (circular reference)\r\n    DataTable.$ = $;\r\n\r\n    // Legacy aliases\r\n    $.fn.dataTableSettings = DataTable.settings;\r\n    $.fn.dataTableExt = DataTable.ext;\r\n\r\n    // With a capital `D` we return a DataTables API instance rather than a\r\n    // jQuery object\r\n    $.fn.DataTable = function ( opts ) {\r\n        return $(this).dataTable( opts ).api();\r\n    };\r\n\r\n    // All properties that are available to $.fn.dataTable should also be\r\n    // available on $.fn.DataTable\r\n    $.each( DataTable, function ( prop, val ) {\r\n        $.fn.DataTable[ prop ] = val;\r\n    } );\r\n\r\n\r\n    // Information about events fired by DataTables - for documentation.\r\n    /**\r\n     * Draw event, fired whenever the table is redrawn on the page, at the same\r\n     * point as fnDrawCallback. This may be useful for binding events or\r\n     * performing calculations when the table is altered at all.\r\n     *  @name DataTable#draw.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     */\r\n\r\n    /**\r\n     * Search event, fired when the searching applied to the table (using the\r\n     * built-in global search, or column filters) is altered.\r\n     *  @name DataTable#search.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     */\r\n\r\n    /**\r\n     * Page change event, fired when the paging of the table is altered.\r\n     *  @name DataTable#page.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     */\r\n\r\n    /**\r\n     * Order event, fired when the ordering applied to the table is altered.\r\n     *  @name DataTable#order.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     */\r\n\r\n    /**\r\n     * DataTables initialisation complete event, fired when the table is fully\r\n     * drawn, including Ajax data loaded, if Ajax data is required.\r\n     *  @name DataTable#init.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} oSettings DataTables settings object\r\n     *  @param {object} json The JSON object request from the server - only\r\n     *    present if client-side Ajax sourced data is used</li></ol>\r\n     */\r\n\r\n    /**\r\n     * State save event, fired when the table has changed state a new state save\r\n     * is required. This event allows modification of the state saving object\r\n     * prior to actually doing the save, including addition or other state\r\n     * properties (for plug-ins) or modification of a DataTables core property.\r\n     *  @name DataTable#stateSaveParams.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} oSettings DataTables settings object\r\n     *  @param {object} json The state information to be saved\r\n     */\r\n\r\n    /**\r\n     * State load event, fired when the table is loading state from the stored\r\n     * data, but prior to the settings object being modified by the saved state\r\n     * - allowing modification of the saved state is required or loading of\r\n     * state for a plug-in.\r\n     *  @name DataTable#stateLoadParams.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} oSettings DataTables settings object\r\n     *  @param {object} json The saved state information\r\n     */\r\n\r\n    /**\r\n     * State loaded event, fired when state has been loaded from stored data and\r\n     * the settings object has been modified by the loaded data.\r\n     *  @name DataTable#stateLoaded.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} oSettings DataTables settings object\r\n     *  @param {object} json The saved state information\r\n     */\r\n\r\n    /**\r\n     * Processing event, fired when DataTables is doing some kind of processing\r\n     * (be it, order, searcg or anything else). It can be used to indicate to\r\n     * the end user that there is something happening, or that something has\r\n     * finished.\r\n     *  @name DataTable#processing.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} oSettings DataTables settings object\r\n     *  @param {boolean} bShow Flag for if DataTables is doing processing or not\r\n     */\r\n\r\n    /**\r\n     * Ajax (XHR) event, fired whenever an Ajax request is completed from a\r\n     * request to made to the server for new data. This event is called before\r\n     * DataTables processed the returned data, so it can also be used to pre-\r\n     * process the data returned from the server, if needed.\r\n     *\r\n     * Note that this trigger is called in `fnServerData`, if you override\r\n     * `fnServerData` and which to use this event, you need to trigger it in you\r\n     * success function.\r\n     *  @name DataTable#xhr.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     *  @param {object} json JSON returned from the server\r\n     *\r\n     *  @example\r\n     *     // Use a custom property returned from the server in another DOM element\r\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n     *       $('#status').html( json.status );\r\n     *     } );\r\n     *\r\n     *  @example\r\n     *     // Pre-process the data returned from the server\r\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n     *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\r\n     *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\r\n     *       }\r\n     *       // Note no return - manipulate the data directly in the JSON object.\r\n     *     } );\r\n     */\r\n\r\n    /**\r\n     * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\r\n     * or passing the bDestroy:true parameter in the initialisation object. This\r\n     * can be used to remove bound events, added DOM nodes, etc.\r\n     *  @name DataTable#destroy.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     */\r\n\r\n    /**\r\n     * Page length change event, fired when number of records to show on each\r\n     * page (the length) is changed.\r\n     *  @name DataTable#length.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     *  @param {integer} len New length\r\n     */\r\n\r\n    /**\r\n     * Column sizing has changed.\r\n     *  @name DataTable#column-sizing.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     */\r\n\r\n    /**\r\n     * Column visibility has changed.\r\n     *  @name DataTable#column-visibility.dt\r\n     *  @event\r\n     *  @param {event} e jQuery event object\r\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n     *  @param {int} column Column index\r\n     *  @param {bool} vis `false` if column now hidden, or `true` if visible\r\n     */\r\n\r\n    return $.fn.dataTable;\r\n}));"],"names":["factory","$","window","document","undefined","_ext","_Api","_api_register","_api_registerPlural","DataTable","options","sSelector","oOpts","this","api","_","rows","data","traditional","_fnSettingsFromNode","iApiIndex","fnAddData","redraw","isArray","isPlainObject","add","row","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","col","type","nodeName","toLowerCase","cell","fnGetNodes","iRow","node","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","length","fn","oApi","internal","ext","_fnExternApiFunc","each","iLen","oInit","_fnExtend","i","sId","getAttribute","bInitHandedOff","defaults","$this","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","_fnLog","sTableId","id","splice","_unique","oSettings","models","style","width","push","dataTable","oLanguage","_fnLanguageCompat","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","bJQueryUI","oJUIClasses","sDom","renderer","header","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","find","eq","inArray","map","el","hasClass","removeClass","join","asDestroyStripes","slice","aoColumnsInit","anThs","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnCallbackFire","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","appendTo","tbody","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","bStateSave","_fnSaveState","_fnLoadState","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_htmlNumeric","html","_isHtml","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","sorted","last","_areAllUnique","j","k","again","_fnHungarianMap","o","match","newKey","key","indexOf","_hungarianMap","user","force","hungarianKey","charAt","lang","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","sDecimal","_addNumericSort","util","throttle","freq","timer","frequency","that","now","Date","args","arguments","clearTimeout","setTimeout","apply","escapeRegex","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","scrollLeft","height","overflow","append","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","createElement","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","attr","t","mDataProp","sType","_sManualType","className","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","jen","ken","detectedType","cache","types","detect","_fnGetCellData","aoColDefs","aoCols","jLen","kLen","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnSetCellData","__reArray","__reFn","_fnSplitObjNotation","str","mSource","fetchData","arrayNotation","funcNotation","innerSrc","substring","setData","b","aLast","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","anCells","_aSortData","_aFilterData","cols","_fnRowAttributes","contents","tds","td","objectRead","setter","cellProcess","trim","nextSibling","rowNode","nTrIn","nTd","_DT_RowIndex","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","setAttribute","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","anRows","iRowCount","iStripes","oLang","aoOpenRows","bServerSide","bDrawing","fnRecordsDisplay","iDisplayEnd","fnDisplayEnd","_fnProcessingDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","sRowEmpty","body","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nCell","l","iColShifted","bUnique","nTrs","fnShiftCol","nHeader","aReturn","unique","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","jqXHR","newData","isFunction","baseAjax","sError","sServerMethod","xhr","thrown","ret","readyState","oAjaxData","fnServerData","sAjaxSource","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","e","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","fomatters","wasInvalidated","toString","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","_fnInfoMacros","sInfoPostFix","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","buttons","_fnPageChange","action","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooterInner","divFooterTable","tableEl","tableStyle","ie67","dtHeaderCells","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","sInstance","_fnGetMaxLenString","maxIdx","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","state","time","oSavedState","fnStateSaveCallback","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","level","msg","tn","console","log","sErrMode","errMode","alert","Error","mappedName","extender","breakRefs","blur","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","trigger","result","host","__apiStruct","__arrayProto","Array","prototype","context","ctxSettings","mixed","jq","tables","_toSettings","selector","opts","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","info","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","sel","selInt","closest","rowObj","__row_selector","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_remove","_details","_detailsShow","__details_display","insertAfter","__details_events","off","drawEvent","_child_obj","klass","addRow","created","colSpan","__details_add","_child_mth","_stateDefault","_sortIcon","_headerFooter","__re_column_selector","__columnData","r1","r2","names","visColumns","jqResult","__column_selector","calc","__setColumnVis","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","set","caseInsen","versionCheck","version","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","get","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","bJUI","sSortIcon","wrapper","sSortJUIWrapper","removedMethod","sDestroyWidth","arg1","arg2","arg3","arg4","token","plural","resolved","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","paginate","min","builder","pageButton","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","extPagination","_numbers","numbers","numbers_length","half","DT_el","simple","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","oPaginate","aria","counter","attach","container","button","clickHandler","sFirst","sPageButtonDisabled","sPrevious","sNext","sLast","sPageButtonActive","sPageButton","empty","focus","parsed","string","__numericReplace","decimalPlace","re1","re2","sSortAsc","sSortDesc","jqueryui","sSortJUIAsc","sSortJUIDesc","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnNodeToDataIndex","_fnNodeToColumnIndex","_fnCalculateEnd","dataTableSettings","dataTableExt","define","amd","exports","module","root","require","jQuery"],"mappings":"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"}