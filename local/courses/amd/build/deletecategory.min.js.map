{"version":3,"file":"deletecategory.min.js","sources":["../src/deletecategory.js"],"sourcesContent":["/**\n * local courses\n *\n * @package    local_courses\n * @copyright  2019 eAbyas <eAbyas.in>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {int} contextid\n     * @param {int} categoryid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var DelCategory = function(contextid, categoryid) {\n        \n        this.contextid = contextid;\n        this.categoryid = categoryid;\n       \n        var self = this;\n        self.init();\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    DelCategory.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    DelCategory.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @private\n     * @return {Promise}\n     */\n    DelCategory.prototype.init = function() {\n        var self = this;\n        return Str.get_string('deletecategory', 'local_courses').then(function(title) {\n            // Create the modal.\n            return ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: title,\n                body: self.getBody()\n            });\n        }.bind(self)).then(function(modal) {\n                \n            // Keep a reference to the modal.\n            self.modal = modal;\n            self.modal.show();\n            // Forms are big, we want a big modal.\n            self.modal.setLarge();\n \n            // We want to reset the form every time it is opened.\n            self.modal.getRoot().on(ModalEvents.hidden, function() {\n                self.modal.setBody('');\n            }.bind(this));\n\n            // We want to hide the submit buttons every time it is opened.\n            self.modal.getRoot().on(ModalEvents.shown, function() {\n                self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n            }.bind(this));\n \n\n            // We catch the modal save event, and use it to submit the form inside the modal.\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\n            self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n            // We also catch the form submit event and use it to submit the form with ajax.\n            self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n            return this.modal;\n        }.bind(this));\n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    DelCategory.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        if(typeof this.categoryid != 'undefined'){\n            var params = {categoryid:this.categoryid, jsonformdata: JSON.stringify(formdata)};\n        }else{\n            var params = {};\n        }\n        return Fragment.loadFragment('local_courses', 'deletecategory_form', this.contextid, params);\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    DelCategory.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    DelCategory.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    DelCategory.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        console.log(formData);\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_courses_submit_delete_category_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData),categoryid:this.categoryid},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    DelCategory.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n \n    return /** @alias module:local_courses/init */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {int} contextid The contextid for the category.\n         * @param {int} categoryid categoryid.\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new DelCategory(args.contextid, args.categoryid);\n        },\n        load: function() {\n        },\n        reasonfor_unabletodelete: function(args) {\n            return Str.get_string(\n                'reason',\n                'local_courses'\n            ).then(function(s) {\n                ModalFactory.create({\n                    title: s,\n                    type: ModalFactory.types.DEFAULT,\n                    body: args.reason\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n           suspendonlinetest: function(elem,visible,args) {\n            return Str.get_strings([{\n                key: 'suspendconfirm',\n                component: 'local_courses',\n                param: args,\n            },\n            {\n                key: 'inactiveconfirm',\n                component: 'local_courses',\n                param: args,\n             \n            },\n            {\n                key: 'activeconfirm',\n                component: 'local_courses',\n                param: args,\n            }]).then(function(s) {\n                if (elem.status == \"enable\") {\n                    s[1] = s[1];\n                 } else if (elem.status == \"disable\") {\n                    s[1] = s[2];\n                 }\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+M.util.get_string(\"yes\", \"moodle\")+'</button>&nbsp;' +\n            '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+M.util.get_string(\"no\", \"moodle\")+'</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        window.location.href = M.cfg.wwwroot+'/local/courses/index.php?categoryid='+elem.id+'&visible='+elem.visible+'&hide=1&sesskey='+ M.cfg.sesskey;\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","DelCategory","contextid","categoryid","this","init","prototype","modal","self","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","show","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","console","log","call","methodname","args","done","fail","submit","load","reasonfor_unabletodelete","s","DEFAULT","reason","suspendonlinetest","elem","visible","get_strings","key","component","param","status","footer","util","window","href","cfg","wwwroot","id","sesskey","getFooter"],"mappings":"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"}