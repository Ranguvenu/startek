{"version":3,"file":"notifications.min.js","sources":["../src/notifications.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_notification/newnotification\n * @class      NewNotification\n * @package    local_notification\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewNotification = function(args, notificationid, instance, plugin) {\n\n        this.contextid = args.context;\n        this.id = args.id;\n        this.notificationid = notificationid;\n        this.instance = instance;\n        this.plugin = plugin;\n        var self = this;\n        this.args = args;\n        self.init(args);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewNotification.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewNotification.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewNotification.prototype.init = function(args) {\n        //var triggers = $(selector);\n        var self = this;\n        // Fetch the title string.\n            // $(\"#id_reminderdays\").css(\"display\",\"none\");\n            // $(\"input[name='reminderdays']\").hide();\n            // var editid = $(this).data(\"value\");\n            // var existclass = $(this).attr(\"class\");\n            // if (existclass) {\n            //     self.notificationid = '';\n            // } else if(editid){\n            //     self.notificationid = editid;\n            // }\n            if(args.id){\n                self.notificationid = args.id;\n            }else{\n                self.notificationid = 0;\n            }\n            if (self.notificationid) {\n                // self.userid = editid;\n                // console.log(self.userid);\n                var head =  {key: 'update_notification', component: 'local_notifications'};\n                // alert(self.userid);\n            }else{\n               var head =  {key: 'create_notification', component: 'local_notifications'};\n            }\n            var strings = Str.get_strings([head\n            , {\n                key: 'save_continue',\n                component: 'local_users'\n            }, {\n                key: 'cancel',\n                component: 'moodle'\n            }, {\n                key: 'no',\n                component: 'moodle'\n            }])\n            return strings.then(function(str) {\n                // Create the modal.\n                return ModalFactory.create({\n                type: ModalFactory.types.DEFAULT,\n                title: str[0],\n                body: this.getBody(),\n                footer: this.getFooter(str),\n                });\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n                // self.modal.show();\n                // Forms are big, we want a big modal.\n                this.modal.setLarge(); \n                \n                this.modal.getRoot().addClass('openLMStransition local_notifications');\n\n                // this.modal.getRoot().on(ModalEvents.hidden, function() {\n                //     this.modal.setBody('');\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    //setTimeout(function(){\n                        modal.destroy();\n                    //}, 5000);\n                }.bind(this));\n\n                this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n\n                // this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                //     modal.setBody('');\n                //     modal.hide();\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                    modal.hide();\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 5000);\n                    // modal.destroy();\n                });\n\n                this.modal.getFooter().find('[data-action=\"skip\"]').on('click', function() {\n                    self.args.form_status = self.args.form_status + 1;\n                    var data = self.getBody();\n                    data.then(function(html, js) {\n                        if(html === false) {\n                            window.location.reload();\n                        }\n                    });\n                    modal.setBody(data);\n                });\n\n                if(self.args.callback == 'notification_form'){\n                    $(document).on('click', '.custom_notification_form_redirect', function(){\n                        var instanceid = $(\"#notificationid\").val();\n                        if(instanceid > 0){\n                            self.args.form_status = $(this).data('value');\n                            var data = self.getBody();\n                            data.then(function(html, js) {\n                                if (html === false) {\n                                  // window.location.reload();\n                                    self.handleFormSubmissionResponse(args);\n                                }\n                            });\n                            modal.setBody(data);\n                            // if(self.args.form_status==0){\n                            //     $('[data-action=\"skip\"]').css('display', 'none');\n                            //     $('[data-action=\"previous\"]').css('display', 'none');\n                            // }else{\n                            //     $('[data-action=\"skip\"]').css('display', 'block');\n                            //     $('[data-action=\"previous\"]').css('display', 'block');\n                            // }\n                        }\n                    });\n                }\n\n                this.modal.getRoot().on('submit', 'form', function(form) {\n                    self.submitFormAjax(form, self.args);\n                });\n                this.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n\n                return this.modal;\n            }.bind(this));       \n        \n        \n        // });\n        \n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewNotification.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // console.log(this);\n        // alert(formdata);\n        // Get the content of the modal.\n        // this.args.userid = this.userid\n        this.args.jsonformdata = JSON.stringify(formdata);\n        return Fragment.loadFragment('local_notifications', 'new_notification_form', this.contextid, this.args);\n    };\n    /**\n     * @method getFooter\n     * @private\n     * @return {Promise}\n     */\n    NewNotification.prototype.getFooter = function(str) {\n        // var templateContext;\n        // var modalPromise = Templates.render('local_classroom/form_actions', templateContext)\n        // .done(function(html) {\n        // console.log(html);\n        // });\n\n        $footer = '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+str[1]+'</button>&nbsp;';\n        // $style = 'style=\"display:none;\"';\n        // $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"skip\" ' + $style + ' >Skip</button>&nbsp;';\n        $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+str[2]+'</button>';\n        return $footer;\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewNotification.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        // document.location.reload();\n        // This will be the context for our template. So {{name}} in the template will resolve to \"Tweety bird\".\n        var context = { id: args.id};\n        // // This will call the function to load and render our template.\n        // templates.render('local_classroom/classroomview', context);\n\n        // // It returns a promise that needs to be resoved.\n        //     .then(function(html, js) {\n                var modalPromise = ModalFactory.create({\n                    type: ModalFactory.types.DEFAULT,\n                    body: Templates.render('local_classroom/classroomview', context),\n                });\n                $.when(modalPromise).then(function(modal) {\n                    // modal.setTitle('Hi');\n                    // // modal.setBody('Hi');\n                    // modal.show();\n                    // return modal;\n                }).fail(Notification.exception);\n\n\n            //     // Here eventually I have my compiled template, and any javascript that it generated.\n            //     // The templates object has append, prepend and replace functions.\n            //     templates.appendNodeContents('.block_looneytunes .content', source, javascript);\n            // }).fail(function(ex) {\n            //     // Deal with this exception (I recommend core/notify exception function for this).\n            // });\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewNotification.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewNotification.prototype.submitFormAjax = function(e ,args) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n        var self = this;\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // var methodname = args.plugintype + '_' + args.pluginname + '_submit_create_user_form';\n        var methodname = 'local_notifications_submit_create_notification_form';\n        var params = {};\n        params.contextid = this.contextid;\n        params.jsonformdata = JSON.stringify(formData);\n        params.form_status = args.form_status;\n\n        var promise = Ajax.call([{\n            methodname: methodname,\n            args: params\n        }]);\n\n         promise[0].done(function(resp){\n            // alert(resp.form_status);\n            if(resp.form_status !== -1 && resp.form_status !== false) {\n                self.args.form_status = resp.form_status;\n                self.args.id = resp.id;\n                self.handleFormSubmissionFailure();\n            } else {\n                // self.handleFormSubmissionResponse(self.args);\n                // alert('here');\n                self.modal.hide();\n                window.location.reload();\n            }\n            if(args.form_status > 0) {\n                $('[data-action=\"skip\"]').css('display', 'inline-block');\n            }\n        }).fail(function(ex){\n            self.handleFormSubmissionFailure(formData);\n        })\n        // alert(this.contextid);\n        // Now we can continue...\n        // Ajax.call([{\n        //     methodname: 'local_users_submit_create_user_form',\n        //     args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n        //     done: this.handleFormSubmissionResponse.bind(this, formData),\n        //     fail: this.handleFormSubmissionFailure.bind(this, formData)\n        // }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewNotification.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n \n    return /** @alias module:local_users/newuser */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new NewNotification(args);\n        },\n        load: function(){\n\n        }\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewNotification","args","notificationid","instance","plugin","contextid","context","id","this","init","prototype","modal","self","head","key","component","get_strings","then","str","create","type","types","DEFAULT","title","body","getBody","footer","getFooter","bind","setLarge","getRoot","addClass","on","hidden","animate","destroy","find","submitForm","hide","setTimeout","form_status","data","html","js","window","location","reload","setBody","callback","document","val","handleFormSubmissionResponse","form","submitFormAjax","show","formdata","jsonformdata","JSON","stringify","loadFragment","$footer","use","M","core_formchangechecker","reset_form_dirty_state","modalPromise","Templates","render","when","fail","Notification","exception","handleFormSubmissionFailure","e","preventDefault","formData","serialize","params","call","methodname","done","resp","css","ex","submit","load"],"mappings":"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"}