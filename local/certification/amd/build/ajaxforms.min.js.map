{"version":3,"file":"ajaxforms.min.js","sources":["../src/ajaxforms.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     core_group/AjaxForms\n * @class      AjaxForms\n * @package    core_group\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'core/yui',\n        'core/templates',\n        'local_certification/select2',\n        'local_certification/certification'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y, Templates, select2, Certification) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    certificationlastchildpopup=function(args) {\n            $.ajax({\n                type: \"POST\",\n                url:   M.cfg.wwwroot + '/local/certification/ajax.php',\n                data: { certificationid: args.id,action:'certificationlastchildpopup',\n                    sesskey: M.cfg.sesskey\n                },\n                success: function(returndata) {\n                    //Var returned_data is ONLY available inside this fn!\n                        ModalFactory.create({\n                        title: Str.get_string('certification_info', 'local_certification'),\n                        body: returndata\n                      }).done(function(modal) {\n                        // Do what you want with your new modal.\n                        modal.show();\n                         modal.setLarge();\n                         modal.getRoot().addClass('openLMStransition');\n                            modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                            modal.getRoot().on(ModalEvents.hidden, function() {\n                            modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                                    setTimeout(function(){\n                                    modal.destroy();\n                                }, 1000);\n                            }.bind(this));\n                            $(\".close\").click(function(){\n                                window.location.href =  window.location.href;\n                            });\n                         //return modal;\n                      });\n                }\n            });\n    };\n    var AjaxForms = function(args) {\n        this.contextid = args.contextid;\n        this.args = args;\n        this.init(args);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    AjaxForms.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    AjaxForms.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    AjaxForms.prototype.init = function(args) {\n        // Fetch the title string.\n        var self = this;\n        //console.log(args);\n            switch (args.callback) {\n                case 'certification_form':\n                        switch (args.id) {\n                            case 0:\n                                header_label='createcertification';\n                                break;\n                            default:\n                                 header_label='updatecertification';\n                        }\n                    break;\n                case 'session_form':\n                        switch (args.id) {\n                            case 0:\n                                header_label='addsession';\n                                break;\n                            default:\n                                 header_label='updatesession';\n                        }\n                    break;\n                case 'course_form':\n                        switch (args.id) {\n                            case 0:\n                                header_label='addcourses';\n                                break;\n                            default:\n                                 header_label='updatecourses';\n                        }\n                    break;\n                case 'certification_completion_form':\n                                 header_label='certification_completion_settings';\n                break;\n            }\n            var strings = Str.get_strings([{\n                key: header_label,\n                component: 'local_certification',\n            },{\n                key: 'savechanges',\n                component: 'moodle'\n            },{\n                key: 'previous',\n                component: 'moodle'\n            },{\n                key: 'skip',\n                component: 'local_users'\n            },{\n                key: 'cancel',\n                component: 'moodle'\n            }]);\n        return strings.then(function(str) {\n            // Create the modal.\n            return ModalFactory.create({\n                type: ModalFactory.types.DEFAULT,\n                title: str[0],\n                body: this.getBody(),\n                footer: this.getFooter(str),\n            });\n        }.bind(this)).then(function(modal) {\n            // Keep a reference to the modal.\n            this.modal = modal;\n\n            // Forms are big, we want a big modal.\n            this.modal.setLarge();\n\n            this.modal.getRoot().addClass('openLMStransition local_certification');\n\n            // We want to reset the form every time it is opened.\n            this.modal.getRoot().on(ModalEvents.hidden, function() {\n                this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                setTimeout(function(){\n                    modal.destroy();\n                }, 1000);\n                // this.modal.destroy();\n            }.bind(this));\n            this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\n            this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                window.location.href =  window.location.href;\n                //modal.hide();\n                //setTimeout(function(){\n                //    modal.destroy();\n                //}, 1000);\n                // modal.destroy();\n            });\n            this.modal.getFooter().find('[data-action=\"skip\"]').on('click', function() {\n                self.args.form_status = self.args.form_status + 1;\n                 //console.log(args.form_status);\n                if (args.form_status == 4) {\n                // OL-1042 Add Target Audience to Certifications//\n                    certificationlastchildpopup(args);\n                 }\n                var data = self.getBody();\n                data.then(function(html, js) {\n                    if (html === false) {\n                        // window.location.reload();\n                        self.handleFormSubmissionResponse(args);\n                        $('#viewcertifications').dataTable().destroy();\n                        Certification.Datatable();\n                    }\n                });\n                modal.setBody(data);\n                if(self.args.form_status == 3){\n                    $('[data-action=\"skip\"]').css('display', 'none');\n                }\n            });\n            this.modal.getFooter().find('[data-action=\"previous\"]').on('click', function() {\n                self.args.form_status = self.args.form_status - 1;\n                var data = self.getBody();\n                data.then(function(html, js) {\n                    if (html === false) {\n                        // window.location.reload();\n                        self.handleFormSubmissionResponse(args);\n                        \n                    }\n                });\n                modal.setBody(data);\n                if (self.args.form_status == 0) {\n                    $('[data-action=\"skip\"]').css('display', 'none');\n                    $('[data-action=\"previous\"]').css('display', 'none');\n                }else if(self.args.form_status < 3){\n                    $('[data-action=\"skip\"]').css('display', 'inline-block');\n                    $('[data-action=\"previous\"]').css('display', 'inline-block');\n                }\n            });\n            if(self.args.callback == 'certification_form'){\n                // if(instanceid > 0){\n                $(document).on('click', '.custom_certification_form_redirect', function(){\n                    var instanceid = $(\"#certificationid\").val();\n                    if(instanceid > 0){\n                        self.args.form_status = $(this).data('value');\n                        var data = self.getBody();\n                        data.then(function(html, js) {\n                            if (html === false) {\n                              // window.location.reload();\n                                self.handleFormSubmissionResponse(args);\n                            }\n                        });\n                        modal.setBody(data);\n                        if (self.args.form_status == 0) {\n                            $('[data-action=\"skip\"]').css('display', 'none');\n                            $('[data-action=\"previous\"]').css('display', 'none');\n                        }else if(self.args.form_status < 4){\n                            $('[data-action=\"skip\"]').css('display', 'inline-block');\n                            $('[data-action=\"previous\"]').css('display', 'inline-block');\n                        }\n                    }\n                });\n            }\n\n            this.modal.getRoot().on('submit', 'form', function(form) {\n                self.submitFormAjax(form, self.args);\n            });\n            this.modal.show();\n            this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n            $(\".close\").click(function(){\n              window.location.href =  window.location.href;\n            });\n            return this.modal;\n        }.bind(this));\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    AjaxForms.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n//console.log('#########');\n//        console.log(formdata);\n        // Get the content of the modal.\n        this.args.jsonformdata = JSON.stringify(formdata);\n        return Fragment.loadFragment(this.args.component, this.args.callback, this.contextid, this.args);\n    };\n    /**\n     * @method getFooter\n     * @private\n     * @return {Promise}\n     */\n    AjaxForms.prototype.getFooter = function(str) {\n        // var templateContext;\n        // var modalPromise = Templates.render('local_certification/form_actions', templateContext)\n        // .done(function(html) {\n        // console.log(html);\n        // });\n\n        $footer = '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+str[1]+'</button>&nbsp;';\n        if (this.args.form_status == 0) {\n            $style = 'style=\"display:none;\"';\n            $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"previous\" ' + $style + '>'+str[2]+'</button>&nbsp;';\n            $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"skip\" ' + $style + '>'+str[3]+'</button>&nbsp;';\n        }\n        $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+str[4]+'</button>';\n        return $footer;\n    };\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    AjaxForms.prototype.handleFormSubmissionResponse = function(args) {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        if (args.form_status == -2) {\n            window.location.reload();\n        }\n        // This will be the context for our template. So {{name}} in the template will resolve to \"Tweety bird\".\n        // var context = { id: args.id};\n\n        // var modalPromise = ModalFactory.create({\n        //     type: ModalFactory.types.DEFAULT,\n        //     body: Templates.render('local_certification/certificationview', context),\n        // });\n        // $.when(modalPromise).then(function(modal) {\n        //     modal.setTitle('Hi');\n        //     modal.show();\n        //     return modal;\n        // }).fail(Notification.exception);\n        //  switch (args.callback) {\n        //         case 'certification_form':\n        //                 switch (args.id) {\n        //                     case 0:\n        //                         header_label='createcertification';\n        //                         break;\n        //                     default:\n        //                          header_label='updatecertification';\n        //                 }\n        //             break;\n        // }\n        //console.log(args.form_status);\n        certificationlastchildpopup(args);\n        //$('#viewcertifications').dataTable().destroy();\n        //Certification.Datatable();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    AjaxForms.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    AjaxForms.prototype.submitFormAjax = function(e, args) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n        var self = this;\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        var methodname = args.plugintype + '_' + args.pluginname + '_submit_instance';\n        // Now we can continue...\n        var params = {};\n        params.contextid = this.contextid;\n        params.jsonformdata = JSON.stringify(formData);\n        params.form_status = args.form_status;\n\n        var promise = Ajax.call([{\n            methodname: methodname,\n            args: params\n        }]);\n        promise[0].done(function(resp){\n            self.args.form_status = resp.form_status;\n            if (resp.form_status >= 0 && resp.form_status !== false) {\n                self.args.form_status = resp.form_status;\n                self.args.id = resp.id;\n                self.handleFormSubmissionFailure();\n            } else {\n                self.handleFormSubmissionResponse(self.args);\n            }\n            if (args.form_status > 0) {\n                $('[data-action=\"skip\"]').css('display', 'inline-block');\n                $('[data-action=\"previous\"]').css('display', 'inline-block');\n            }\n            if (args.form_status == 3 ) {\n                $('[data-action=\"skip\"]').css('display', 'none');\n            }\n        }).fail(function(ex){\n            self.handleFormSubmissionFailure(formData);\n        });\n\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    AjaxForms.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:core_group/AjaxForms */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new AjaxForms(args);\n        },\n        load: function () {\n\n        }\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Templates","select2","Certification","certificationlastchildpopup","args","ajax","type","url","M","cfg","wwwroot","data","certificationid","id","action","sesskey","success","returndata","create","title","get_string","body","done","modal","show","setLarge","getRoot","addClass","animate","on","hidden","setTimeout","destroy","bind","this","click","window","location","href","AjaxForms","contextid","init","prototype","self","callback","header_label","get_strings","key","component","then","str","types","DEFAULT","getBody","footer","getFooter","find","submitForm","form_status","html","js","handleFormSubmissionResponse","dataTable","Datatable","setBody","css","document","val","form","submitFormAjax","formdata","jsonformdata","JSON","stringify","loadFragment","$footer","$style","hide","use","core_formchangechecker","reset_form_dirty_state","reload","handleFormSubmissionFailure","e","preventDefault","formData","serialize","methodname","plugintype","pluginname","params","call","resp","fail","ex","submit","load"],"mappings":"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"}