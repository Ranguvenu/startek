{"version":3,"file":"addelements.min.js","sources":["../src/addelements.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_location/location\n * @class      NewInstitute\n * @package    local_location\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewAddelement = function(args) {\n        console.log(args);\n        this.contextid = args.contextid;\n        this.tid = args.templateid;\n        this.action = args.action;\n        this.element = $('#id_element_0').val();\n        var self = this;\n        self.init(args.selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewAddelement.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewAddelement.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewAddelement.prototype.init = function(args) {\n        console.log(args);\n    \n        var self = this;\n\n            var editid = $(this).data('value');\n            //if (editid) {\n            //    self.instituteid = editid;\n            //    console.log(self.instituteid);\n            //    alert(self.instituteid);\n            //}\n            return Str.get_string('editelement', 'local_certification').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n\n                // Keep a reference to the modal.\n                self.modal = modal;\n                self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody(self.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                return this.modal;\n            }.bind(this));\n\n\n        // });\n\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewAddelement.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // alert(formdata);\n        // Get the content of the modal.\n        var params = {contextid:this.contextid,templateid:this.tid,action:this.action,element:this.element,jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('local_certification', 'edit_element_form', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewAddelement.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewAddelement.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewAddelement.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        //console.log(formData);\n      \n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_certification_submit_elements_form',\n            args: {contextid:this.contextid,templateid:this.tid,action:this.action,element:this.element,jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewAddelement.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_location/newlocation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n\n            return new NewAddelement(args);\n        },\n        load: function(){\n\n        }\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewAddelement","args","console","log","contextid","tid","templateid","action","element","val","this","init","selector","prototype","modal","self","data","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","show","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","e","preventDefault","formData","find","serialize","call","methodname","done","fail","submit","load"],"mappings":";;;;;;;;AAQAA,yCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aAC/F,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAU5DC,cAAgB,SAASC,MACzBC,QAAQC,IAAIF,WACPG,UAAYH,KAAKG,eACjBC,IAAMJ,KAAKK,gBACXC,OAASN,KAAKM,YACdC,QAAUf,EAAE,iBAAiBgB,MACvBC,KACNC,KAAKV,KAAKW,kBAOnBZ,cAAca,UAAUC,MAAQ,KAMhCd,cAAca,UAAUT,WAAa,EASrCJ,cAAca,UAAUF,KAAO,SAASV,MACpCC,QAAQC,IAAIF,UAERc,KAAOL,KAEMjB,EAAEiB,MAAMM,KAAK,gBAMnBtB,IAAIuB,WAAW,cAAe,uBAAuBC,KAAK,SAASC,cAE/DxB,aAAayB,OAAO,CACvBC,KAAM1B,aAAa2B,MAAMC,YACzBJ,MAAOA,MACPK,KAAMT,KAAKU,aAEjBC,KAAKX,OAAOG,KAAK,SAASJ,cAGxBC,KAAKD,MAAQA,MACbC,KAAKD,MAAMa,OAEXZ,KAAKD,MAAMc,WAGXb,KAAKD,MAAMe,UAAUC,GAAGlC,YAAYmC,OAAQ,WACxChB,KAAKD,MAAMkB,QAAQjB,KAAKU,YAC1BC,KAAKhB,OAGPK,KAAKD,MAAMe,UAAUC,GAAGlC,YAAYqC,MAAO,WACvClB,KAAKD,MAAMe,UAAUK,OAAO,0EAC9BR,KAAKhB,OAKPK,KAAKD,MAAMe,UAAUC,GAAGlC,YAAYuC,KAAMpB,KAAKqB,WAAWV,KAAKX,OAE/DA,KAAKD,MAAMe,UAAUC,GAAG,SAAU,OAAQf,KAAKsB,eAAeX,KAAKX,OAC5DL,KAAKI,OACdY,KAAKhB,QAYfV,cAAca,UAAUY,QAAU,SAASa,eACf,IAAbA,WACPA,SAAW,QAIXC,OAAS,CAACnC,UAAUM,KAAKN,UAAUE,WAAWI,KAAKL,IAAIE,OAAOG,KAAKH,OAAOC,QAAQE,KAAKF,QAAQgC,aAAcC,KAAKC,UAAUJ,kBACzHzC,SAAS8C,aAAa,sBAAuB,oBAAqBjC,KAAKN,UAAWmC,SAQ7FvC,cAAca,UAAU+B,6BAA+B,gBAC9C9B,MAAM+B,OAGX9C,EAAE+C,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAE7BC,SAASC,SAASC,UAQtBpD,cAAca,UAAUwC,4BAA8B,SAASrC,WAGtDF,MAAMkB,QAAQtB,KAAKe,QAAQT,QAUpChB,cAAca,UAAUwB,eAAiB,SAASiB,GAE9CA,EAAEC,qBAGEC,SAAW9C,KAAKI,MAAMe,UAAU4B,KAAK,QAAQC,YAIjD5D,KAAK6D,KAAK,CAAC,CACPC,WAAY,2CACZ3D,KAAM,CAACG,UAAUM,KAAKN,UAAUE,WAAWI,KAAKL,IAAIE,OAAOG,KAAKH,OAAOC,QAAQE,KAAKF,QAAQgC,aAAcC,KAAKC,UAAUc,WACzHK,KAAMnD,KAAKkC,6BAA6BlB,KAAKhB,KAAM8C,UACnDM,KAAMpD,KAAK2C,4BAA4B3B,KAAKhB,KAAM8C,cAW1DxD,cAAca,UAAUuB,WAAa,SAASkB,GAC1CA,EAAEC,iBACS7C,KACNI,MAAMe,UAAU4B,KAAK,QAAQM,UAGiB,CAUnDpD,KAAM,SAASV,aAEJ,IAAID,cAAcC,OAE7B+D,KAAM"}