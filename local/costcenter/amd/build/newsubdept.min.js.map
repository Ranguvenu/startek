{"version":3,"file":"newsubdept.min.js","sources":["../src/newsubdept.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_costcenter/NewSubdept\n * @class      NewSubdept\n * @package    local_costcenter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {object} args\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewSubdept = function(args) {\n        this.contextid = args.contextid;\n        this.subdept = args.subdept;\n        this.dept = args.dept;        \n        this.costcenterid = args.costcenterid;\n        this.parentid = args.parentid;\n        this.selector = args.selector;\n        var self = this;\n        self.init();\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewSubdept.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewSubdept.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     * @private\n     * @return {Promise}\n     */\n    NewSubdept.prototype.init = function() {\n        var self = this; \n\n        var editid = $(this).data('value');\n        if (editid) {\n            self.costcenterid = editid;\n        }\n        if (self.dept) {           \n            var head =  Str.get_string('adnewdept', 'local_costcenter');            \n        }else{\n           var head =  Str.get_string('adnewsubdept', 'local_costcenter');\n        }\n        return head.then(function(title) {\n            // Create the modal.\n            return ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: title,\n                body: self.getBody()\n            });\n        }.bind(self)).then(function(modal) {\n            \n            // Keep a reference to the modal.\n            self.modal = modal;           \n            self.modal.getRoot().addClass('openLMStransition local_costcenter');\n            // Forms are big, we want a big modal.\n            self.modal.setLarge();\n \n            // We want to reset the form every time it is opened.\n            self.modal.getRoot().on(ModalEvents.hidden, function() {\n                self.modal.setBody(self.getBody());\n                self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                setTimeout(function(){\n                    modal.destroy();\n                }, 1000);\n                \n            }.bind(this));\n\n            \n            // We want to hide the submit buttons every time it is opened.\n            self.modal.getRoot().on(ModalEvents.shown, function() {\n                self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n            }.bind(this));\n \n\n            // We catch the modal save event, and use it to submit the form inside the modal.\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\n            self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n            // We also catch the form submit event and use it to submit the form with ajax.\n            self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n\n            this.modal.show();\n            this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n            return this.modal;\n        }.bind(this));\n        \n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewSubdept.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {costcenterid:this.costcenterid, jsonformdata: JSON.stringify(formdata),parentid:this.parentid,subdept:this.subdept,dept:this.dept,selector:this.selector};\n        return Fragment.loadFragment('local_costcenter', 'new_costcenterform', this.contextid, params);\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewSubdept.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewSubdept.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewSubdept.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_costcenter_submit_costcenterform_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewSubdept.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n    return /** @alias module:local_costcenter/newcostcenter */ {\n                // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {object} args\n         * @return {Promise}\n        */\n        init: function(args) {\n            return new NewSubdept(args);\n        },\n        load: function(){\n\n        }\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewSubdept","args","contextid","subdept","dept","costcenterid","parentid","selector","this","init","prototype","modal","self","editid","data","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","addClass","setLarge","on","hidden","setBody","animate","setTimeout","destroy","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","e","preventDefault","formData","find","serialize","call","methodname","done","fail","submit","load"],"mappings":";;;;;;;;AAQAA,qCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aAC/F,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAS5DC,WAAa,SAASC,WACjBC,UAAYD,KAAKC,eACjBC,QAAUF,KAAKE,aACfC,KAAOH,KAAKG,UACZC,aAAeJ,KAAKI,kBACpBC,SAAWL,KAAKK,cAChBC,SAAWN,KAAKM,SACVC,KACNC,eAOTT,WAAWU,UAAUC,MAAQ,KAM7BX,WAAWU,UAAUR,WAAa,EAOlCF,WAAWU,UAAUD,KAAO,eACpBG,KAAOJ,KAEPK,OAASpB,EAAEe,MAAMM,KAAK,YACtBD,SACAD,KAAKP,aAAeQ,QAEpBD,KAAKR,SACDW,KAAQrB,IAAIsB,WAAW,YAAa,yBAErCD,KAAQrB,IAAIsB,WAAW,eAAgB,2BAEvCD,KAAKE,KAAK,SAASC,cAEfvB,aAAawB,OAAO,CACvBC,KAAMzB,aAAa0B,MAAMC,YACzBJ,MAAOA,MACPK,KAAMX,KAAKY,aAEjBC,KAAKb,OAAOK,KAAK,SAASN,cAGxBC,KAAKD,MAAQA,MACbC,KAAKD,MAAMe,UAAUC,SAAS,sCAE9Bf,KAAKD,MAAMiB,WAGXhB,KAAKD,MAAMe,UAAUG,GAAGjC,YAAYkC,OAAQ,WACxClB,KAAKD,MAAMoB,QAAQnB,KAAKY,WACxBZ,KAAKD,MAAMe,UAAUM,QAAQ,OAAS,QAAS,KAC/CC,YAAW,WACPtB,MAAMuB,YACP,MAELT,KAAKjB,OAIPI,KAAKD,MAAMe,UAAUG,GAAGjC,YAAYuC,MAAO,WACvCvB,KAAKD,MAAMe,UAAUU,OAAO,0EAC9BX,KAAKjB,OAKPI,KAAKD,MAAMe,UAAUG,GAAGjC,YAAYyC,KAAMzB,KAAK0B,WAAWb,KAAKb,OAE/DA,KAAKD,MAAMe,UAAUG,GAAG,SAAU,OAAQjB,KAAK2B,eAAed,KAAKb,YAE9DD,MAAM6B,YACN7B,MAAMe,UAAUM,QAAQ,OAAS,MAAO,KACtCxB,KAAKG,OACdc,KAAKjB,QASXR,WAAWU,UAAUc,QAAU,SAASiB,eACZ,IAAbA,WACPA,SAAW,QAGXC,OAAS,CAACrC,aAAaG,KAAKH,aAAcsC,aAAcC,KAAKC,UAAUJ,UAAUnC,SAASE,KAAKF,SAASH,QAAQK,KAAKL,QAAQC,KAAKI,KAAKJ,KAAKG,SAASC,KAAKD,iBACvJV,SAASiD,aAAa,mBAAoB,qBAAsBtC,KAAKN,UAAWwC,SAQ3F1C,WAAWU,UAAUqC,6BAA+B,gBAC3CpC,MAAMqC,OAGXjD,EAAEkD,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAE7BC,SAASC,SAASC,UAQtBvD,WAAWU,UAAU8C,4BAA8B,SAAS1C,WAGnDH,MAAMoB,QAAQvB,KAAKgB,QAAQV,QAUpCd,WAAWU,UAAU6B,eAAiB,SAASkB,GAE3CA,EAAEC,qBAGEC,SAAWnD,KAAKG,MAAMe,UAAUkC,KAAK,QAAQC,YAEjD/D,KAAKgE,KAAK,CAAC,CACPC,WAAY,8CACZ9D,KAAM,CAACC,UAAWM,KAAKN,UAAWyC,aAAcC,KAAKC,UAAUc,WAC/DK,KAAMxD,KAAKuC,6BAA6BtB,KAAKjB,KAAMmD,UACnDM,KAAMzD,KAAKgD,4BAA4B/B,KAAKjB,KAAMmD,cAW1D3D,WAAWU,UAAU4B,WAAa,SAASmB,GACvCA,EAAEC,iBACSlD,KACNG,MAAMe,UAAUkC,KAAK,QAAQM,UAEqB,CASvDzD,KAAM,SAASR,aACJ,IAAID,WAAWC,OAE1BkE,KAAM"}