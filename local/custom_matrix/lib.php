<?php

/**
 * This file is part of eAbyas
 *
 * Copyright eAbyas Info Solutons Pvt Ltd, India
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author eabyas  <info@eabyas.in>
 * @package Bizlms 
 * @subpackage local_custom_matrix
 */
require_once(dirname(__FILE__) . '/../../config.php');
require_once($CFG->dirroot . '/lib/moodlelib.php');
require_once($CFG->dirroot . '/blocks/performance_matrix/lib.php');
global $CFG;

/**
 * To get course categories.
 *
 * @param int $moduleid module id
 * @param string $moduletype module type
 * @return object
 */
function get_module_custom_categories($moduleid,$moduletype){
    global $DB;
    $custom_categories_sql = "SELECT cm.id,cm.parentid,cm.costcenterid FROM {local_custom_matrix} cm
                                JOIN {course} c ON c.performancecatid = cm.id
                                WHERE c.id = :moduleid ";      
    $custom_categories = $DB->get_records_sql($custom_categories_sql, array('moduletype'=>$moduletype, 'moduleid'=>$moduleid)); 
    return   $custom_categories ;
}
/**
 * To get performance category set data in object form.
 *
 * @param object $event event generated by course
 * @param string $moduletype module type
 * @param int $moduleid module type
 * @param object $performance its the performance object data
 * @return object
 */
function performance_object($event,$moduletype,$moduleid,$performance){
        
    $performance_obj = new stdClass();
    $currentDate = new DateTime(); 
    $year = $currentDate->format("Y"); 
    $month = $currentDate->format("F"); 
    $performance_obj->userid = $event->relateduserid;
    $performance_obj->moduletype = $moduletype;
    $performance_obj->moduleid = $moduleid;
    $performance_obj->performancetype = $performance->performancetype;
    $performance_obj->performancecatid = $performance->performancecatid;
    $performance_obj->parentid = $performance->parentid;
    $performance_obj->month = $month;
    $performance_obj->year = $year;
    $performance_obj->maxpoints = $performance->maxscore;
    $performance_obj->pointsachieved = $performance->pointsachieved;
    $performance_obj->weightage = ($performance->weightage) ? $performance->weightage : 0;    
    $performance_obj->type = $performance->type;
    $performance_obj->templateid = $performance->templateid;
    $periodtype = get_config('local_custom_matrix','performance_period_type');
    $current_month = date('M',time());
    $period = get_current_period($periodtype,$current_month); 
    $performance_obj->financialyear = get_financialyear();
    $performance_obj->period =  $period;  
    $performance_obj->role =  user_designation_position($event->relateduserid);     
    return $performance_obj;
}
/**
 * To get user performance log data.
 *
 * @param object $event event generated by course
 * @param string $moduletype module type
 * @param int $moduleid module type
 * @param object $performance its the performance object data
 */
function user_performance_logs($event,$moduletype,$moduleid,$performance){
    global $DB;
    $performance_obj = new stdClass();
    $performance_obj = performance_object($event,$moduletype,$moduleid,$performance);
    $querylib = new local_custom_matrix\querylib();

    $logrec = $querylib->performance_logs(array('moduleid' => $moduleid, 'moduletype' => $moduletype,'userid' => $performance_obj->userid,'performancetype' => $performance_obj->performancetype,'performancecatid' => $performance_obj->performancecatid,'month' => $performance_obj->month,'year' => $performance_obj->year,'templateid' => $performance_obj->templateid));
     
    if($logrec){       
        $performance_obj->id = $logrec->id;
        $performance_obj->usermodified = 2;
        $performance_obj->timemodified = time();
        $DB->update_record('local_performance_logs',$performance_obj);
    }else{  
        $performance_obj->usercreated = 2;        
        $performance_obj->timecreated = time();        
        $newid = $DB->insert_record('local_performance_logs',$performance_obj);
    }   
    if($performance_obj->type == 0){
        $groupbysql = "";
        $sql = "SELECT SUM(pointsachieved) FROM {local_performance_logs} ";
        $wheresql = " WHERE moduleid = :moduleid AND moduletype = :moduletype AND userid = :userid  AND performancetype =:performancetype AND year = :year AND type = :type" ;       
        $periodtype = get_config('local_custom_matrix','performance_period_type');
        if($periodtype == 1) 
        { 
            $groupbysql .= " GROUP BY period,financialyear,parentid ";
        }else if($periodtype == 2) 
        { 
            $groupbysql .= " GROUP BY CASE WHEN period IN ('Q1', 'Q2') THEN 'H1' ELSE 'H2' END,financialyear,parentid ";
        }else if($periodtype == 3) 
        { 
            $groupbysql .= " GROUP BY financialyear,parentid ";
        }else{
            $wheresql .= " AND month = :month ";
            $groupbysql .= " GROUP BY parentid ";
        }
        $total_internalpoints = $DB->get_field_sql($sql.$wheresql.$groupbysql,
        array('moduleid' => $moduleid, 'moduletype' => $moduletype,'userid' => $performance_obj->userid,'performancetype' => $performance_obj->performancetype,'month' => $performance_obj->month,'year' => $performance_obj->year, 'type' => 0));
        $performance_obj->pointsachieved = $total_internalpoints;
    
    }
    user_performance_aggregate($performance_obj,0);   
}
/**
 * To delete the performance log records when the courese is deleted.
 *
 * @param int $performanceid performance id
 * @param int $moduleid module type
 * @param string $moduletype module type
 */
function delete_performance_logs($performanceid,$moduleid,$moduletype){
    global $DB;
    $querylib = new local_custom_matrix\querylib();   
    $periodtype = get_config('local_custom_matrix','performance_period_type'); 
    $param = array('performancecatid' => $performanceid,'moduleid' => $moduleid,'moduletype' => $moduletype); 
    $month = $querylib->get_performance_log_month($param);    
    $year = $querylib->get_performance_log_year($param); 
    $mont =  date('M', strtotime($month . '01')); 
    $period = get_current_period($periodtype,$mont); 
    $deleted =  $querylib->delete_local_performance_log($param); 

    $log_records_check = $querylib->performance_logs_records($param);
    
    if(count($log_records_check) > 0){
        $query = "SELECT *,SUM(pointsachieved) as pointsachieved FROM {local_performance_logs}";
        $wheresql = " WHERE performancecatid = :performancecatid AND year =:year";
        $groupbysql = "";
            
        if($periodtype == 1) 
        { 
            $groupbysql .= " GROUP BY period,financialyear,parentid,userid ";
        }else if($periodtype == 2) 
        { 
            $groupbysql .= " GROUP BY CASE WHEN period IN ('Q1', 'Q2') THEN 'H1' ELSE 'H2' END,financialyear,parentid,userid ";
        }else if($periodtype == 3) 
        { 
            $groupbysql .= " GROUP BY financialyear,parentid,userid ";
        }else{
            $wheresql .= " AND month = :month ";
            $groupbysql .= " GROUP BY parentid,userid ";
        }
        $logs_records = $DB->get_records_sql($query.$wheresql.$groupbysql,array('performancecatid'=> $performanceid,'month' => $month));
               
        foreach($logs_records as $log){      
            user_performance_aggregate($log,1);  
        } 
    
    }else{

        $arr = array('performancecatid' => $performanceid,'month' => $month,'year' => $year, 'period' => $period);        
        $querylib->delete_local_performance_overall($arr); 
    }  
}
/**
 * To calculate the aggregate of performance score.
 *
 * @param object $performance performance object
 * @param int $check check param is used to handle the calculation of deletion and added of log records
 * @return boolean
 */
function user_performance_aggregate($performance,$check=0){
    global $DB;
    $querylib = new local_custom_matrix\querylib();
    $performance->totalpoints = $performance->pointsachieved;   
    if($aggrecord = $querylib->performance_matrix_overall(array('userid' => $performance->userid,'performancetype' => $performance->performancetype,'parentid' => $performance->parentid,'month' => $performance->month,'year' => $performance->year))) 
    {       
        if($check==0){
            $performance->totalpoints += $aggrecord->totalpoints;  
            if($performance->totalpoints > $aggrecord->maxpoints) {
                $performance->totalpoints = $aggrecord->maxpoints;
            }
        } 
        $performance->id = $aggrecord->id;
        $performance->usermodified = 2;
        $performance->timemodified = time();
        $DB->update_record('local_performance_overall',$performance);   
    }   else{
        $DB->insert_record('local_performance_overall',$performance);      
    
    }
      
    return true;
}
/**
 * To show the category form.
 *
 * @param object $args category form data
 * @return object
 */
function local_custom_matrix_output_fragment_new_custom_matrix_form($args){    
    $args = (object) $args;
   
    $repositoryid = $args->repositoryid;
    $parentcatid = $args->parentcatid;
    $o = '';
    $formdata = [];
    $querylib = new \local_custom_matrix\querylib();
    if (!empty($args->jsonformdata)) {
        $serialiseddata = json_decode($args->jsonformdata);
        if(is_object($serialiseddata)){
            $serialiseddata = serialize($serialiseddata);
        }
        parse_str($serialiseddata, $formdata);
    }
    if ($args->repositoryid > 0) {
        $heading = get_string('updatecusmatrix', 'local_custom_matrix');       
        $data = $querylib->matrix_record(array('id'=>$repositoryid));
    }
    $mform = new local_custom_matrix\form\custom_matrix_form(null, array('id' => $args->repositoryid, 'editoroptions' => $editoroptions, 'open_costcenterid' => $data->costcenterid, 'parentid' => $data->parentid, 'parentcatid' => $parentcatid), 'post', '', null, true, $formdata);
    if($data){
        $data->name = $data->fullname;
        $data->parentid = $data->parentid ? $data->parentid:'Top';
        $data->open_costcenterid = $data->costcenterid;
        $mform->set_data($data);
    }
    if (!empty($args->jsonformdata)) {
        // If we were passed non-empty form data we want the mform to call validation functions and show errors.
        $mform->is_validated();
    }
    ob_start();
    $mform->display();
    $o .= ob_get_contents();
    ob_end_clean();
    return $o;
}
/**
 * To get categories data.
 *
 * @param object $tablelimits have the limits,lenths etc
 * @param object $filtervalues have the filter data
 * @return object
 */
function custom_matrix_details($tablelimits, $filtervalues){
    global $DB, $USER,$CFG;
    $systemcontext =(new \local_custom_matrix\lib\accesslib())::get_module_context();
    $querylib = new \local_custom_matrix\querylib();
    $countsql = "SELECT count(lcc.id) FROM {local_custom_category} AS lcc WHERE 1 ";
    $selectsql = "SELECT lcc.*, lc.fullname as organisationname
        FROM {local_custom_category} AS lcc
        JOIN {local_costcenter} AS lc ON lc.id = lcc.costcenterid
        WHERE 1 ";
    $queryparam = array();
    if($tablelimits->parentcatid > 0){
        $concatsql = " AND lcc.parentid = :parentcatid";
        $queryparam['parentcatid'] = $tablelimits->parentcatid;
    } else {
        $concatsql = " AND lcc.parentid = 0 ";
    }
    if(!is_siteadmin()){
        $costcenterid = explode("/",$USER->open_path);
        $concatsql .= " AND lcc.costcenterid= :usercostcenter ";
        $queryparam['usercostcenter'] = $costcenterid[1];
    }
    if (isset($filtervalues->search_query) && trim($filtervalues->search_query) != '') {
        $concatsql .= " AND (lcc.fullname LIKE :search1 )";
        $queryparam['search1'] = '%'.trim($filtervalues->search_query).'%';
    }
    $count = $DB->count_records_sql($countsql.$concatsql, $queryparam);
    $concatsql.=" order by lcc.id desc";
    $records = $DB->get_records_sql($selectsql.$concatsql, $queryparam, $tablelimits->start, $tablelimits->length);

    $list=array();
    $data=array();
    if ($records) {
        foreach ($records as $c) {
            $list=array(); 
            $matrixparent = $querylib->matrix_exist(array('parentid'=>$c->id));
            $parent = $querylib->get_matrixfield('fullname', array('id' => $c->parentid));
            $childcount = $querylib->matrix_child_count(array('parentid' => $c->id));
            $list['custom_matrix_name'] = $c->fullname;
            $list['organisationname'] = $c->organisationname;
            $list['custom_matrix_id'] = $c->id;
            $list['shortname']=$c->shortname;
            $list['type']=$c->type;
            $list['parent']=$parent ? $parent : 'N/A';
            $list['childcount']=$childcount ? $childcount : 0;
            $list['wwwroot']= $CFG->dirroot.'/local/custom_matrix/matrix.php?';
            $list['childs']= $tablelimits->parentcatid > 0 ? $tablelimits->parentcatid : 0;
            if($matrixparent){
                $list['matrixexist'] = $matrixparent;
            }
            $data[] = $list;
        }
    }   
    return array('count' => $count, 'data' => $data);
}
/**
 * To get all positions.
 *
 * @return array
 */
function get_positions(){
    global $DB;   
    $records = $DB->get_records_sql('SELECT id,name FROM {local_positions}');
    $positions = [];
    $positions[''] = '--Select--';
    foreach($records as $key=>$val){            
       $positions[$val->name] = $val->name;     
    }
    return $positions;
}
/**
 * To get all distinct designations.
 *
 * @return array
 */
function get_designations(){
    global $DB;  
    $records = $DB->get_records_sql('SELECT DISTINCT(open_designation) FROM {user}');
    $designation = [];
    $designation[''] = '--Select--';
    foreach($records as $key=>$val){ 
        if($val->open_designation != null){
            $designation[$val->open_designation] = $val->open_designation; 
        } 
    }

    return $designation;
}
/**
 * To get performance categories data.
 *
 * @param array $data 
 * @param object $filtervalues have the filter data
 * @return object
 */
function custom_matrix_data($data){
    global $DB;  
    $querylib = new \local_custom_matrix\querylib();
    $result = $querylib->join_performance_matrix_records($data); 
    $records ='';     
    $parents = $querylib->matrix_records(array('costcenterid'=>$data['costcenter'],'parentid'=>0));    
    $typecount = $querylib->matrix_child_count(array('costcenterid' => $data['costcenter'], 'type'=>0));

    if(count($result) == 0){        
        $resultdata = [];
        //Below code for arranging the internal type
        if($typecount > 0){  
            $obj = new stdClass();
            $obj->id = 0;
            $obj->fullname = 'Learning & Trainings';
            $obj->parentid = 0;
            $obj->costcenterid = $data['costcenter'];
            $obj->path = '/'.$data['costcenter'];
            $obj->type = 0;
            array_push($resultdata,$obj);  

            $internal_type = $DB->get_records('local_custom_matrix', array('costcenterid' => $data['costcenter'], 'type'=>0,'parentid'=>0));
            foreach($internal_type as $internal){
                $internal->path = '/'.$data['costcenter'];
                $internal->parentid = -1;
                array_push($resultdata,$internal);  
            }
        }

        foreach($parents as $parent ){

           if($parent->type == 1){ //For External Type showing

                $parent->path = '/'.$data['costcenter'];
                array_push($resultdata,$parent);
               
                $children = $querylib->matrix_records(array('costcenterid'=>$data['costcenter'],'parentid'=>$parent->id)); 
                foreach($children as $child){
                    $child->path = '/'.$data['costcenter'];
                    array_push($resultdata,$child);
                }
            }
        }
        $records = $resultdata;               
    }else{       
        $pmresultdata = []; 
        //---------For Internal type Categories Showing Start-------//
        $internal_pmresult = $querylib->performance_matrix_all(array('templateid'=>$data['templateid'],'role'=> $data['role'],'type'=>0,'performancecatid' => 0));
        foreach($internal_pmresult as $pm ){
            $parent = new stdClass();
            $parent->fullname = $pm->performancetype;
            $parent->parentid = $pm->parentid;
            $parent->pmid = $pm->id;
            $parent->maxscore = $pm->maxscore;
            $parent->weightage = $pm->weightage;
            $parent->role = $pm->role;
            $parent->path = $pm->path;
            $parent->type = $pm->type;
            array_push($pmresultdata,$parent);

            $children = $querylib->internal_performance_subcategories(array('templateid'=>$data['templateid'],'role'=> $data['role'],'type'=>0,'parentid' => $pm->performancecatid)); 
            foreach($children as $childval){                     
                $child = new stdClass();  
                $child->fullname = $childval->performancetype;
                $child->parentid = -1;             
                $child->pmid = $childval->id;
                $child->maxscore = $childval->maxscore;
                $child->weightage = $childval->weightage;
                $child->role = $childval->role;
                $child->path = $childval->path;
                
                array_push($pmresultdata,$child);
            }
        }
        //---------For Internal type Categories Showing End-------//

        //---------For External type Categories Showing Start-------//

        $external_pmresult = $querylib->performance_matrix_all(array('templateid'=>$data['templateid'],'role'=> $data['role'],'type'=>1,'parentid' => 0));
        foreach($external_pmresult as $pm ){
            $parent = new stdClass();
            $parent->fullname = $pm->performancetype;
            $parent->parentid = $pm->parentid;
            $parent->pmid = $pm->id;
            $parent->maxscore = $pm->maxscore;
            $parent->weightage = $pm->weightage;
            $parent->role = $pm->role;
            $parent->path = $pm->path;
            $parent->type = $pm->type;
            array_push($pmresultdata,$parent);

            $children = $querylib->performance_matrix_all(array('templateid'=>$data['templateid'],'role'=> $data['role'],'type'=>1,'parentid' => $pm->performancecatid)); 
            foreach($children as $childval){                     
                $child = new stdClass();  
                $child->fullname = $childval->performancetype;
                $child->parentid = $childval->parentid;            
                $child->pmid = $childval->id;
                $child->maxscore = $childval->maxscore;
                $child->weightage = $childval->weightage;
                $child->role = $childval->role;
                $child->path = $childval->path;
                
                array_push($pmresultdata,$child);
            }
        }

        //---------For External type Categories Showing End-------//

        $records = $pmresultdata;      
    }

    $pm_records_count = $querylib->performance_matrix_count(array('templateid'=>$data['templateid'],'role'=> $data['role'])); 
    $data =[];
    $data['records'] = $records;
    $data['pm_records_count'] = $pm_records_count;
    
    return $data;
}
/**
 * To get performance period based on current month.
 *
 * @param int $period_type period type set in performance settings
 * @param string $current_month current month
 * @return string
 */
function get_current_period($period_type,$current_month){
    $period = '';
    if($period_type==1){
        if('Apr' == $current_month || 'May' == $current_month  || 'Jun' == $current_month ){
            $period = 'Q1';
        }
        if('Jul' == $current_month || 'Aug' == $current_month || 'Sep' == $current_month ){
            $period = 'Q2';
        }
        if('Oct' == $current_month || 'Nov' == $current_month || 'Dec' == $current_month ){
            $period = 'Q3';
        }
        if('Jan' == $current_month || 'Feb' == $current_month || 'Mar' == $current_month ){
            $period = 'Q4';
        }

    }else if($period_type==2){
        if('Apr' == $current_month || 'May' == $current_month  || 'Jun' == $current_month || 'Jul' == $current_month || 'Aug' == $current_month || 'Sep' == $current_month){
            $period = 'H1';
        }
        if('Oct' == $current_month || 'Nov' == $current_month || 'Dec' == $current_month || 'Jan' == $current_month || 'Feb' == $current_month || 'Mar' == $current_month ){
            $period = 'H2';
        }
    }else if($period_type==3){
        $period = 'Y';
    }else{
         $period = 'M';
    }

    return $period;
}
/**
 * To get performance category data.
 *
 * @param array $data 
 * @return object
 */
function user_matrix_data($data){
    global $DB; 
    $querylib = new \local_custom_matrix\querylib(); 
    $periodtype = get_config('local_custom_matrix','performance_period_type');
    $current_month = date('M',time());
    $period = get_current_period($periodtype,$current_month); 
    $year = date('Y',time());
    $month = ($data['month'] == '')?date('F', time()) : $data['month'];

    $data['period'] = ($data['period'] == '')?$period : $data['period'];
    $data['year'] = ($data['year'] == 0)?$year : $data['year'];
    $data['role'] = ($data['role'] == '')? user_designation_position($data['userid']) : $data['role'];
    $pmresultdata = []; 

    $templateid = ($data['templateid'] != 0)? $data['templateid'] : get_active_template($data['costcenter']);
       
    //---------For Internal type Categories Showing Start-------//
    $internal_pmresult = $querylib->performance_matrix_all(array('templateid'=>$templateid,'role'=> $data['role'],'type'=>0,'performancecatid' => 0));
    foreach($internal_pmresult as $pm ){
        $parent = new stdClass();
        $parent->id = $pm->performancecatid;
        $parent->fullname = $pm->performancetype;
        $parent->parentid = $pm->parentid;
        $parent->pmid = $pm->id;
        $parent->maxscore = $pm->maxscore;
        $parent->weightage = $pm->weightage;
        $parent->role = $pm->role;
        $parent->path = $pm->path;
        $parent->type = $pm->type;
        $parent->templateid = $pm->templateid;
        array_push($pmresultdata,$parent);

        $children = $querylib->internal_performance_subcategories(array('templateid'=>$templateid,'role'=> $data['role'],'type'=>0,'parentid' => $pm->performancecatid)); 
        foreach($children as $childval){                     
            $child = new stdClass();  
            $child->id = $childval->performancecatid;
            $child->fullname = $childval->performancetype;
            $child->parentid = -1;             
            $child->pmid = $childval->id;
            $child->maxscore = $childval->maxscore;
            $child->weightage = $childval->weightage;
            $child->role = $childval->role;
            $child->path = $childval->path;
            $child->type = $childval->type;
            $child->templateid = $childval->templateid;
            $param_ppoverall = array('templateid'=>$templateid,'role'=> $data['role'],'userid' => $data['userid'],'performancecatid' => $childval->performancecatid,'period' => $data['period'],'year' => $data['year']);
            if($period == 'M'){
                $param_ppoverall['month'] = $month;
            }   

            $check_ppoverall = $querylib->performance_matrix_overall($param_ppoverall);
            if($check_ppoverall){
                $child->userscore = $check_ppoverall->totalpoints;
                $child->poid = $check_ppoverall->id;                       
            }else{                
                $child->poid = 0;   
            } 

            
            array_push($pmresultdata,$child);
        }
    }
    //---------For Internal type Categories Showing End-------//

    //---------For External type Categories Showing Start-------//

    $external_pmresult = $querylib->performance_matrix_all(array('templateid'=>$templateid,'role'=> $data['role'],'type'=>1,'parentid' => 0));
    foreach($external_pmresult as $pm ){
        $parent = new stdClass();
        $parent->id = $pm->performancecatid;
        $parent->fullname = $pm->performancetype;
        $parent->parentid = $pm->parentid;
        $parent->pmid = $pm->id;
        $parent->maxscore = $pm->maxscore;
        $parent->weightage = $pm->weightage;
        $parent->role = $pm->role;
        $parent->path = $pm->path;
        $parent->type = $pm->type;
        $parent->templateid = $pm->templateid;
        array_push($pmresultdata,$parent);

        $children = $querylib->performance_matrix_all(array('templateid'=>$templateid,'role'=> $data['role'],'type'=>1,'parentid' => $pm->performancecatid)); 
        foreach($children as $childval){                     
            $child = new stdClass();  
            $child->id = $childval->performancecatid;
            $child->fullname = $childval->performancetype;
            $child->parentid = $childval->parentid;            
            $child->pmid = $childval->id;
            $child->maxscore = $childval->maxscore;
            $child->weightage = $childval->weightage;
            $child->role = $childval->role;
            $child->path = $childval->path;
            $child->type = $childval->type;
            $child->templateid = $childval->templateid;
            $param_poverall = array('templateid'=>$templateid,'role'=> $data['role'],'userid' => $data['userid'],'performancecatid' => $childval->performancecatid,'period' => $data['period'],'year' => $data['year']);
            if($period == 'M'){
                $param_poverall['month'] = $month;
            } 
            $check_poverall = $querylib->performance_matrix_overall($param_poverall);
             
            if($check_poverall){                       
                $child->poid = $check_poverall->id;                      
                $child->userscore = $check_poverall->totalpoints;
            }else{                
                $child->poid = 0;   
            } 
            
            array_push($pmresultdata,$child);
        }
    }

    //---------For External type Categories Showing End-------//    
   
    return $pmresultdata;   
}
/**
 * To get user organization based on userid.
 *
 * @param int $userid 
 * @return int costcenter
 */
function get_user_costcenter($userid){
    global $DB;  
    $existingpath = $DB->get_field('user', 'open_path', array('id' => $userid));
    $costcenter = explode('/', $existingpath)[1];
    return $costcenter;
}
/**
 * To get user designation or position based on userid.
 *
 * @param int $userid 
 * @return int 
 */
function user_designation_position($userid){
    global $DB; 
    $roletype = get_config('local_custom_matrix','performance_matrix_role_type'); 
    $role = '';
    if($roletype == 1){ // getting designation
        $role = $DB->get_field('user', 'open_designation', array('id' => $userid));
    }else if($roletype == 2){ //for positions
        $role = $DB->get_field('user', 'open_positionid', array('id' => $userid));
    }else{
         $role = 0;
    }
    return $role;
}
/**
 * To get user name based on userid.
 *
 * @param int $userid 
 * @return string 
 */
function get_username($userid){
    global $DB;  
    $username = $DB->get_field('user', 'firstname', array('id' => $userid));
    return $username;
}
/**
 * To set the menu.
 *
 * @return array 
 */
function local_custom_matrix_leftmenunode(){
    
    $categorycontext = (new \local_costcenter\lib\accesslib())::get_module_context();
    $matrixnodes = '';
    if(has_capability('local/custom_matrix:manage_custom_categories', $categorycontext) || is_siteadmin()) {
        $matrixnodes .= html_writer::start_tag('li', array('id'=> 'id_leftmenu_categories', 'class'=>'pull-left user_nav_div categories usernavdep'));
        $categories_url = new moodle_url('/local/custom_matrix/matrix.php');
        $categories = html_writer::link($categories_url, '<i class="fa fa-line-chart" style="font-size:12px"></i><span class="user_navigation_link_text">'.get_string('performance_categories','local_custom_matrix').'</span>',array('class'=>'user_navigation_link'));
        $matrixnodes .= $categories;
        $matrixnodes .= html_writer::end_tag('li');

       
    }
    // if(has_capability('local/custom_matrix:manage_custom_matrix', $categorycontext) || is_siteadmin()) {
       
    //     $matrixnodes .= html_writer::start_tag('li', array('id'=> 'id_leftmenu_categories', 'class'=>'pull-left user_nav_div categories usernavdep'));
    //     $matrix_url = new moodle_url('/local/custom_matrix/template.php');
    //     $matrix = html_writer::link($matrix_url, '<i class="fa fa-server" style="font-size:12px"></i><span class="user_navigation_link_text">'.get_string('performancetemplate','local_custom_matrix').'</span>',array('class'=>'user_navigation_link'));
    //     $matrixnodes .= $matrix;
    //     $matrixnodes .= html_writer::end_tag('li');
    // }

    // if(has_capability('local/custom_matrix:view_matrix_record', $categorycontext) && !is_siteadmin())
    // {       
    //     $matrixnodes .= html_writer::start_tag('li', array('id'=> 'id_leftmenu_categories', 'class'=>'pull-left user_nav_div categories usernavdep'));
    //     $usermatrix_url = new moodle_url('/local/custom_matrix/enduser_matrix.php');
    //     $usermatrix = html_writer::link($usermatrix_url, '<i class="fa fa-server" style="font-size:12px"></i><span class="user_navigation_link_text">'.get_string('myperformance_matrix','local_custom_matrix').'</span>',array('class'=>'user_navigation_link'));
    //     $matrixnodes .= $usermatrix;
    //     $matrixnodes .= html_writer::end_tag('li');
    // }

    return array('6' => $matrixnodes);
}
/**
 * To join the course table.
 *
 * @param object $filterdata 
 * @return array 
 */
function coursetypevalues($filterdata){
   $where = '';
    $params = array();
    if(!empty($category)){
        return " AND c.performancecatid = $category ";
    }

}
/**
 * To get period name.
 *
 * @return string 
 */
function get_period_details(){
    $periodtype = get_config('local_custom_matrix','performance_period_type');

    $current_month = date('M',time());
    $year = date("Y", time());
    $nextyear = date('Y', strtotime('+1 year'));
    $period = '';
    if($periodtype==1){
        if('Apr' == $current_month || 'May' == $current_month  || 'Jun' == $current_month ){
            $period = 'Quarterly Apr - Jun ('.$year.'-'.$nextyear.')';
        }
        if('Jul' == $current_month || 'Aug' == $current_month || 'Sep' == $current_month ){
            $period = 'Quarterly Jul - Sep ('.$year.'-'.$nextyear.')';
        }
        if('Oct' == $current_month || 'Nov' == $current_month || 'Dec' == $current_month ){
            $period = 'Quarterly Oct - Dec ('.$year.'-'.$nextyear.')';
        }
        if('Jan' == $current_month || 'Feb' == $current_month || 'Mar' == $current_month ){
            $period = 'Quarterly Jan - Mar ('.$year.'-'.$nextyear.')';
        }

    }else if($periodtype==2){
        if('Apr' == $current_month || 'May' == $current_month  || 'Jun' == $current_month || 'Jul' == $current_month || 'Aug' == $current_month || 'Sep' == $current_month){
            $period = 'Halfyearly Apr - Sep ('.$year.'-'.$nextyear.')';
        }
        if('Oct' == $current_month || 'Nov' == $current_month || 'Dec' == $current_month || 'Jan' == $current_month || 'Feb' == $current_month || 'Mar' == $current_month ){
            $period = 'Halfyearly Oct - Mar ('.$year.'-'.$nextyear.')';
        }
    }else if($periodtype==3){
        $period = 'Yearly Apr - Mar ('.$year.'-'.$nextyear.')';
    }else{
        $month = date('F', time());
        $period = 'Month '.$month.' ('.$year.'-'.$nextyear.')';
    }

    return $period;
}
/**
 * To get period name based on params.
 *
 * @param string $shortname 
 * @param string $financialyear 
 * @return string 
 */
function get_period_name($shortname,$financialyear){
    $period_name = '';
     
    switch($shortname){
        case "Q1":
            $period_name = 'First Quarter '.'('.$financialyear.')';
        break;
        case "Q2":
            $period_name = 'Second Quarter '.'('.$financialyear.')';
        break;
        case "Q3":
            $period_name = 'Third Quarter '.'('.$financialyear.')';
        break;
        case "Q4":
            $period_name = 'Fourth Quarter '.'('.$financialyear.')';
        break;
        case "H1":
            $period_name = 'First Half '.'('.$financialyear.')';
        break;
        case "H2":
            $period_name = 'Second Half'.'('.$financialyear.')';
        break;
        case "Y":
            $period_name = 'Year '.'('.$financialyear.')';
        break;
        
    } 
    return $period_name;
}
/**
 * To get user period list based on params.
 *
 * @param array $data  
 * @return object 
 */
function get_period_list($data){
    global $DB;
    $month = date('F', time());
    $querylib = new \local_custom_matrix\querylib();
    $result_month = $querylib->get_periods_months(array('userid'=>$data['userid'],'month' => $month,'year' => $data['year'])); 
   
    $result = $querylib->get_periods($data);
    $select_result = [];
    $select = new stdClass();
    $select->name = get_string('select_duration','local_custom_matrix');
    $select->value = '';
    $select->year = '';
    $select->month = '';
    $select->templateid = 0;
    array_push($select_result,$select);   

    foreach($result as $key=>$res){
        $name = get_period_name($res->period,$res->financialyear);           
        $obj = new stdClass();  
        $obj->name = $name;
        $obj->value = $res->period;
        $obj->year = $res->year;
        $obj->month = '';
        $obj->templateid = $res->templateid;
        array_push($select_result,$obj);        
    }
   
    foreach($result_month as $key=>$res){   

        $name = "Month ".$res->month." (".$res->financialyear.")";           
        $obj = new stdClass();  
        $obj->name = $name;
        $obj->value = $res->period;
        $obj->year = $res->year;
        $obj->month = $res->month;
        $obj->templateid = $res->templateid;
        array_push($select_result,$obj); 
    }    

    return $select_result;
}
/**
 * To get performance template list.
 *
 * @param object $tablelimits have the limits,lenths etc
 * @param object $filtervalues have the filter data
 * @return object
 */
function template_details($tablelimits, $filtervalues){
    global $DB, $USER,$CFG;
    $systemcontext =(new \local_custom_matrix\lib\accesslib())::get_module_context();
    $querylib = new \local_custom_matrix\querylib();
    $costcenterquerylib = new \local_costcenter\querylib();
    $countsql = "SELECT count(lcc.id) FROM {local_performance_template} AS lcc WHERE 1 ";
    $selectsql = "SELECT * FROM {local_performance_template} WHERE 1 ";
   
    $queryparam = array();

    if (isset($filtervalues->search_query) && trim($filtervalues->search_query) != '') {
        $concatsql .= " AND (template_name LIKE :search1 )";
        $queryparam['search1'] = '%'.trim($filtervalues->search_query).'%';
    }
    $count = $DB->count_records_sql($countsql.$concatsql, $queryparam);
    $concatsql.=" order by id desc";
    $records = $DB->get_records_sql($selectsql.$concatsql, $queryparam, $tablelimits->start, $tablelimits->length);

    $list=array();
    $data=array();
    if ($records) {
        foreach ($records as $c) {
            $list=array();
            $list['id'] = $c->id;
            $list['template_name'] = $c->template_name;
            $list['orgname'] = $costcenterquerylib->get_costcenterfield('fullname', array('id'=>$c->costcenterid));
            $list['financialyear'] = $c->financialyear;
            $list['active'] = $c->active;
            $list['costcenterid']=$c->costcenterid;           
            $data[] = $list;
        }
    }   
    return array('count' => $count, 'data' => $data);
}
/**
 * To show the template form.
 *
 * @param object $args template form data
 * @return object
 */
function local_custom_matrix_output_fragment_template_form($args){      
    $args = (object) $args;
    $templateid = $args->templateid;
    $querylib = new \local_custom_matrix\querylib();
    $o = '';
    $formdata = [];
  
    if (!empty($args->jsonformdata)) {
        $serialiseddata = json_decode($args->jsonformdata);
        if(is_object($serialiseddata)){
            $serialiseddata = serialize($serialiseddata);
        }
        parse_str($serialiseddata, $formdata);
    }
    if ($templateid > 0) {              
        $data = $querylib->template_record(array('id'=>$templateid));
    }
    $mform = new local_custom_matrix\form\template_form(null, array('id' => $args->templateid, 'open_costcenterid' => $data->costcenterid), 'post', '', null, true, $formdata);
    if($data){
        $data->template_name = $data->template_name;
        $data->financialyear = $data->financialyear;
        $data->active = $data->active;
        $data->open_costcenterid = $data->costcenterid;
        $mform->set_data($data);
    } 
    ob_start();
    $mform->display();
    $o .= ob_get_contents();
    ob_end_clean();
    return $o;
}
/**
 * To get active template.
 *
 * @param int $orgid costcenter id
 * @return int template id
 */
function get_active_template($orgid){
    $querylib = new \local_custom_matrix\querylib(); 
    $tempid = $querylib->get_templatefield('id',array('costcenterid' => $orgid,'active' => 1));
    return $tempid;
}

