{"version":3,"file":"popupcount.min.js","sources":["../src/popupcount.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_myteam/popupcount\n * @class      popupcount\n * @package    local_myteam\n * @copyright  2018 sarath\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\n        'core/fragment', 'core/ajax', 'core/yui', 'jqueryui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewPopup = function(args) {\n        this.contextid = args.contextid;\n        // this.id = args.id;\n        // this.username = args.username;\n        // this.moduletype = args.moduletype;\n        var self = this;\n        self.init(args.selector);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewPopup.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewPopup.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewPopup.prototype.init = function(selector) {\n        //var triggers = $(selector);\n        \n        var self = this;\n        // $(selector).click(function(){\n        $(document).on('click', selector, function(){\n            // self.contextid = 1;\n            self.id = $(this).data('userid');\n            self.username = $(this).data('username');\n            self.moduletype = $(this).data('moduletype');\n  \n            Str.get_string('myteaminfo', 'local_myteam',self).then(function(title) {\n            ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: title,\n                    body: self.getBody()\n                }).done(function(modal) {\n                    // Keep a reference to the modal.\n                    self.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    self.modal.setLarge();\n         \n                    // We want to reset the form every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\n                        // self.modal.setBody('');\n                        self.modal.hide();\n                        self.modal.destroy();\n                    }.bind(this));\n\n                    // We want to reset the form every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.cancel, function() {\n                        // self.modal.setBody('');\n                        self.modal.hide();\n                        self.modal.destroy();\n                    }.bind(this));\n                    self.modal.show();\n\n                    self.modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                         //self.dataTableshow();\n                    }.bind(this));                                    \n                                  \n                });    \n\n            });\n        });\n                    \n    };\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewPopup.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        \n        // Get the content of the modal.\n        if(typeof this.id != 'undefined'){\n            var params = {id:this.id, moduletype:this.moduletype, jsonformdata: JSON.stringify(formdata)};\n        }else{\n            var params = {};\n        }\n        return Fragment.loadFragment('local_myteam', 'users_display_modulewise', this.contextid, params);\n    };\n \n \n    return /** @alias module:local_evaluation/newevaluation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n            // alert('there');\n            return new NewPopup(args);\n        },\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewPopup","args","contextid","this","init","selector","prototype","modal","self","document","on","id","data","username","moduletype","get_string","then","title","create","type","types","CANCEL","body","getBody","done","setLarge","getRoot","hidden","hide","destroy","bind","cancel","show","bodyRendered","formdata","params","jsonformdata","JSON","stringify","loadFragment"],"mappings":";;;;;;;;;AASAA,iCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAC5C,gBAAiB,YAAa,WAAY,aAC1C,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAU5DC,SAAW,SAASC,WACfC,UAAYD,KAAKC,UAIXC,KACNC,KAAKH,KAAKI,kBAOnBL,SAASM,UAAUC,MAAQ,KAM3BP,SAASM,UAAUJ,WAAa,EAShCF,SAASM,UAAUF,KAAO,SAASC,cAG3BG,KAAOL,KAEXV,EAAEgB,UAAUC,GAAG,QAASL,UAAU,WAE9BG,KAAKG,GAAKlB,EAAEU,MAAMS,KAAK,UACvBJ,KAAKK,SAAWpB,EAAEU,MAAMS,KAAK,YAC7BJ,KAAKM,WAAarB,EAAEU,MAAMS,KAAK,cAE/BlB,IAAIqB,WAAW,aAAc,eAAeP,MAAMQ,MAAK,SAASC,OAChEtB,aAAauB,OAAO,CACZC,KAAMxB,aAAayB,MAAMC,OACzBJ,MAAOA,MACPK,KAAMd,KAAKe,YACZC,MAAK,SAASjB,OAEbC,KAAKD,MAAQA,MAGbC,KAAKD,MAAMkB,WAGXjB,KAAKD,MAAMmB,UAAUhB,GAAGd,YAAY+B,OAAQ,WAExCnB,KAAKD,MAAMqB,OACXpB,KAAKD,MAAMsB,WACbC,KAAK3B,OAGPK,KAAKD,MAAMmB,UAAUhB,GAAGd,YAAYmC,OAAQ,WAExCvB,KAAKD,MAAMqB,OACXpB,KAAKD,MAAMsB,WACbC,KAAK3B,OACPK,KAAKD,MAAMyB,OAEXxB,KAAKD,MAAMmB,UAAUhB,GAAGd,YAAYqC,aAAc,aAEhDH,KAAK3B,iBAavBH,SAASM,UAAUiB,QAAU,SAASW,kBACV,IAAbA,WACPA,SAAW,SAIM,IAAX/B,KAAKQ,OACPwB,OAAS,CAACxB,GAAGR,KAAKQ,GAAIG,WAAWX,KAAKW,WAAYsB,aAAcC,KAAKC,UAAUJ,gBAE/EC,OAAS,UAEVtC,SAAS0C,aAAa,eAAgB,2BAA4BpC,KAAKD,UAAWiC,SAIlC,CAUvD/B,KAAM,SAASH,aAEJ,IAAID,SAASC"}