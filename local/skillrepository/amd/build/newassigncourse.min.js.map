{"version":3,"file":"newassigncourse.min.js","sources":["../src/newassigncourse.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_location/location\n * @class      NewInstitute\n * @package    local_location\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewAssigncourse = function(args) {\n        this.contextid = args.contextid;\n        this.skillid = args.repositoryid;\n        this.levelid = args.levelid;\n        this.costcenterid = args.org_id;\n        this.competencyid = args.competencyid;\n        var self = this;\n        self.init(args.selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewAssigncourse.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewAssigncourse.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewAssigncourse.prototype.init = function(args) {\n        // console.log(args);\n        //var triggers = $(selector);\n        var self = this;\n            return Str.get_string('assigncourse', 'local_skillrepository',self).then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n\n                // Keep a reference to the modal.\n                self.modal = modal;\n                // self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n                // this.modal.getRoot().addClass('openLMStransition');\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.hide();\n                        setTimeout(function(){\n                            modal.destroy();\n                        }, 1000);\n                        // modal.destroy();\n                    });\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                self.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                return this.modal;\n            }.bind(this));\n\n\n        // });\n\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewAssigncourse.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // alert(formdata);\n        // Get the content of the modal.\n        var params = {skillid:this.skillid, costcenterid:this.costcenterid, levelid: this.levelid, competencyid: this.competencyid, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('local_skillrepository', 'new_assigncourse', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewAssigncourse.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewAssigncourse.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewAssigncourse.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // alert(this.contextid);\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_skillrepository_submit_assigncourse_form',\n            args: {contextid: this.contextid, skillid:this.skillid, costcenterid:this.costcenterid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewAssigncourse.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_location/newlocation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n\n            // alert(args.contextid);\n            return new NewAssigncourse(args);\n        },\n        load: function(){\n\n        },\n        getCourselist: function(args) {\n            // modal to show the courses in a category\n            element = '.course_count_popup';\n            if(!$(element).hasClass('clicked')){\n                $(element).addClass('clicked');\n                var params = { skillid: args.skillid, costcenterid: args.costcenterid, levelid: args.levelid, competencyid: args.competencyid};\n                var returndata =  Fragment.loadFragment('local_skillrepository', 'skill_levelcourse_display', args.contextid, params);\n\n                ModalFactory.create({\n                    title: Str.get_string('coursepopup', 'local_skillrepository', args.categoryname),\n                    body: returndata\n                }).done(function(modal) {\n                    // Do what you want with your new modal.\n                    modal.show();\n                    modal.setLarge();\n                    modal.getRoot().on(ModalEvents.hidden, function() {\n                        modal.setBody('');\n                    }.bind(this));\n                    modal.getRoot().find('[data-action=\"hide\"]').on('click', function() {\n                        $(element).removeClass('clicked');\n                        modal.hide();\n                        setTimeout(function(){\n                             modal.destroy();\n                        }, 500);\n                    });\n                });\n            }\n        },\n        getCompetencylist: function(args) {\n            // modal to show the courses in a category\n            element = '.competency_count_popup';\n            if(!$(element).hasClass('clicked')){\n                $(element).addClass('clicked');\n                var params = { courseid: args.courseid};\n                var returndata =  Fragment.loadFragment('local_skillrepository', 'competency_course_display', args.contextid, params);\n\n                ModalFactory.create({\n                    title: Str.get_string('competencies', 'local_skillrepository'),\n                    body: returndata\n                }).done(function(modal) {\n                    // Do what you want with your new modal.\n                    modal.show();\n                    modal.setLarge();\n                    modal.getRoot().on(ModalEvents.hidden, function() {\n                        modal.setBody('');\n                    }.bind(this));\n                    modal.getRoot().find('[data-action=\"hide\"]').on('click', function() {\n                        $(element).removeClass('clicked');\n                        modal.hide();\n                        setTimeout(function(){\n                             modal.destroy();\n                        }, 500);\n                    });\n                });\n            }\n        },\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewAssigncourse","args","contextid","skillid","repositoryid","levelid","costcenterid","org_id","competencyid","this","init","selector","prototype","modal","self","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","animate","setTimeout","destroy","shown","append","getFooter","find","hide","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","setBody","e","preventDefault","formData","serialize","call","methodname","done","fail","submit","load","getCourselist","element","hasClass","addClass","returndata","categoryname","removeClass","getCompetencylist","courseid"],"mappings":"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"}