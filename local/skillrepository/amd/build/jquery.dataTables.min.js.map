{"version":3,"file":"jquery.dataTables.min.js","sources":["../src/jquery.dataTables.js"],"sourcesContent":["/*! DataTables 1.10.15\n * Â©2008-2017 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.15\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2017 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals module,jQuery*/\n(function( factory ) {\n    \"use strict\";\n    if ( typeof define === 'function' && define.amd ) {\n        // AMD\n        define( ['jquery'], function ( $ ) {\n            return factory( $, window, document );\n        } );\n    }\n    else if ( typeof exports === 'object' ) {\n        // CommonJS\n        module.exports = function (root, $) {\n            if ( ! root ) {\n                // CommonJS environments without a window global must pass a\n                // root. This will give an error otherwise\n                root = window;\n            }\n\n            if ( ! $ ) {\n                $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n                    require('jquery') :\n                    require('jquery')( root );\n            }\n\n            return factory( $, root, root.document );\n        };\n    }\n    else {\n        // Browser\n        factory( jQuery, window, document );\n    }\n}(function( $, window, document, undefined ) {\n    \"use strict\";\n    /**\n     * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n     * flexible tool, based upon the foundations of progressive enhancement,\n     * which will add advanced interaction controls to any HTML table. For a\n     * full list of features please refer to\n     * [DataTables.net](href=\"http://datatables.net).\n     *\n     * Note that the `DataTable` object is not a global variable but is aliased\n     * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n     * be  accessed.\n     *\n     *  @class\n     *  @param {object} [options={}] Configuration object for DataTables. Options\n     *    are defined by {@link DataTable.defaults}\n     *  @requires jQuery 1.7+\n     *\n     *  @example\n     *    // Basic initialisation\n     *    $(document).ready( function {\n     *      $('#example').dataTable();\n     *    } );\n     *\n     *  @example\n     *    // Initialisation with configuration options - in this case, disable\n     *    // pagination and sorting.\n     *    $(document).ready( function {\n     *      $('#example').dataTable( {\n     *        \"paginate\": false,\n     *        \"sort\": false\n     *      } );\n     *    } );\n     */\n    var DataTable = function ( options )\n    {\n        /**\n         * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n         * return the resulting jQuery object.\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n         *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n         *    criterion (\"applied\") or all TR elements (i.e. no filter).\n         *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n         *    Can be either 'current', whereby the current sorting of the table is used, or\n         *    'original' whereby the original order the data was read into the table is used.\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n         *    'current' and filter is 'applied', regardless of what they might be given as.\n         *  @returns {object} jQuery object, filtered by the given selector.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Highlight every second row\n         *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n         *    } );\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Filter to rows with 'Webkit' in them, add a background colour and then\n         *      // remove the filter, thus highlighting the 'Webkit' rows only.\n         *      oTable.fnFilter('Webkit');\n         *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n         *      oTable.fnFilter('');\n         *    } );\n         */\n        this.$ = function ( sSelector, oOpts )\n        {\n            return this.api(true).$( sSelector, oOpts );\n        };\n        /**\n         * Almost identical to $ in operation, but in this case returns the data for the matched\n         * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n         * rather than any descendants, so the data can be obtained for the row/cell. If matching\n         * rows are found, the data returned is the original data array/object that was used to\n         * create the row (or a generated array if from a DOM source).\n         *\n         * This method is often useful in-combination with $ where both functions are given the\n         * same parameters and the array indexes will match identically.\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n         *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n         *    criterion (\"applied\") or all elements (i.e. no filter).\n         *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n         *    Can be either 'current', whereby the current sorting of the table is used, or\n         *    'original' whereby the original order the data was read into the table is used.\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n         *    'current' and filter is 'applied', regardless of what they might be given as.\n         *  @returns {array} Data for the matched elements. If any elements, as a result of the\n         *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n         *    entry in the array.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Get the data from the first row in the table\n         *      var data = oTable._('tr:first');\n         *\n         *      // Do something useful with the data\n         *      alert( \"First cell is: \"+data[0] );\n         *    } );\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Filter to 'Webkit' and get all data for\n         *      oTable.fnFilter('Webkit');\n         *      var data = oTable._('tr', {\"search\": \"applied\"});\n         *\n         *      // Do something with the data\n         *      alert( data.length+\" rows matched the search\" );\n         *    } );\n         */\n        this._ = function ( sSelector, oOpts )\n        {\n            return this.api(true).rows( sSelector, oOpts ).data();\n        };\n        /**\n         * Create a DataTables Api instance, with the currently selected tables for\n         * the Api's context.\n         * @param {boolean} [traditional=false] Set the API instance's context to be\n         *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n         *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n         *   or if all tables captured in the jQuery object should be used.\n         * @return {DataTables.Api}\n         */\n        this.api = function ( traditional )\n        {\n            return traditional ?\n                new _Api(\n                    _fnSettingsFromNode( this[_ext.iApiIndex] )\n                ) :\n                new _Api( this );\n        };\n        /**\n         * Add a single new row or multiple rows of data to the table. Please note\n         * that this is suitable for client-side processing only - if you are using\n         * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n         * must add it to the data source, i.e. the server-side, through an Ajax call.\n         *  @param {array|object} data The data to be added to the table. This can be:\n         *    <ul>\n         *      <li>1D array of data - add a single row with the data provided</li>\n         *      <li>2D array of arrays - add multiple rows in a single call</li>\n         *      <li>object - data object when using <i>mData</i></li>\n         *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n         *    </ul>\n         *  @param {bool} [redraw=true] redraw the table or not\n         *  @returns {array} An array of integers, representing the list of indexes in\n         *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n         *    the table.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    // Global var for counter\n         *    var giCount = 2;\n         *\n         *    $(document).ready(function() {\n         *      $('#example').dataTable();\n         *    } );\n         *\n         *    function fnClickAddRow() {\n         *      $('#example').dataTable().fnAddData( [\n         *        giCount+\".1\",\n         *        giCount+\".2\",\n         *        giCount+\".3\",\n         *        giCount+\".4\" ]\n         *      );\n         *\n         *      giCount++;\n         *    }\n         */\n        this.fnAddData = function( data, redraw )\n        {\n            var api = this.api( true );\n            /* Check if we want to add multiple rows or not */\n            var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n                api.rows.add( data ) :\n                api.row.add( data );\n            if ( redraw === undefined || redraw ) {\n                api.draw();\n            }\n            return rows.flatten().toArray();\n        };\n        /**\n         * This function will make DataTables recalculate the column sizes, based on the data\n         * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n         * through the sWidth parameter). This can be useful when the width of the table's\n         * parent element changes (for example a window resize).\n         *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable( {\n         *        \"sScrollY\": \"200px\",\n         *        \"bPaginate\": false\n         *      } );\n         *\n         *      $(window).on('resize', function () {\n         *        oTable.fnAdjustColumnSizing();\n         *      } );\n         *    } );\n         */\n        this.fnAdjustColumnSizing = function ( bRedraw )\n        {\n            var api = this.api( true ).columns.adjust();\n            var settings = api.settings()[0];\n            var scroll = settings.oScroll;\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw( false );\n            }\n            else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n                _fnScrollDraw( settings );\n            }\n        };\n        /**\n         * Quickly and simply clear a table\n         *  @param {bool} [bRedraw=true] redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n         *      oTable.fnClearTable();\n         *    } );\n         */\n        this.fnClearTable = function( bRedraw )\n        {\n            var api = this.api( true ).clear();\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw();\n            }\n        };\n        /**\n         * The exact opposite of 'opening' a row, this function will close any rows which\n         * are currently 'open'.\n         *  @param {node} nTr the table row to 'close'\n         *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable;\n         *\n         *      // 'open' an information row when a row is clicked on\n         *      $('#example tbody tr').click( function () {\n         *        if ( oTable.fnIsOpen(this) ) {\n         *          oTable.fnClose( this );\n         *        } else {\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n         *        }\n         *      } );\n         *\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnClose = function( nTr )\n        {\n            this.api( true ).row( nTr ).child.hide();\n        };\n        /**\n         * Remove a row for the table\n         *  @param {mixed} target The index of the row from aoData to be deleted, or\n         *    the TR element you want to delete\n         *  @param {function|null} [callback] Callback function\n         *  @param {bool} [redraw=true] Redraw the table or not\n         *  @returns {array} The row that was deleted\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Immediately remove the first row\n         *      oTable.fnDeleteRow( 0 );\n         *    } );\n         */\n        this.fnDeleteRow = function( target, callback, redraw )\n        {\n            var api = this.api( true );\n            var rows = api.rows( target );\n            var settings = rows.settings()[0];\n            var data = settings.aoData[rows[0][0]];\n            rows.remove();\n            if ( callback ) {\n                callback.call( this, settings, data );\n            }\n            if ( redraw === undefined || redraw ) {\n                api.draw();\n            }\n            return data;\n        };\n        /**\n         * Restore the table to it's original state in the DOM by removing all of DataTables\n         * enhancements, alterations to the DOM structure of the table and event listeners.\n         *  @param {boolean} [remove=false] Completely remove the table from the DOM\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n         *      var oTable = $('#example').dataTable();\n         *      oTable.fnDestroy();\n         *    } );\n         */\n        this.fnDestroy = function ( remove )\n        {\n            this.api( true ).destroy( remove );\n        };\n        /**\n         * Redraw the table\n         *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n         *      oTable.fnDraw();\n         *    } );\n         */\n        this.fnDraw = function( complete )\n        {\n            // Note that this isn't an exact match to the old call to _fnDraw - it takes\n            // into account the new data, but can hold position.\n            this.api( true ).draw( complete );\n        };\n        /**\n         * Filter the input based on data\n         *  @param {string} sInput String to filter the table on\n         *  @param {int|null} [iColumn] Column to limit filtering to\n         *  @param {bool} [bRegex=false] Treat as regular expression or not\n         *  @param {bool} [bSmart=true] Perform smart filtering or not\n         *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n         *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Sometime later - filter...\n         *      oTable.fnFilter( 'test string' );\n         *    } );\n         */\n        this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n        {\n            var api = this.api( true );\n            if ( iColumn === null || iColumn === undefined ) {\n                api.search( sInput, bRegex, bSmart, bCaseInsensitive );\n            }\n            else {\n                api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n            }\n            api.draw();\n        };\n        /**\n         * Get the data for the whole table, an individual row or an individual cell based on the\n         * provided parameters.\n         *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n         *    a TR node then the data source for the whole row will be returned. If given as a\n         *    TD/TH cell node then iCol will be automatically calculated and the data for the\n         *    cell returned. If given as an integer, then this is treated as the aoData internal\n         *    data index for the row (see fnGetPosition) and the data for that row used.\n         *  @param {int} [col] Optional column index that you want the data of.\n         *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n         *    returned. If mRow is defined, just data for that row, and is iCol is\n         *    defined, only data for the designated cell is returned.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    // Row data\n         *    $(document).ready(function() {\n         *      oTable = $('#example').dataTable();\n         *\n         *      oTable.$('tr').click( function () {\n         *        var data = oTable.fnGetData( this );\n         *        // ... do something with the array / object of data for the row\n         *      } );\n         *    } );\n         *\n         *  @example\n         *    // Individual cell data\n         *    $(document).ready(function() {\n         *      oTable = $('#example').dataTable();\n         *\n         *      oTable.$('td').click( function () {\n         *        var sData = oTable.fnGetData( this );\n         *        alert( 'The cell clicked on had the value of '+sData );\n         *      } );\n         *    } );\n         */\n        this.fnGetData = function( src, col )\n        {\n            var api = this.api( true );\n            if ( src !== undefined ) {\n                var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n                return col !== undefined || type == 'td' || type == 'th' ?\n                    api.cell( src, col ).data() :\n                    api.row( src ).data() || null;\n            }\n            return api.data().toArray();\n        };\n        /**\n         * Get an array of the TR nodes that are used in the table's body. Note that you will\n         * typically want to use the '$' API method in preference to this as it is more\n         * flexible.\n         *  @param {int} [iRow] Optional row index for the TR element you want\n         *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n         *    in the table's body, or iRow is defined, just the TR element requested.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Get the nodes from the table\n         *      var nNodes = oTable.fnGetNodes( );\n         *    } );\n         */\n        this.fnGetNodes = function( iRow )\n        {\n            var api = this.api( true );\n            return iRow !== undefined ?\n                api.row( iRow ).node() :\n                api.rows().nodes().flatten().toArray();\n        };\n        /**\n         * Get the array indexes of a particular cell from it's DOM element\n         * and column index including hidden columns\n         *  @param {node} node this can either be a TR, TD or TH in the table's body\n         *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n         *    if given as a cell, an array of [row index, column index (visible),\n         *    column index (all)] is given.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      $('#example tbody td').click( function () {\n         *        // Get the position of the current data from the node\n         *        var aPos = oTable.fnGetPosition( this );\n         *\n         *        // Get the data array for this row\n         *        var aData = oTable.fnGetData( aPos[0] );\n         *\n         *        // Update the data array and return the value\n         *        aData[ aPos[1] ] = 'clicked';\n         *        this.innerHTML = 'clicked';\n         *      } );\n         *\n         *      // Init DataTables\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnGetPosition = function( node )\n        {\n            var api = this.api( true );\n            var nodeName = node.nodeName.toUpperCase();\n            if ( nodeName == 'TR' ) {\n                return api.row( node ).index();\n            }\n            else if ( nodeName == 'TD' || nodeName == 'TH' ) {\n                var cell = api.cell( node ).index();\n                return [\n                    cell.row,\n                    cell.columnVisible,\n                    cell.column\n                ];\n            }\n            return null;\n        };\n        /**\n         * Check to see if a row is 'open' or not.\n         *  @param {node} nTr the table row to check\n         *  @returns {boolean} true if the row is currently open, false otherwise\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable;\n         *\n         *      // 'open' an information row when a row is clicked on\n         *      $('#example tbody tr').click( function () {\n         *        if ( oTable.fnIsOpen(this) ) {\n         *          oTable.fnClose( this );\n         *        } else {\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n         *        }\n         *      } );\n         *\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnIsOpen = function( nTr )\n        {\n            return this.api( true ).row( nTr ).child.isShown();\n        };\n        /**\n         * This function will place a new row directly after a row which is currently\n         * on display on the page, with the HTML contents that is passed into the\n         * function. This can be used, for example, to ask for confirmation that a\n         * particular record should be deleted.\n         *  @param {node} nTr The table row to 'open'\n         *  @param {string|node|jQuery} mHtml The HTML to put into the row\n         *  @param {string} sClass Class to give the new TD cell\n         *  @returns {node} The row opened. Note that if the table row passed in as the\n         *    first parameter, is not found in the table, this method will silently\n         *    return.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable;\n         *\n         *      // 'open' an information row when a row is clicked on\n         *      $('#example tbody tr').click( function () {\n         *        if ( oTable.fnIsOpen(this) ) {\n         *          oTable.fnClose( this );\n         *        } else {\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n         *        }\n         *      } );\n         *\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnOpen = function( nTr, mHtml, sClass )\n        {\n            return this.api( true )\n                .row( nTr )\n                .child( mHtml, sClass )\n                .show()\n                .child()[0];\n        };\n        /**\n         * Change the pagination - provides the internal logic for pagination in a simple API\n         * function. With this function you can have a DataTables table go to the next,\n         * previous, first or last pages.\n         *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n         *    or page number to jump to (integer), note that page 0 is the first page.\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      oTable.fnPageChange( 'next' );\n         *    } );\n         */\n        this.fnPageChange = function ( mAction, bRedraw )\n        {\n            var api = this.api( true ).page( mAction );\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw(false);\n            }\n        };\n        /**\n         * Show a particular column\n         *  @param {int} iCol The column whose display should be changed\n         *  @param {bool} bShow Show (true) or hide (false) the column\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Hide the second column after initialisation\n         *      oTable.fnSetColumnVis( 1, false );\n         *    } );\n         */\n        this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n        {\n            var api = this.api( true ).column( iCol ).visible( bShow );\n            if ( bRedraw === undefined || bRedraw ) {\n                api.columns.adjust().draw();\n            }\n        };\n        /**\n         * Get the settings for a particular table for external manipulation\n         *  @returns {object} DataTables settings object. See\n         *    {@link DataTable.models.oSettings}\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      var oSettings = oTable.fnSettings();\n         *\n         *      // Show an example parameter from the settings\n         *      alert( oSettings._iDisplayStart );\n         *    } );\n         */\n        this.fnSettings = function()\n        {\n            return _fnSettingsFromNode( this[_ext.iApiIndex] );\n        };\n        /**\n         * Sort the table by a particular column\n         *  @param {int} aaSort the data index to sort on. Note that this will not match the\n         *    'display index' if you have hidden data entries\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Sort immediately with columns 0 and 1\n         *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n         *    } );\n         */\n        this.fnSort = function( aaSort )\n        {\n            this.api( true ).order( aaSort ).draw();\n        };\n        /**\n         * Attach a sort listener to an element for a given column\n         *  @param {node} nNode the element to attach the sort listener to\n         *  @param {int} iColumn the column that a click on this node will sort on\n         *  @param {function} [fnCallback] callback function when sort is run\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Sort on column 1, when 'sorter' is clicked on\n         *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n         *    } );\n         */\n        this.fnSortListener = function( nNode, iColumn, fnCallback )\n        {\n            this.api( true ).order.listener( nNode, iColumn, fnCallback );\n        };\n        /**\n         * Update a table cell or row - this method will accept either a single value to\n         * update the cell with, an array of values with one element for each column or\n         * an object in the same format as the original data source. The function is\n         * self-referencing in order to make the multi column updates easier.\n         *  @param {object|array|string} mData Data to update the cell/row with\n         *  @param {node|int} mRow TR element you want to update or the aoData index\n         *  @param {int} [iColumn] The column to update, give as null or undefined to\n         *    update a whole row.\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @param {bool} [bAction=true] Perform pre-draw actions or not\n         *  @returns {int} 0 on success, 1 on error\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n         *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n         *    } );\n         */\n        this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n        {\n            var api = this.api( true );\n            if ( iColumn === undefined || iColumn === null ) {\n                api.row( mRow ).data( mData );\n            }\n            else {\n                api.cell( mRow, iColumn ).data( mData );\n            }\n            if ( bAction === undefined || bAction ) {\n                api.columns.adjust();\n            }\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw();\n            }\n            return 0;\n        };\n        /**\n         * Provide a common method for plug-ins to check the version of DataTables being used, in order\n         * to ensure compatibility.\n         *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n         *    formats \"X\" and \"X.Y\" are also acceptable.\n         *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n         *    version, or false if this version of DataTales is not suitable\n         *  @method\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n         *    } );\n         */\n        this.fnVersionCheck = _ext.fnVersionCheck;\n        var _that = this;\n        var emptyInit = options === undefined;\n        var len = this.length;\n        if ( emptyInit ) {\n            options = {};\n        }\n        this.oApi = this.internal = _ext.internal;\n        // Extend with old style plug-in API methods\n        for ( var fn in DataTable.ext.internal ) {\n            if ( fn ) {\n                this[fn] = _fnExternApiFunc(fn);\n            }\n        }\n        this.each(function() {\n            // For each initialisation we want to give it a clean initialisation\n            // object that can be bashed around\n            var o = {};\n            var oInit = len > 1 ? // optimisation for single table case\n                _fnExtend( o, options, true ) :\n                options;\n            var i=0, iLen;\n            var sId = this.getAttribute( 'id' );\n            var bInitHandedOff = false;\n            var defaults = DataTable.defaults;\n            var $this = $(this);\n            /* Sanity check */\n            if ( this.nodeName.toLowerCase() != 'table' )\n            {\n                _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n                return;\n            }\n            /* Backwards compatibility for the defaults */\n            _fnCompatOpts( defaults );\n            _fnCompatCols( defaults.column );\n            /* Convert the camel-case defaults to Hungarian */\n            _fnCamelToHungarian( defaults, defaults, true );\n            _fnCamelToHungarian( defaults.column, defaults.column, true );\n            /* Setting up the initialisation object */\n            _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\n            /* Check to see if we are re-initialising a table */\n            var allSettings = DataTable.settings;\n            for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n            {\n                var s = allSettings[i];\n                /* Base check on table node */\n                if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\n                {\n                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n                    if ( emptyInit || bRetrieve )\n                    {\n                        return s.oInstance;\n                    }\n                    else if ( bDestroy )\n                    {\n                        s.oInstance.fnDestroy();\n                        break;\n                    }\n                    else\n                    {\n                        _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n                        return;\n                    }\n                }\n                /* If the element we are initialising has the same ID as a table which was previously\n                 * initialised, but the table nodes don't match (from before) then we destroy the old\n                 * instance by simply deleting it. This is under the assumption that the table has been\n                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n                 */\n                if ( s.sTableId == this.id )\n                {\n                    allSettings.splice( i, 1 );\n                    break;\n                }\n            }\n            /* Ensure the table has an ID - required for accessibility */\n            if ( sId === null || sId === \"\" )\n            {\n                sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n                this.id = sId;\n            }\n            /* Create the settings object for this table and set some of the default parameters */\n            var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n                \"sDestroyWidth\": $this[0].style.width,\n                \"sInstance\":     sId,\n                \"sTableId\":      sId\n            } );\n            oSettings.nTable = this;\n            oSettings.oApi   = _that.internal;\n            oSettings.oInit  = oInit;\n            allSettings.push( oSettings );\n            // Need to add the instance after the instance after the settings object has been added\n            // to the settings array, so we can self reference the table instance if more than one\n            oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n            // Backwards compatibility, before we apply all the defaults\n            _fnCompatOpts( oInit );\n            if ( oInit.oLanguage )\n            {\n                _fnLanguageCompat( oInit.oLanguage );\n            }\n            // If the length menu is given, but the init display length is not, use the length menu\n            if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n            {\n                oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n                    oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n            }\n            // Apply the defaults and init options to make a single init object will all\n            // options defined from defaults and instance options.\n            oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n            // Map the initialisation options onto the settings object\n            _fnMap( oSettings.oFeatures, oInit, [\n                \"bPaginate\",\n                \"bLengthChange\",\n                \"bFilter\",\n                \"bSort\",\n                \"bSortMulti\",\n                \"bInfo\",\n                \"bProcessing\",\n                \"bAutoWidth\",\n                \"bSortClasses\",\n                \"bServerSide\",\n                \"bDeferRender\"\n            ] );\n            _fnMap( oSettings, oInit, [\n                \"asStripeClasses\",\n                \"ajax\",\n                \"fnServerData\",\n                \"fnFormatNumber\",\n                \"sServerMethod\",\n                \"aaSorting\",\n                \"aaSortingFixed\",\n                \"aLengthMenu\",\n                \"sPaginationType\",\n                \"sAjaxSource\",\n                \"sAjaxDataProp\",\n                \"iStateDuration\",\n                \"sDom\",\n                \"bSortCellsTop\",\n                \"iTabIndex\",\n                \"fnStateLoadCallback\",\n                \"fnStateSaveCallback\",\n                \"renderer\",\n                \"searchDelay\",\n                \"rowId\",\n                [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n                [ \"oSearch\", \"oPreviousSearch\" ],\n                [ \"aoSearchCols\", \"aoPreSearchCols\" ],\n                [ \"iDisplayLength\", \"_iDisplayLength\" ],\n                [ \"bJQueryUI\", \"bJUI\" ]\n            ] );\n            _fnMap( oSettings.oScroll, oInit, [\n                [ \"sScrollX\", \"sX\" ],\n                [ \"sScrollXInner\", \"sXInner\" ],\n                [ \"sScrollY\", \"sY\" ],\n                [ \"bScrollCollapse\", \"bCollapse\" ]\n            ] );\n            _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n            /* Callback functions which are array driven */\n            _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n            _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n            _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n            _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n            _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n            _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n            _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n            _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n            _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n            _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n            _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n            oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n            /* Browser support detection */\n            _fnBrowserDetect( oSettings );\n            var oClasses = oSettings.oClasses;\n            // @todo Remove in 1.11\n            if ( oInit.bJQueryUI )\n            {\n                /* Use the JUI classes object for display. You could clone the oStdClasses object if\n                 * you want to have multiple tables with multiple independent classes\n                 */\n                $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\n                if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\n                {\n                    /* Set the DOM to use a layout suitable for jQuery UI's theming */\n                    oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\n                }\n                if ( ! oSettings.renderer ) {\n                    oSettings.renderer = 'jqueryui';\n                }\n                else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\n                    oSettings.renderer.header = 'jqueryui';\n                }\n            }\n            else\n            {\n                $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n            }\n            $this.addClass( oClasses.sTable );\n            if ( oSettings.iInitDisplayStart === undefined )\n            {\n                /* Display start point, taking into account the save saving */\n                oSettings.iInitDisplayStart = oInit.iDisplayStart;\n                oSettings._iDisplayStart = oInit.iDisplayStart;\n            }\n            if ( oInit.iDeferLoading !== null )\n            {\n                oSettings.bDeferLoading = true;\n                var tmp = $.isArray( oInit.iDeferLoading );\n                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n            }\n            /* Language definitions */\n            var oLanguage = oSettings.oLanguage;\n            $.extend( true, oLanguage, oInit.oLanguage );\n            if ( oLanguage.sUrl )\n            {\n                /* Get the language definitions from a file - because this Ajax call makes the language\n                 * get async to the remainder of this function we use bInitHandedOff to indicate that\n                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n                 */\n                $.ajax( {\n                    dataType: 'json',\n                    url: oLanguage.sUrl,\n                    success: function ( json ) {\n                        _fnLanguageCompat( json );\n                        _fnCamelToHungarian( defaults.oLanguage, json );\n                        $.extend( true, oLanguage, json );\n                        _fnInitialise( oSettings );\n                    },\n                    error: function () {\n                        // Error occurred loading language file, continue on as best we can\n                        _fnInitialise( oSettings );\n                    }\n                } );\n                bInitHandedOff = true;\n            }\n            /*\n             * Stripes\n             */\n            if ( oInit.asStripeClasses === null )\n            {\n                oSettings.asStripeClasses =[\n                    oClasses.sStripeOdd,\n                    oClasses.sStripeEven\n                ];\n            }\n            /* Remove row stripe classes if they are already on the table row */\n            var stripeClasses = oSettings.asStripeClasses;\n            var rowOne = $this.children('tbody').find('tr').eq(0);\n            if ( $.inArray( true, $.map( stripeClasses, function(el) {\n                return rowOne.hasClass(el);\n            } ) ) !== -1 ) {\n                $('tbody tr', this).removeClass( stripeClasses.join(' ') );\n                oSettings.asDestroyStripes = stripeClasses.slice();\n            }\n            /*\n             * Columns\n             * See if we should load columns automatically or use defined ones\n             */\n            var anThs = [];\n            var aoColumnsInit;\n            var nThead = this.getElementsByTagName('thead');\n            if ( nThead.length !== 0 )\n            {\n                _fnDetectHeader( oSettings.aoHeader, nThead[0] );\n                anThs = _fnGetUniqueThs( oSettings );\n            }\n            /* If not given a column array, generate one with nulls */\n            if ( oInit.aoColumns === null )\n            {\n                aoColumnsInit = [];\n                for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n                {\n                    aoColumnsInit.push( null );\n                }\n            }\n            else\n            {\n                aoColumnsInit = oInit.aoColumns;\n            }\n            /* Add the columns */\n            for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n            {\n                _fnAddColumn( oSettings, anThs ? anThs[i] : null );\n            }\n            /* Apply the column definitions */\n            _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n                _fnColumnOptions( oSettings, iCol, oDef );\n            } );\n            /* HTML5 attribute detection - build an mData object automatically if the\n             * attributes are found\n             */\n            if ( rowOne.length ) {\n                var a = function ( cell, name ) {\n                    return cell.getAttribute( 'data-'+name ) !== null ? name : null;\n                };\n                $( rowOne[0] ).children('th, td').each( function (i, cell) {\n                    var col = oSettings.aoColumns[i];\n                    if ( col.mData === i ) {\n                        var sort = a( cell, 'sort' ) || a( cell, 'order' );\n                        var filter = a( cell, 'filter' ) || a( cell, 'search' );\n                        if ( sort !== null || filter !== null ) {\n                            col.mData = {\n                                _:      i+'.display',\n                                sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n                                type:   sort !== null   ? i+'.@data-'+sort   : undefined,\n                                filter: filter !== null ? i+'.@data-'+filter : undefined\n                            };\n                            _fnColumnOptions( oSettings, i );\n                        }\n                    }\n                } );\n            }\n            var features = oSettings.oFeatures;\n            var loadedInit = function () {\n                /*\n                 * Sorting\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\n                 */\n                // If aaSorting is not defined, then we use the first indicator in asSorting\n                // in case that has been altered, so the default sort reflects that option\n                if ( oInit.aaSorting === undefined ) {\n                    var sorting = oSettings.aaSorting;\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\n                        sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n                    }\n                }\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\n                 * account, and also will apply sorting disabled classes if disabled\n                 */\n                _fnSortingClasses( oSettings );\n                if ( features.bSort ) {\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n                        if ( oSettings.bSorted ) {\n                            var aSort = _fnSortFlatten( oSettings );\n                            var sortedColumns = {};\n                            $.each( aSort, function (i, val) {\n                                sortedColumns[val.src] = val.dir;\n                            } );\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n                            _fnSortAria( oSettings );\n                        }\n                    } );\n                }\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n                        _fnSortingClasses( oSettings );\n                    }\n                }, 'sc' );\n                /*\n                 * Final init\n                 * Cache the header, body and footer as required, creating them if needed\n                 */\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n                var captions = $this.children('caption').each( function () {\n                    this._captionSide = $(this).css('caption-side');\n                } );\n                var thead = $this.children('thead');\n                if ( thead.length === 0 ) {\n                    thead = $('<thead/>').appendTo($this);\n                }\n                oSettings.nTHead = thead[0];\n                var tbody = $this.children('tbody');\n                if ( tbody.length === 0 ) {\n                    tbody = $('<tbody/>').appendTo($this);\n                }\n                oSettings.nTBody = tbody[0];\n                var tfoot = $this.children('tfoot');\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\n                    // If we are a scrolling table, and no footer has been given, then we need to create\n                    // a tfoot element for the caption element to be appended to\n                    tfoot = $('<tfoot/>').appendTo($this);\n                }\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n                    $this.addClass( oClasses.sNoFooter );\n                }\n                else if ( tfoot.length > 0 ) {\n                    oSettings.nTFoot = tfoot[0];\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n                }\n                /* Check if there is data passing into the constructor */\n                if ( oInit.aaData ) {\n                    for ( i=0 ; i<oInit.aaData.length ; i++ ) {\n                        _fnAddData( oSettings, oInit.aaData[i] );\n                    }\n                }\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\n                     * source since there is no point in reading the DOM data if we are then going\n                     * to replace it with Ajax data\n                     */\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n                }\n                /* Copy the data index array */\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n                /* Initialisation complete - table can be drawn */\n                oSettings.bInitialised = true;\n                /* Check if we need to initialise the table (it might not have been handed off to the\n                 * language processor)\n                 */\n                if ( bInitHandedOff === false ) {\n                    _fnInitialise( oSettings );\n                }\n            };\n            /* Must be done after everything which can be overridden by the state saving! */\n            if ( oInit.bStateSave )\n            {\n                features.bStateSave = true;\n                _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n                _fnLoadState( oSettings, oInit, loadedInit );\n            }\n            else {\n                loadedInit();\n            }\n        } );\n        _that = null;\n        return this;\n    };\n    /*\n     * It is useful to have variables which are scoped locally so only the\n     * DataTables functions can access them and they don't leak into global space.\n     * At the same time these functions are often useful over multiple files in the\n     * core and API, so we list, or at least document, all variables which are used\n     * by DataTables as private variables here. This also ensures that there is no\n     * clashing of variable names and that they can easily referenced for reuse.\n     */\n    // Defined else where\n    //  _selector_run\n    //  _selector_opts\n    //  _selector_first\n    //  _selector_row_indexes\n    var _ext; // DataTable.ext\n    var _Api; // DataTable.Api\n    var _api_register; // DataTable.Api.register\n    var _api_registerPlural; // DataTable.Api.registerPlural\n    var _re_dic = {};\n    var _re_new_lines = /[\\r\\n]/g;\n    var _re_html = /<.*?>/g;\n    // This is not strict ISO8601 - Date.parse() is quite lax, although\n    // implementations differ between browsers.\n    var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\n    // Escape regular expression special characters\n    var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$',\n    '^', '-' ].join('|\\\\') + ')', 'g' );\n    // http://en.wikipedia.org/wiki/Foreign_exchange_market\n    // - \\u20BD - Russian ruble.\n    // - \\u20a9 - South Korean Won\n    // - \\u20BA - Turkish Lira\n    // - \\u20B9 - Indian Rupee\n    // - R - Brazil (R$) and South Africa\n    // - fr - Swiss Franc\n    // - kr - Swedish krona, Norwegian krone and Danish krone\n    // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n    //   standards as thousands separators.\n    var _re_formatted_numeric = /[',$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\n    var _empty = function ( d ) {\n        return !d || d === true || d === '-' ? true : false;\n    };\n    var _intVal = function ( s ) {\n        var integer = parseInt( s, 10 );\n        return !isNaN(integer) && isFinite(s) ? integer : null;\n    };\n    // Convert from a formatted number with characters other than `.` as the\n    // decimal place, to a Javascript number\n    var _numToDecimal = function ( num, decimalPoint ) {\n        // Cache created regular expressions for speed as this function is called often\n        if ( ! _re_dic[decimalPoint] ) {\n            _re_dic[decimalPoint] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n        }\n        return typeof num === 'string' && decimalPoint !== '.' ?\n            num.replace( /\\./g, '' ).replace( _re_dic[decimalPoint], '.' ) :\n            num;\n    };\n    var _isNumber = function ( d, decimalPoint, formatted ) {\n        var strType = typeof d === 'string';\n        // If empty return immediately so there must be a number if it is a\n        // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n        // as a formatted number for currency\n        if ( _empty( d ) ) {\n            return true;\n        }\n        if ( decimalPoint && strType ) {\n            d = _numToDecimal( d, decimalPoint );\n        }\n        if ( formatted && strType ) {\n            d = d.replace( _re_formatted_numeric, '' );\n        }\n        return !isNaN( parseFloat(d) ) && isFinite( d );\n    };\n    // A string without HTML in it can be considered to be HTML still\n    var _isHtml = function ( d ) {\n        return _empty( d ) || typeof d === 'string';\n    };\n    var _htmlNumeric = function ( d, decimalPoint, formatted ) {\n        if ( _empty( d ) ) {\n            return true;\n        }\n        var html = _isHtml( d );\n        return ! html ?\n            null :\n            _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n                true :\n                null;\n    };\n    var _pluck = function ( a, prop, prop2 ) {\n        var out = [];\n        var i=0, ien=a.length;\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if ( prop2 !== undefined ) {\n            for ( ; i<ien ; i++ ) {\n                if ( a[i] && a[i][prop] ) {\n                    out.push( a[i][prop][prop2] );\n                }\n            }\n        }\n        else {\n            for ( ; i<ien ; i++ ) {\n                if ( a[i] ) {\n                    out.push( a[i][prop] );\n                }\n            }\n        }\n        return out;\n    };\n    // Basically the same as _pluck, but rather than looping over `a` we use `order`\n    // as the indexes to pick from `a`\n    var _pluck_order = function ( a, order, prop, prop2 )\n    {\n        var out = [];\n        var i=0, ien=order.length;\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if ( prop2 !== undefined ) {\n            for ( ; i<ien ; i++ ) {\n                if ( a[order[i]][prop] ) {\n                    out.push( a[order[i]][prop][prop2] );\n                }\n            }\n        }\n        else {\n            for ( ; i<ien ; i++ ) {\n                out.push( a[order[i]][prop] );\n            }\n        }\n        return out;\n    };\n    var _range = function ( len, start )\n    {\n        var out = [];\n        var end;\n        if ( start === undefined ) {\n            start = 0;\n            end = len;\n        }\n        else {\n            end = start;\n            start = len;\n        }\n        for ( var i=start ; i<end ; i++ ) {\n            out.push( i );\n        }\n        return out;\n    };\n    var _removeEmpty = function ( a )\n    {\n        var out = [];\n        for ( var i=0, ien=a.length ; i<ien ; i++ ) {\n            if ( a[i] ) { // careful - will remove all falsy values!\n                out.push( a[i] );\n            }\n        }\n        return out;\n    };\n    var _stripHtml = function ( d ) {\n        return d.replace( _re_html, '' );\n    };\n    /**\n     * Determine if all values in the array are unique. This means we can short\n     * cut the _unique method at the cost of a single loop. A sorted array is used\n     * to easily check the values.\n     *\n     * @param  {array} src Source array\n     * @return {boolean} true if all unique, false otherwise\n     * @ignore\n     */\n    var _areAllUnique = function ( src ) {\n        if ( src.length < 2 ) {\n            return true;\n        }\n        var sorted = src.slice().sort();\n        var last = sorted[0];\n        for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\n            if ( sorted[i] === last ) {\n                return false;\n            }\n            last = sorted[i];\n        }\n        return true;\n    };\n    /**\n     * Find the unique elements in a source array.\n     *\n     * @param  {array} src Source array\n     * @return {array} Array of unique items\n     * @ignore\n     */\n    var _unique = function ( src )\n    {\n        if ( _areAllUnique( src ) ) {\n            return src.slice();\n        }\n        // A faster unique method is to use object keys to identify used values,\n        // but this doesn't work with arrays or objects, which we must also\n        // consider. See jsperf.com/compare-array-unique-versions/4 for more\n        // information.\n        var\n            out = [],\n            val,\n            i, ien=src.length,\n            j, k=0;\n            for ( i=0 ; i<ien ; i++ ) {\n            val = src[i];\n            for ( j=0 ; j<k ; j++ ) {\n                if ( out[j] === val ) {\n                    continue;\n                }\n            }\n            out.push( val );\n            k++;\n        }\n        return out;\n    };\n    /**\n     * DataTables utility methods\n     * This namespace provides helper methods that DataTables uses internally to\n     * create a DataTable, but which are not exclusively used only for DataTables.\n     * These methods can be used by extension authors to save the duplication of\n     * code.\n     *\n     *  @namespace\n     */\n    DataTable.util = {\n        /**\n         * Throttle the calls to a function. Arguments and context are maintained\n         * for the throttled function.\n         *\n         * @param {function} fn Function to be called\n         * @param {integer} freq Call frequency in mS\n         * @return {function} Wrapped function\n         */\n        throttle: function ( fn, freq ) {\n            var\n                frequency = freq !== undefined ? freq : 200,\n                last,\n                timer;\n            return function () {\n                var\n                    that = this,\n                    now  = +new Date(),\n                    args = arguments;\n                if ( last && now < last + frequency ) {\n                    clearTimeout( timer );\n                    timer = setTimeout( function () {\n                        last = undefined;\n                        fn.apply( that, args );\n                    }, frequency );\n                }\n                else {\n                    last = now;\n                    fn.apply( that, args );\n                }\n            };\n        },\n        /**\n         * Escape a string such that it can be used in a regular expression\n         *\n         *  @param {string} val string to escape\n         *  @returns {string} escaped string\n         */\n        escapeRegex: function ( val ) {\n            return val.replace( _re_escape_regex, '\\\\$1' );\n        }\n    };\n    /**\n     * Create a mapping object that allows camel case parameters to be looked up\n     * for their Hungarian counterparts. The mapping is stored in a private\n     * parameter called `_hungarianMap` which can be accessed on the source object.\n     *  @param {object} o\n     *  @memberof DataTable#oApi\n     */\n    function _fnHungarianMap ( o )\n    {\n        var\n            hungarian = 'a aa ai ao as b fn i m o s ',\n            match,\n            newKey,\n            map = {};\n        $.each( o, function (key) {\n            match = key.match(/^([^A-Z]+?)([A-Z])/);\n            if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n            {\n                newKey = key.replace( match[0], match[2].toLowerCase() );\n                map[newKey] = key;\n                if ( match[1] === 'o' )\n                {\n                    _fnHungarianMap( o[key] );\n                }\n            }\n        } );\n        o._hungarianMap = map;\n    }\n    /**\n     * Convert from camel case parameters to Hungarian, based on a Hungarian map\n     * created by _fnHungarianMap.\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCamelToHungarian ( src, user, force )\n    {\n        if ( ! src._hungarianMap ) {\n            _fnHungarianMap( src );\n        }\n        var hungarianKey;\n        $.each( user, function (key) {\n            hungarianKey = src._hungarianMap[key];\n            if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n            {\n                // For objects, we need to buzz down into the object to copy parameters\n                if ( hungarianKey.charAt(0) === 'o' )\n                {\n                    // Copy the camelCase options over to the hungarian\n                    if ( ! user[hungarianKey] ) {\n                        user[hungarianKey] = {};\n                    }\n                    $.extend( true, user[hungarianKey], user[key] );\n                    _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n                }\n                else {\n                    user[hungarianKey] = user[key];\n                }\n            }\n        } );\n    }\n    /**\n     * Language compatibility - when certain options are given, and others aren't, we\n     * need to duplicate the values over, in order to provide backwards compatibility\n     * with older language files.\n     *  @param {object} lang dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnLanguageCompat( lang )\n    {\n        var defaults = DataTable.defaults.oLanguage;\n        var zeroRecords = lang.sZeroRecords;\n        /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n         * sZeroRecords - assuming that is given.\n         */\n        if ( ! lang.sEmptyTable && zeroRecords &&\n            defaults.sEmptyTable === \"No data available in table\" )\n        {\n            _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n        }\n        /* Likewise with loading records */\n        if ( ! lang.sLoadingRecords && zeroRecords &&\n            defaults.sLoadingRecords === \"Loading...\" )\n        {\n            _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n        }\n        // Old parameter name of the thousands separator mapped onto the new\n        if ( lang.sInfoThousands ) {\n            lang.sThousands = lang.sInfoThousands;\n        }\n        var decimal = lang.sDecimal;\n        if ( decimal ) {\n            _addNumericSort( decimal );\n        }\n    }\n    /**\n     * Map one parameter onto another\n     *  @param {object} o Object to map\n     *  @param {*} knew The new parameter name\n     *  @param {*} old The old parameter name\n     */\n    var _fnCompatMap = function ( o, knew, old ) {\n        if ( o[knew] !== undefined ) {\n            o[old] = o[knew];\n        }\n    };\n    /**\n     * Provide backwards compatibility for the main DT options. Note that the new\n     * options are mapped onto the old parameters, so this is an external interface\n     * change only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatOpts ( init )\n    {\n        _fnCompatMap( init, 'ordering',      'bSort' );\n        _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n        _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n        _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n        _fnCompatMap( init, 'order',         'aaSorting' );\n        _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n        _fnCompatMap( init, 'paging',        'bPaginate' );\n        _fnCompatMap( init, 'pagingType',    'sPaginationType' );\n        _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n        _fnCompatMap( init, 'searching',     'bFilter' );\n        // Boolean initialisation of x-scrolling\n        if ( typeof init.sScrollX === 'boolean' ) {\n            init.sScrollX = init.sScrollX ? '100%' : '';\n        }\n        if ( typeof init.scrollX === 'boolean' ) {\n            init.scrollX = init.scrollX ? '100%' : '';\n        }\n        // Column search objects are in an array, so it needs to be converted\n        // element by element\n        var searchCols = init.aoSearchCols;\n        if ( searchCols ) {\n            for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n                if ( searchCols[i] ) {\n                    _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n                }\n            }\n        }\n    }\n    /**\n     * Provide backwards compatibility for column options. Note that the new options\n     * are mapped onto the old parameters, so this is an external interface change\n     * only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatCols ( init )\n    {\n        _fnCompatMap( init, 'orderable',     'bSortable' );\n        _fnCompatMap( init, 'orderData',     'aDataSort' );\n        _fnCompatMap( init, 'orderSequence', 'asSorting' );\n        _fnCompatMap( init, 'orderDataType', 'sortDataType' );\n        // orderData can be given as an integer\n        var dataSort = init.aDataSort;\n        if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {\n            init.aDataSort = [ dataSort ];\n        }\n    }\n    /**\n     * Browser feature detection for capabilities, quirks\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBrowserDetect( settings )\n    {\n        // We don't need to do this every time DataTables is constructed, the values\n        // calculated are specific to the browser and OS configuration which we\n        // don't expect to change between initialisations\n        if ( ! DataTable.__browser ) {\n            var browser = {};\n            DataTable.__browser = browser;\n            // Scrolling feature / quirks detection\n            var n = $('<div/>')\n                .css( {\n                    position: 'fixed',\n                    top: 0,\n                    left: $(window).scrollLeft()*-1, // allow for scrolling\n                    height: 1,\n                    width: 1,\n                    overflow: 'hidden'\n                } )\n                .append(\n                    $('<div/>')\n                        .css( {\n                            position: 'absolute',\n                            top: 1,\n                            left: 1,\n                            width: 100,\n                            overflow: 'scroll'\n                        } )\n                        .append(\n                            $('<div/>')\n                                .css( {\n                                    width: '100%',\n                                    height: 10\n                                } )\n                        )\n                )\n                .appendTo( 'body' );\n            var outer = n.children();\n            var inner = outer.children();\n            // Numbers below, in order, are:\n            // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n            //\n            // IE6 XP:                           100 100 100  83\n            // IE7 Vista:                        100 100 100  83\n            // IE 8+ Windows:                     83  83 100  83\n            // Evergreen Windows:                 83  83 100  83\n            // Evergreen Mac with scrollbars:     85  85 100  85\n            // Evergreen Mac without scrollbars: 100 100 100 100\n            // Get scrollbar width\n            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\n            // include the width of the scrollbar, while other browsers ensure the inner\n            // element is contained without forcing scrolling\n            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n            // In rtl text layout, some browsers (most, but not all) will place the\n            // scrollbar on the left, rather than the right.\n            browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n            // IE8- don't provide height and width for getBoundingClientRect\n            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n            n.remove();\n        }\n        $.extend( settings.oBrowser, DataTable.__browser );\n        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n    }\n    /**\n     * Array.prototype reduce[Right] method, used for browsers which don't support\n     * JS 1.6. Done this way to reduce code size, since we iterate either way\n     *  @param {object} that dataTables settings object\n     *  @param {object} fn dataTables settings object\n     *  @param {object} init dataTables settings object\n     *  @param {object} start dataTables settings object\n     *  @param {object} end dataTables settings object\n     *  @param {object} inc dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnReduce ( that, fn, init, start, end, inc )\n    {\n        var\n            i = start,\n            value,\n            isSet = false;\n        if ( init !== undefined ) {\n            value = init;\n            isSet = true;\n        }\n        while ( i !== end ) {\n            if ( ! that.hasOwnProperty(i) ) {\n                continue;\n            }\n            value = isSet ?\n                fn( value, that[i], i, that ) :\n                that[i];\n            isSet = true;\n            i += inc;\n        }\n        return value;\n    }\n    /**\n     * Add a column to the list used for the table with default values\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} nTh The th element for this column\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddColumn( oSettings, nTh )\n    {\n        // Add column to aoColumns array\n        var oDefaults = DataTable.defaults.column;\n        var iCol = oSettings.aoColumns.length;\n        var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n            \"nTh\": nTh ? nTh : document.createElement('th'),\n            \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n            \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n            \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n            idx: iCol\n        } );\n        oSettings.aoColumns.push( oCol );\n        // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n        // passed into extend can be undefined. This allows the user to give a default\n        // with only some of the parameters defined, and also not give a default\n        var searchCols = oSettings.aoPreSearchCols;\n        searchCols[iCol] = $.extend( {}, DataTable.models.oSearch, searchCols[iCol] );\n        // Use the default column options function to initialise classes etc\n        _fnColumnOptions( oSettings, iCol, $(nTh).data() );\n    }\n    /**\n     * Apply options for a column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iCol column index to consider\n     *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnOptions( oSettings, iCol, oOptions )\n    {\n        var oCol = oSettings.aoColumns[iCol];\n        var oClasses = oSettings.oClasses;\n        var th = $(oCol.nTh);\n        // Try to get width information from the DOM. We can't get it from CSS\n        // as we'd need to parse the CSS stylesheet. `width` option can override\n        if ( ! oCol.sWidthOrig ) {\n            // Width attribute\n            oCol.sWidthOrig = th.attr('width') || null;\n            // Style attribute\n            var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n            if ( t ) {\n                oCol.sWidthOrig = t[1];\n            }\n        }\n        /* User specified column options */\n        if ( oOptions !== undefined && oOptions !== null )\n        {\n            // Backwards compatibility\n            _fnCompatCols( oOptions );\n            // Map camel case parameters to their Hungarian counterparts\n            _fnCamelToHungarian( DataTable.defaults.column, oOptions );\n            /* Backwards compatibility for mDataProp */\n            if ( oOptions.mDataProp !== undefined && !oOptions.mData )\n            {\n                oOptions.mData = oOptions.mDataProp;\n            }\n            if ( oOptions.sType )\n            {\n                oCol._sManualType = oOptions.sType;\n            }\n            // `class` is a reserved word in Javascript, so we need to provide\n            // the ability to use a valid name for the camel case input\n            if ( oOptions.className && ! oOptions.sClass )\n            {\n                oOptions.sClass = oOptions.className;\n            }\n            $.extend( oCol, oOptions );\n            _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n            /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n             * priority if defined\n             */\n            if ( oOptions.iDataSort !== undefined )\n            {\n                oCol.aDataSort = [ oOptions.iDataSort ];\n            }\n            _fnMap( oCol, oOptions, \"aDataSort\" );\n        }\n        /* Cache the data get and set functions for speed */\n        var mDataSrc = oCol.mData;\n        var mData = _fnGetObjectDataFn( mDataSrc );\n        var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n        var attrTest = function( src ) {\n            return typeof src === 'string' && src.indexOf('@') !== -1;\n        };\n        oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n        );\n        oCol._setter = null;\n        oCol.fnGetData = function (rowData, type, meta) {\n            var innerData = mData( rowData, type, undefined, meta );\n            return mRender && type ?\n                mRender( innerData, type, rowData, meta ) :\n                innerData;\n        };\n        oCol.fnSetData = function ( rowData, val, meta ) {\n            return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n        };\n        // Indicate if DataTables should read DOM data as an object or array\n        // Used in _fnGetRowElements\n        if ( typeof mDataSrc !== 'number' ) {\n            oSettings._rowReadObject = true;\n        }\n        /* Feature sorting overrides column specific when off */\n        if ( !oSettings.oFeatures.bSort )\n        {\n            oCol.bSortable = false;\n            th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n        }\n        /* Check that the class assignment is correct for sorting */\n        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n        if ( !oCol.bSortable || (!bAsc && !bDesc) )\n        {\n            oCol.sSortingClass = oClasses.sSortableNone;\n            oCol.sSortingClassJUI = \"\";\n        }\n        else if ( bAsc && !bDesc )\n        {\n            oCol.sSortingClass = oClasses.sSortableAsc;\n            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n        }\n        else if ( !bAsc && bDesc )\n        {\n            oCol.sSortingClass = oClasses.sSortableDesc;\n            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n        }\n        else\n        {\n            oCol.sSortingClass = oClasses.sSortable;\n            oCol.sSortingClassJUI = oClasses.sSortJUI;\n        }\n    }\n    /**\n     * Adjust the table column widths for new data. Note: you would probably want to\n     * do a redraw after calling this function!\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAdjustColumnSizing ( settings )\n    {\n        /* Not interested in doing column width calculation if auto-width is disabled */\n        if ( settings.oFeatures.bAutoWidth !== false )\n        {\n            var columns = settings.aoColumns;\n            _fnCalculateColumnWidths( settings );\n            for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n            {\n                columns[i].nTh.style.width = columns[i].sWidth;\n            }\n        }\n        var scroll = settings.oScroll;\n        if ( scroll.sY !== '' || scroll.sX !== '')\n        {\n            _fnScrollDraw( settings );\n        }\n        _fnCallbackFire( settings, null, 'column-sizing', [settings] );\n    }\n    /**\n     * Covert the index of a visible column to the index in the data array (take account\n     * of hidden columns)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iMatch Visible column index to lookup\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisibleToColumnIndex( oSettings, iMatch )\n    {\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\n        return typeof aiVis[iMatch] === 'number' ?\n            aiVis[iMatch] :\n            null;\n    }\n    /**\n     * Covert the index of an index in the data array and convert it to the visible\n     *   column index (take account of hidden columns)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iMatch Column index to lookup\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnIndexToVisible( oSettings, iMatch )\n    {\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\n        var iPos = $.inArray( iMatch, aiVis );\n        return iPos !== -1 ? iPos : null;\n    }\n    /**\n     * Get the number of visible columns\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {int} i the number of visible columns\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisbleColumns( oSettings )\n    {\n        var vis = 0;\n        // No reduce in IE8, use a loop for now\n        $.each( oSettings.aoColumns, function ( i, col ) {\n            if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n                vis++;\n            }\n        } );\n        return vis;\n    }\n    /**\n     * Get an array of column indexes that match a given property\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sParam Parameter in aoColumns to look for - typically\n     *    bVisible or bSearchable\n     *  @returns {array} Array of indexes with matched properties\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetColumns( oSettings, sParam )\n    {\n        var a = [];\n        $.map( oSettings.aoColumns, function(val, i) {\n            if ( val[sParam] ) {\n                a.push( i );\n            }\n        } );\n        return a;\n    }\n    /**\n     * Calculate the 'type' of a column\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnTypes ( settings )\n    {\n        var columns = settings.aoColumns;\n        var data = settings.aoData;\n        var types = DataTable.ext.type.detect;\n        var i, ien, j, jen, k, ken;\n        var col, detectedType, cache;\n        // For each column, spin over the\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            col = columns[i];\n            cache = [];\n            if ( ! col.sType && col._sManualType ) {\n                col.sType = col._sManualType;\n            }\n            else if ( ! col.sType ) {\n                for ( j=0, jen=types.length ; j<jen ; j++ ) {\n                    for ( k=0, ken=data.length ; k<ken ; k++ ) {\n                        // Use a cache array so we only need to get the type data\n                        // from the formatter once (when using multiple detectors)\n                        if ( cache[k] === undefined ) {\n                            cache[k] = _fnGetCellData( settings, k, i, 'type' );\n                        }\n                        detectedType = types[j]( cache[k], settings );\n                        // If null, then this type can't apply to this column, so\n                        // rather than testing all cells, break out. There is an\n                        // exception for the last type which is `html`. We need to\n                        // scan all rows since it is possible to mix string and HTML\n                        // types\n                        if ( ! detectedType && j !== types.length-1 ) {\n                            break;\n                        }\n                        // Only a single match is needed for html type since it is\n                        // bottom of the pile and very similar to string\n                        if ( detectedType === 'html' ) {\n                            break;\n                        }\n                    }\n                    // Type is valid for all data points in the column - use this\n                    // type\n                    if ( detectedType ) {\n                        col.sType = detectedType;\n                        break;\n                    }\n                }\n                // Fall back - if no type was detected, always use string\n                if ( ! col.sType ) {\n                    col.sType = 'string';\n                }\n            }\n        }\n    }\n    /**\n     * Take the column definitions and static columns arrays and calculate how\n     * they relate to column indexes. The callback function will then apply the\n     * definition found for a column to a suitable configuration object.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n     *  @param {array} aoCols The aoColumns array that defines columns individually\n     *  @param {function} fn Callback function - takes two parameters, the calculated\n     *    column index and the definition for that column.\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n    {\n        var i, iLen, j, jLen, k, kLen, def;\n        var columns = oSettings.aoColumns;\n        // Column definitions with aTargets\n        if ( aoColDefs )\n        {\n            /* Loop over the definitions array - loop in reverse so first instance has priority */\n            for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n            {\n                def = aoColDefs[i];\n                /* Each definition can target multiple columns, as it is an array */\n                var aTargets = def.targets !== undefined ?\n                    def.targets :\n                    def.aTargets;\n                if ( ! $.isArray( aTargets ) )\n                {\n                    aTargets = [ aTargets ];\n                }\n                for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n                {\n                    if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n                    {\n                        /* Add columns that we don't yet know about */\n                        while( columns.length <= aTargets[j] )\n                        {\n                            _fnAddColumn( oSettings );\n                        }\n                        /* Integer, basic index */\n                        fn( aTargets[j], def );\n                    }\n                    else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n                    {\n                        /* Negative integer, right to left column counting */\n                        fn( columns.length+aTargets[j], def );\n                    }\n                    else if ( typeof aTargets[j] === 'string' )\n                    {\n                        /* Class name matching on TH element */\n                        for ( k=0, kLen=columns.length ; k<kLen ; k++ )\n                        {\n                            if ( aTargets[j] == \"_all\" ||\n                                 $(columns[k].nTh).hasClass( aTargets[j] ) )\n                            {\n                                fn( k, def );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Statically defined columns array\n        if ( aoCols )\n        {\n            for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n            {\n                fn( i, aoCols[i] );\n            }\n        }\n    }\n    /**\n     * Add a data array to the table, creating DOM node etc. This is the parallel to\n     * _fnGatherData, but for adding rows from a Javascript source, rather than a\n     * DOM source.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aDataIn data array to be added\n     *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddData ( oSettings, aDataIn, nTr, anTds )\n    {\n        /* Create the object for storing information about this new row */\n        var iRow = oSettings.aoData.length;\n        var oData = $.extend( true, {}, DataTable.models.oRow, {\n            src: nTr ? 'dom' : 'data',\n            idx: iRow\n        } );\n        oData._aData = aDataIn;\n        oSettings.aoData.push( oData );\n        /* Create the cells */\n        var columns = oSettings.aoColumns;\n        // Invalidate the column types as the new data needs to be revalidated\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n        {\n            columns[i].sType = null;\n        }\n        /* Add to the display array */\n        oSettings.aiDisplayMaster.push( iRow );\n        var id = oSettings.rowIdFn( aDataIn );\n        if ( id !== undefined ) {\n            oSettings.aIds[id] = oData;\n        }\n        /* Create the DOM information, or register it if already present */\n        if ( nTr || ! oSettings.oFeatures.bDeferRender )\n        {\n            _fnCreateTr( oSettings, iRow, nTr, anTds );\n        }\n        return iRow;\n    }\n    /**\n     * Add one or more TR elements to the table. Generally we'd expect to\n     * use this for reading data from a DOM sourced table, but it could be\n     * used for an TR element. Note that if a TR is given, it is used (i.e.\n     * it is not cloned).\n     *  @param {object} settings dataTables settings object\n     *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n     *  @returns {array} Array of indexes for the added rows\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddTr( settings, trs )\n    {\n        var row;\n        // Allow an individual node to be passed in\n        if ( ! (trs instanceof $) ) {\n            trs = $(trs);\n        }\n        return trs.map( function (i, el) {\n            row = _fnGetRowElements( settings, el );\n            return _fnAddData( settings, row.data, el, row.cells );\n        } );\n    }\n    /**\n     * Take a TR element and convert it to an index in aoData\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} n the TR element to find\n     *  @returns {int} index if the node is found, null if not\n     *  @memberof DataTable#oApi\n     */\n    function _fnNodeToDataIndex( oSettings, n )\n    {\n        return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n    }\n    /**\n     * Take a TD element and convert it into a column data index (not the visible index)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow The row number the TD/TH can be found in\n     *  @param {node} n The TD/TH element to find\n     *  @returns {int} index if the node is found, -1 if not\n     *  @memberof DataTable#oApi\n     */\n    function _fnNodeToColumnIndex( oSettings, iRow, n )\n    {\n        return $.inArray( n, oSettings.aoData[iRow].anCells );\n    }\n    /**\n     * Get the data for a given cell from the internal cache, taking into account data mapping\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n     *  @returns {*} Cell data\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetCellData( settings, rowIdx, colIdx, type )\n    {\n        var draw           = settings.iDraw;\n        var col            = settings.aoColumns[colIdx];\n        var rowData        = settings.aoData[rowIdx]._aData;\n        var defaultContent = col.sDefaultContent;\n        var cellData       = col.fnGetData( rowData, type, {\n            settings: settings,\n            row:      rowIdx,\n            col:      colIdx\n        } );\n        if ( cellData === undefined ) {\n            if ( settings.iDrawError != draw && defaultContent === null ) {\n                _fnLog( settings, 0, \"Requested unknown parameter \"+\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n                    \" for row \"+rowIdx+\", column \"+colIdx, 4 );\n                settings.iDrawError = draw;\n            }\n            return defaultContent;\n        }\n        // When the data source is null and a specific data type is requested (i.e.\n        // not the original data), we can use default column data\n        if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n            cellData = defaultContent;\n        }\n        else if ( typeof cellData === 'function' ) {\n            // If the data source is a function, then we run it and use the return,\n            // executing in the scope of the data object (for instances)\n            return cellData.call( rowData );\n        }\n        if ( cellData === null && type == 'display' ) {\n            return '';\n        }\n        return cellData;\n    }\n    /**\n     * Set the value for a specific cell, into the internal data cache\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {*} val Value to set\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetCellData( settings, rowIdx, colIdx, val )\n    {\n        var col     = settings.aoColumns[colIdx];\n        var rowData = settings.aoData[rowIdx]._aData;\n        col.fnSetData( rowData, val, {\n            settings: settings,\n            row:      rowIdx,\n            col:      colIdx\n        }  );\n    }\n    // Private variable that is used to match action syntax in the data property object\n    var __reArray = /\\[.*?\\]$/;\n    var __reFn = /\\(\\)$/;\n    /**\n     * Split string on periods, taking into account escaped periods\n     * @param  {string} str String to split\n     * @return {array} Split string\n     */\n    function _fnSplitObjNotation( str )\n    {\n        return $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n            return s.replace(/\\\\\\./g, '.');\n        } );\n    }\n    /**\n     * Return a function that can be used to get data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data get function\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetObjectDataFn( mSource )\n    {\n        if ( $.isPlainObject( mSource ) )\n        {\n            /* Build an object of get functions, and wrap them in a single call */\n            var o = {};\n            $.each( mSource, function (key, val) {\n                if ( val ) {\n                    o[key] = _fnGetObjectDataFn( val );\n                }\n            } );\n            return function (data, type, row, meta) {\n                var t = o[type] || o._;\n                return t !== undefined ?\n                    t(data, type, row, meta) :\n                    data;\n            };\n        }\n        else if ( mSource === null )\n        {\n            /* Give an empty string for rendering / sorting etc */\n            return function (data) { // type, row and meta also passed, but not used\n                return data;\n            };\n        }\n        else if ( typeof mSource === 'function' )\n        {\n            return function (data, type, row, meta) {\n                return mSource( data, type, row, meta );\n            };\n        }\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n        {\n            /* If there is a . in the source string then the data source is in a\n             * nested object so we loop over the data for each level to get the next\n             * level down. On each loop we test for undefined, and if found immediately\n             * return. This allows entire objects to be missing and sDefaultContent to\n             * be used if defined, rather than throwing an error\n             */\n            var fetchData = function (data, type, src) {\n                var arrayNotation, funcNotation, out, innerSrc;\n                if ( src !== \"\" )\n                {\n                    var a = _fnSplitObjNotation( src );\n                    for ( var i=0, iLen=a.length ; i<iLen ; i++ )\n                    {\n                        // Check if we are dealing with special notation\n                        arrayNotation = a[i].match(__reArray);\n                        funcNotation = a[i].match(__reFn);\n                        if ( arrayNotation )\n                        {\n                            // Array notation\n                            a[i] = a[i].replace(__reArray, '');\n                            // Condition allows simply [] to be passed in\n                            if ( a[i] !== \"\" ) {\n                                data = data[a[i]];\n                            }\n                            out = [];\n                            // Get the remainder of the nested object to get\n                            a.splice( 0, i+1 );\n                            innerSrc = a.join('.');\n                            // Traverse each entry in the array getting the properties requested\n                            if ( $.isArray( data ) ) {\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n                                    out.push( fetchData( data[j], type, innerSrc ) );\n                                }\n                            }\n                            // If a string is given in between the array notation indicators, that\n                            // is used to join the strings together, otherwise an array is returned\n                            var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n                            data = (join===\"\") ? out : out.join(join);\n                            // The inner call to fetchData has already traversed through the remainder\n                            // of the source requested, so we exit from the loop\n                            break;\n                        }\n                        else if ( funcNotation )\n                        {\n                            // Function call\n                            a[i] = a[i].replace(__reFn, '');\n                            data = data[a[i]]();\n                            continue;\n                        }\n                        if ( data === null || data[a[i]] === undefined )\n                        {\n                            return undefined;\n                        }\n                        data = data[a[i]];\n                    }\n                }\n                return data;\n            };\n            return function (data, type) { // row and meta also passed, but not used\n                return fetchData( data, type, mSource );\n            };\n        }\n        else\n        {\n            /* Array or flat object mapping */\n            return function (data) { // row and meta also passed, but not used\n                return data[mSource];\n            };\n        }\n    }\n    /**\n     * Return a function that can be used to set data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data set function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetObjectDataFn( mSource )\n    {\n        if ( $.isPlainObject( mSource ) )\n        {\n            /* Unlike get, only the underscore (global) option is used for for\n             * setting data since we don't know the type here. This is why an object\n             * option is not documented for `mData` (which is read/write), but it is\n             * for `mRender` which is read only.\n             */\n            return _fnSetObjectDataFn( mSource._ );\n        }\n        else if ( mSource === null )\n        {\n            /* Nothing to do when the data source is null */\n            return function () {};\n        }\n        else if ( typeof mSource === 'function' )\n        {\n            return function (data, val, meta) {\n                mSource( data, 'set', val, meta );\n            };\n        }\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n        {\n            /* Like the get, we need to get data from a nested object */\n            var setData = function (data, val, src) {\n                var a = _fnSplitObjNotation( src ), b;\n                var aLast = a[a.length-1];\n                var arrayNotation, funcNotation, o, innerSrc;\n                for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n                {\n                    // Check if we are dealing with an array notation request\n                    arrayNotation = a[i].match(__reArray);\n                    funcNotation = a[i].match(__reFn);\n                    if ( arrayNotation )\n                    {\n                        a[i] = a[i].replace(__reArray, '');\n                        data[a[i]] = [];\n                        // Get the remainder of the nested object to set so we can recurse\n                        b = a.slice();\n                        b.splice( 0, i+1 );\n                        innerSrc = b.join('.');\n                        // Traverse each entry in the array setting the properties requested\n                        if ( $.isArray( val ) )\n                        {\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\n                            {\n                                o = {};\n                                setData( o, val[j], innerSrc );\n                                data[a[i]].push( o );\n                            }\n                        }\n                        else\n                        {\n                            // We've been asked to save data to an array, but it\n                            // isn't array data to be saved. Best that can be done\n                            // is to just save the value.\n                            data[a[i]] = val;\n                        }\n                        // The inner call to setData has already traversed through the remainder\n                        // of the source and has set the data, thus we can exit here\n                        return;\n                    }\n                    else if ( funcNotation )\n                    {\n                        // Function call\n                        a[i] = a[i].replace(__reFn, '');\n                        data = data[a[i]]( val );\n                    }\n                    // If the nested object doesn't currently exist - since we are\n                    // trying to set the value - create it\n                    if ( data[a[i]] === null || data[a[i]] === undefined )\n                    {\n                        data[a[i]] = {};\n                    }\n                    data = data[a[i]];\n                }\n                // Last item in the input - i.e, the actual set\n                if ( aLast.match(__reFn ) )\n                {\n                    // Function call\n                    data = data[aLast.replace(__reFn, '')]( val );\n                }\n                else\n                {\n                    // If array notation is used, we just want to strip it and use the property name\n                    // and assign the value. If it isn't used, then we get the result we want anyway\n                    data[aLast.replace(__reArray, '')] = val;\n                }\n            };\n            return function (data, val) { // meta is also passed in, but not used\n                return setData( data, val, mSource );\n            };\n        }\n        else\n        {\n            /* Array or flat object mapping */\n            return function (data, val) { // meta is also passed in, but not used\n                data[mSource] = val;\n            };\n        }\n    }\n    /**\n     * Return an array with the full table data\n     *  @param {object} settings dataTables settings object\n     *  @returns array {array} aData Master data array\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetDataMaster ( settings )\n    {\n        return _pluck( settings.aoData, '_aData' );\n    }\n    /**\n     * Nuke the table\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnClearTable( settings )\n    {\n        settings.aoData.length = 0;\n        settings.aiDisplayMaster.length = 0;\n        settings.aiDisplay.length = 0;\n        settings.aIds = {};\n    }\n     /**\n     * Take an array of integers (index array) and remove a target integer (value - not\n     * the key!)\n     *  @param {array} a Index array to target\n     *  @param {int} iTarget value to find\n     *  @param {int} splice value to find\n     *  @memberof DataTable#oApi\n     */\n    function _fnDeleteIndex( a, iTarget, splice )\n    {\n        var iTargetIndex = -1;\n        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\n        {\n            if ( a[i] == iTarget )\n            {\n                iTargetIndex = i;\n            }\n            else if ( a[i] > iTarget )\n            {\n                a[i]--;\n            }\n        }\n        if ( iTargetIndex != -1 && splice === undefined )\n        {\n            a.splice( iTargetIndex, 1 );\n        }\n    }\n    /**\n     * Mark cached data as invalid such that a re-read of the data will occur when\n     * the cached data is next requested. Also update from the data source object.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {int}    rowIdx   Row index to invalidate\n     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n     *     or 'data'\n     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n     *     row will be invalidated\n     * @memberof DataTable#oApi\n     *\n     * @todo For the modularisation of v1.11 this will need to become a callback, so\n     *   the sort and filter methods can subscribe to it. That will required\n     *   initialisation options for sorting, which is why it is not already baked in\n     */\n    function _fnInvalidate( settings, rowIdx, src, colIdx )\n    {\n        var row = settings.aoData[rowIdx];\n        var i, ien;\n        var cellWrite = function ( cell, col ) {\n            // This is very frustrating, but in IE if you just write directly\n            // to innerHTML, and elements that are overwritten are GC'ed,\n            // even if there is a reference to them elsewhere\n            while ( cell.childNodes.length ) {\n                cell.removeChild( cell.firstChild );\n            }\n            cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n        };\n        // Are we reading last data from DOM or the data object?\n        if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n            // Read the data from the DOM\n            row._aData = _fnGetRowElements(\n                    settings, row, colIdx, colIdx === undefined ? undefined : row._aData\n                )\n                .data;\n        }\n        else {\n            // Reading from data object, update the DOM\n            var cells = row.anCells;\n            if ( cells ) {\n                if ( colIdx !== undefined ) {\n                    cellWrite( cells[colIdx], colIdx );\n                }\n                else {\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\n                        cellWrite( cells[i], i );\n                    }\n                }\n            }\n        }\n        // For both row and cell invalidation, the cached data for sorting and\n        // filtering is nulled out\n        row._aSortData = null;\n        row._aFilterData = null;\n        // Invalidate the type for a specific column (if given) or all columns since\n        // the data might have changed\n        var cols = settings.aoColumns;\n        if ( colIdx !== undefined ) {\n            cols[colIdx].sType = null;\n        }\n        else {\n            for ( i=0, ien=cols.length ; i<ien ; i++ ) {\n                cols[i].sType = null;\n            }\n            // Update DataTables special `DT_*` attributes for the row\n            _fnRowAttributes( settings, row );\n        }\n    }\n    /**\n     * Build a data source object from an HTML row, reading the contents of the\n     * cells that are in the row.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {node|object} row element from which to read data or existing row\n     *   object from which to re-read the data from the cells\n     * @param {int} [colIdx] Optional column index\n     * @param {array|object} [d] Data source object. If `colIdx` is given then this\n     *   parameter should also be given and will be used to write the data into.\n     *   Only the column in question will be written\n     * @returns {object} Object with two parameters: `data` the data read, in\n     *   document order, and `cells` and array of nodes (they can be useful to the\n     *   caller, so rather than needing a second traversal to get them, just return\n     *   them from here).\n     * @memberof DataTable#oApi\n     */\n    function _fnGetRowElements( settings, row, colIdx, d )\n    {\n        var\n            tds = [],\n            td = row.firstChild,\n            name, col, i=0, contents,\n            columns = settings.aoColumns,\n            objectRead = settings._rowReadObject;\n        // Allow the data object to be passed in, or construct\n        d = d !== undefined ?\n            d :\n            objectRead ?\n                {} :\n                [];\n        var attr = function ( str, td  ) {\n            if ( typeof str === 'string' ) {\n                var idx = str.indexOf('@');\n                if ( idx !== -1 ) {\n                    var attr = str.substring( idx+1 );\n                    var setter = _fnSetObjectDataFn( str );\n                    setter( d, td.getAttribute( attr ) );\n                }\n            }\n        };\n        // Read data from a cell and store into the data object\n        var cellProcess = function ( cell ) {\n            if ( colIdx === undefined || colIdx === i ) {\n                col = columns[i];\n                contents = $.trim(cell.innerHTML);\n                if ( col && col._bAttrSrc ) {\n                    var setter = _fnSetObjectDataFn( col.mData._ );\n                    setter( d, contents );\n                    attr( col.mData.sort, cell );\n                    attr( col.mData.type, cell );\n                    attr( col.mData.filter, cell );\n                }\n                else {\n                    // Depending on the `data` option for the columns the data can\n                    // be read to either an object or an array.\n                    if ( objectRead ) {\n                        if ( ! col._setter ) {\n                            // Cache the setter function\n                            col._setter = _fnSetObjectDataFn( col.mData );\n                        }\n                        col._setter( d, contents );\n                    }\n                    else {\n                        d[i] = contents;\n                    }\n                }\n            }\n            i++;\n        };\n        if ( td ) {\n            // `tr` element was passed in\n            while ( td ) {\n                name = td.nodeName.toUpperCase();\n                if ( name == \"TD\" || name == \"TH\" ) {\n                    cellProcess( td );\n                    tds.push( td );\n                }\n                td = td.nextSibling;\n            }\n        }\n        else {\n            // Existing row object passed in\n            tds = row.anCells;\n            for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n                cellProcess( tds[j] );\n            }\n        }\n        // Read the ID from the DOM if present\n        var rowNode = row.firstChild ? row : row.nTr;\n        if ( rowNode ) {\n            var id = rowNode.getAttribute( 'id' );\n            if ( id ) {\n                _fnSetObjectDataFn( settings.rowId )( d, id );\n            }\n        }\n        return {\n            data: d,\n            cells: tds\n        };\n    }\n    /**\n     * Create a new TR element (and it's TD children) for a row\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow Row to consider\n     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n    {\n        var\n            row = oSettings.aoData[iRow],\n            rowData = row._aData,\n            cells = [],\n            nTr, nTd, oCol,\n            i, iLen;\n        if ( row.nTr === null )\n        {\n            nTr = nTrIn || document.createElement('tr');\n            row.nTr = nTr;\n            row.anCells = cells;\n            /* Use a private property on the node to allow reserve mapping from the node\n             * to the aoData array for fast look up\n             */\n            nTr._DT_RowIndex = iRow;\n            /* Special parameters can be given by the data source to be used on the row */\n            _fnRowAttributes( oSettings, row );\n            /* Process each column */\n            for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n            {\n                oCol = oSettings.aoColumns[i];\n                nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\n                nTd._DT_CellIndex = {\n                    row: iRow,\n                    column: i\n                };\n                cells.push( nTd );\n                // Need to create the HTML if new, or if a rendering function is defined\n                if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&\n                     (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n                ) {\n                    nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n                }\n                /* Add user defined class */\n                if ( oCol.sClass )\n                {\n                    nTd.className += ' '+oCol.sClass;\n                }\n                // Visibility - add or remove as required\n                if ( oCol.bVisible && ! nTrIn )\n                {\n                    nTr.appendChild( nTd );\n                }\n                else if ( ! oCol.bVisible && nTrIn )\n                {\n                    nTd.parentNode.removeChild( nTd );\n                }\n                if ( oCol.fnCreatedCell )\n                {\n                    oCol.fnCreatedCell.call( oSettings.oInstance,\n                        nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n                    );\n                }\n            }\n            _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\n        }\n        // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n        // and deployed\n        row.nTr.setAttribute( 'role', 'row' );\n    }\n    /**\n     * Add attributes to a row based on the special `DT_*` parameters in a data\n     * source object.\n     *  @param {object} settings DataTables settings object\n     *  @param {object} row DataTables row object for the row to be modified\n     *  @memberof DataTable#oApi\n     */\n    function _fnRowAttributes( settings, row )\n    {\n        var tr = row.nTr;\n        var data = row._aData;\n        if ( tr ) {\n            var id = settings.rowIdFn( data );\n            if ( id ) {\n                tr.id = id;\n            }\n            if ( data.DT_RowClass ) {\n                // Remove any classes added by DT_RowClass before\n                var a = data.DT_RowClass.split(' ');\n                row.__rowc = row.__rowc ?\n                    _unique( row.__rowc.concat( a ) ) :\n                    a;\n                $(tr)\n                    .removeClass( row.__rowc.join(' ') )\n                    .addClass( data.DT_RowClass );\n            }\n            if ( data.DT_RowAttr ) {\n                $(tr).attr( data.DT_RowAttr );\n            }\n            if ( data.DT_RowData ) {\n                $(tr).data( data.DT_RowData );\n            }\n        }\n    }\n    /**\n     * Create the HTML header for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBuildHead( oSettings )\n    {\n        var i, ien, cell, row, column;\n        var thead = oSettings.nTHead;\n        var tfoot = oSettings.nTFoot;\n        var createHeader = $('th, td', thead).length === 0;\n        var classes = oSettings.oClasses;\n        var columns = oSettings.aoColumns;\n        if ( createHeader ) {\n            row = $('<tr/>').appendTo( thead );\n        }\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            column = columns[i];\n            cell = $( column.nTh ).addClass( column.sClass );\n            if ( createHeader ) {\n                cell.appendTo( row );\n            }\n            // 1.11 move into sorting\n            if ( oSettings.oFeatures.bSort ) {\n                cell.addClass( column.sSortingClass );\n                if ( column.bSortable !== false ) {\n                    cell\n                        .attr( 'tabindex', oSettings.iTabIndex )\n                        .attr( 'aria-controls', oSettings.sTableId );\n                    _fnSortAttachListener( oSettings, column.nTh, i );\n                }\n            }\n            if ( column.sTitle != cell[0].innerHTML ) {\n                cell.html( column.sTitle );\n            }\n            _fnRenderer( oSettings, 'header' )(\n                oSettings, cell, column, classes\n            );\n        }\n        if ( createHeader ) {\n            _fnDetectHeader( oSettings.aoHeader, thead );\n        }\n        /* ARIA role for the rows */\n        $(thead).find('>tr').attr('role', 'row');\n        /* Deal with the footer - add classes if required */\n        $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n        $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n        // Cache the footer cells. Note that we only take the cells from the first\n        // row in the footer. If there is more than one row the user wants to\n        // interact with, they need to use the table().foot() method. Note also this\n        // allows cells to be used for multiple columns using colspan\n        if ( tfoot !== null ) {\n            var cells = oSettings.aoFooter[0];\n            for ( i=0, ien=cells.length ; i<ien ; i++ ) {\n                column = columns[i];\n                column.nTf = cells[i].cell;\n                if ( column.sClass ) {\n                    $(column.nTf).addClass( column.sClass );\n                }\n            }\n        }\n    }\n    /**\n     * Draw the header (or footer) element based on the column visibility states. The\n     * methodology here is to use the layout array from _fnDetectHeader, modified for\n     * the instantaneous column visibility, to construct the new layout. The grid is\n     * traversed over cell at a time in a rows x columns grid fashion, although each\n     * cell insert can cover multiple elements in the grid - which is tracks using the\n     * aApplied array. Cell inserts in the grid will only occur where there isn't\n     * already a cell in that position.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {objects} aoSource Layout array from _fnDetectHeader\n     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n     *  @memberof DataTable#oApi\n     */\n    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n    {\n        var i, iLen, j, jLen, k, n, nLocalTr;\n        var aoLocal = [];\n        var aApplied = [];\n        var iColumns = oSettings.aoColumns.length;\n        var iRowspan, iColspan;\n        if ( ! aoSource )\n        {\n            return;\n        }\n        if (  bIncludeHidden === undefined )\n        {\n            bIncludeHidden = false;\n        }\n        /* Make a copy of the master layout array, but without the visible columns in it */\n        for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n        {\n            aoLocal[i] = aoSource[i].slice();\n            aoLocal[i].nTr = aoSource[i].nTr;\n            /* Remove any columns which are currently hidden */\n            for ( j=iColumns-1 ; j>=0 ; j-- )\n            {\n                if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n                {\n                    aoLocal[i].splice( j, 1 );\n                }\n            }\n            /* Prep the applied array - it needs an element for each row */\n            aApplied.push( [] );\n        }\n        for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n        {\n            nLocalTr = aoLocal[i].nTr;\n            /* All cells are going to be replaced, so empty out the row */\n            if ( nLocalTr )\n            {\n                while( (n = nLocalTr.firstChild) )\n                {\n                    nLocalTr.removeChild( n );\n                }\n            }\n            for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n            {\n                iRowspan = 1;\n                iColspan = 1;\n                /* Check to see if there is already a cell (row/colspan) covering our target\n                 * insert point. If there is, then there is nothing to do.\n                 */\n                if ( aApplied[i][j] === undefined )\n                {\n                    nLocalTr.appendChild( aoLocal[i][j].cell );\n                    aApplied[i][j] = 1;\n                    /* Expand the cell to cover as many rows as needed */\n                    while ( aoLocal[i+iRowspan] !== undefined &&\n                            aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n                    {\n                        aApplied[i+iRowspan][j] = 1;\n                        iRowspan++;\n                    }\n                    /* Expand the cell to cover as many columns as needed */\n                    while ( aoLocal[i][j+iColspan] !== undefined &&\n                            aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n                    {\n                        /* Must update the applied array over the rows for the columns */\n                        for ( k=0 ; k<iRowspan ; k++ )\n                        {\n                            aApplied[i+k][j+iColspan] = 1;\n                        }\n                        iColspan++;\n                    }\n                    /* Do the actual expansion in the DOM */\n                    $(aoLocal[i][j].cell)\n                        .attr('rowspan', iRowspan)\n                        .attr('colspan', iColspan);\n                }\n            }\n        }\n    }\n    /**\n     * Insert the required TR nodes into the table for display\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnDraw( oSettings )\n    {\n        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n        var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n        if ( $.inArray( false, aPreDraw ) !== -1 )\n        {\n            _fnProcessingDisplay( oSettings, false );\n            return;\n        }\n        var anRows = [];\n        var iRowCount = 0;\n        var asStripeClasses = oSettings.asStripeClasses;\n        var iStripes = asStripeClasses.length;\n        var oLang = oSettings.oLanguage;\n        var iInitDisplayStart = oSettings.iInitDisplayStart;\n        var bServerSide = _fnDataSource( oSettings ) == 'ssp';\n        var aiDisplay = oSettings.aiDisplay;\n        oSettings.bDrawing = true;\n        /* Check and see if we have an initial draw position from state saving */\n        if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n        {\n            oSettings._iDisplayStart = bServerSide ?\n                iInitDisplayStart :\n                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n                    0 :\n                    iInitDisplayStart;\n            oSettings.iInitDisplayStart = -1;\n        }\n        var iDisplayStart = oSettings._iDisplayStart;\n        var iDisplayEnd = oSettings.fnDisplayEnd();\n        /* Server-side processing draw intercept */\n        if ( oSettings.bDeferLoading )\n        {\n            oSettings.bDeferLoading = false;\n            oSettings.iDraw++;\n            _fnProcessingDisplay( oSettings, false );\n        }\n        else if ( !bServerSide )\n        {\n            oSettings.iDraw++;\n        }\n        else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n        {\n            return;\n        }\n        if ( aiDisplay.length !== 0 )\n        {\n            var iStart = bServerSide ? 0 : iDisplayStart;\n            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n            for ( var j=iStart ; j<iEnd ; j++ )\n            {\n                var iDataIndex = aiDisplay[j];\n                var aoData = oSettings.aoData[iDataIndex];\n                if ( aoData.nTr === null )\n                {\n                    _fnCreateTr( oSettings, iDataIndex );\n                }\n                var nRow = aoData.nTr;\n                /* Remove the old striping classes and then add the new one */\n                if ( iStripes !== 0 )\n                {\n                    var sStripe = asStripeClasses[iRowCount % iStripes];\n                    if ( aoData._sRowStripe != sStripe )\n                    {\n                        $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n                        aoData._sRowStripe = sStripe;\n                    }\n                }\n                // Row callback functions - might want to manipulate the row\n                // iRowCount and j are not currently documented. Are they at all\n                // useful?\n                _fnCallbackFire( oSettings, 'aoRowCallback', null,\n                    [nRow, aoData._aData, iRowCount, j] );\n                anRows.push( nRow );\n                iRowCount++;\n            }\n        }\n        else\n        {\n            /* Table is empty - create a row with an empty message in it */\n            var sZero = oLang.sZeroRecords;\n            if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n            {\n                sZero = oLang.sLoadingRecords;\n            }\n            else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n            {\n                sZero = oLang.sEmptyTable;\n            }\n            anRows[0] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n                .append( $('<td />', {\n                    'valign':  'top',\n                    'colSpan': _fnVisbleColumns( oSettings ),\n                    'class':   oSettings.oClasses.sRowEmpty\n                } ).html( sZero ) )[0];\n        }\n        /* Header and footer callbacks */\n        _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n        _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n        var body = $(oSettings.nTBody);\n        body.children().detach();\n        body.append( $(anRows) );\n        /* Call all required callback functions for the end of a draw */\n        _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n        /* Draw is complete, sorting and filtering must be as well */\n        oSettings.bSorted = false;\n        oSettings.bFiltered = false;\n        oSettings.bDrawing = false;\n    }\n    /**\n     * Redraw the table - taking account of the various features which are enabled\n     *  @param {object} settings dataTables settings object\n     *  @param {boolean} [holdPosition] Keep the current paging position. By default\n     *    the paging is reset to the first page\n     *  @memberof DataTable#oApi\n     */\n    function _fnReDraw( settings, holdPosition )\n    {\n        var\n            features = settings.oFeatures,\n            sort     = features.bSort,\n            filter   = features.bFilter;\n        if ( sort ) {\n            _fnSort( settings );\n        }\n        if ( filter ) {\n            _fnFilterComplete( settings, settings.oPreviousSearch );\n        }\n        else {\n            // No filtering, so we want to just use the display master\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\n        }\n        if ( holdPosition !== true ) {\n            settings._iDisplayStart = 0;\n        }\n        // Let any modules know about the draw hold position state (used by\n        // scrolling internally)\n        settings._drawHold = holdPosition;\n        _fnDraw( settings );\n        settings._drawHold = false;\n    }\n    /**\n     * Add the options to the page HTML for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddOptionsHtml ( oSettings )\n    {\n        var classes = oSettings.oClasses;\n        var table = $(oSettings.nTable);\n        var holding = $('<div/>').insertBefore( table ); // Holding element for speed\n        var features = oSettings.oFeatures;\n        // All DataTables are wrapped in a div\n        var insert = $('<div/>', {\n            id:      oSettings.sTableId+'_wrapper',\n            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n        } );\n        oSettings.nHolding = holding[0];\n        oSettings.nTableWrapper = insert[0];\n        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n        /* Loop over the user set positioning and place the elements as needed */\n        var aDom = oSettings.sDom.split('');\n        var featureNode, cOption, nNewNode, cNext, sAttr, j;\n        for ( var i=0 ; i<aDom.length ; i++ )\n        {\n            featureNode = null;\n            cOption = aDom[i];\n            if ( cOption == '<' )\n            {\n                /* New container div */\n                nNewNode = $('<div/>')[0];\n                /* Check to see if we should append an id and/or a class name to the container */\n                cNext = aDom[i+1];\n                if ( cNext == \"'\" || cNext == '\"' )\n                {\n                    sAttr = \"\";\n                    j = 2;\n                    while ( aDom[i+j] != cNext )\n                    {\n                        sAttr += aDom[i+j];\n                        j++;\n                    }\n                    /* Replace jQuery UI constants @todo depreciated */\n                    if ( sAttr == \"H\" )\n                    {\n                        sAttr = classes.sJUIHeader;\n                    }\n                    else if ( sAttr == \"F\" )\n                    {\n                        sAttr = classes.sJUIFooter;\n                    }\n                    /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n                     * breaks the string into parts and applies them as needed\n                     */\n                    if ( sAttr.indexOf('.') != -1 )\n                    {\n                        var aSplit = sAttr.split('.');\n                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n                        nNewNode.className = aSplit[1];\n                    }\n                    else if ( sAttr.charAt(0) == \"#\" )\n                    {\n                        nNewNode.id = sAttr.substr(1, sAttr.length-1);\n                    }\n                    else\n                    {\n                        nNewNode.className = sAttr;\n                    }\n                    i += j; /* Move along the position array */\n                }\n                insert.append( nNewNode );\n                insert = $(nNewNode);\n            }\n            else if ( cOption == '>' )\n            {\n                /* End container div */\n                insert = insert.parent();\n            }\n            // @todo Move options into their own plugins?\n            else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n            {\n                /* Length */\n                featureNode = _fnFeatureHtmlLength( oSettings );\n            }\n            else if ( cOption == 'f' && features.bFilter )\n            {\n                /* Filter */\n                featureNode = _fnFeatureHtmlFilter( oSettings );\n            }\n            else if ( cOption == 'r' && features.bProcessing )\n            {\n                /* pRocessing */\n                featureNode = _fnFeatureHtmlProcessing( oSettings );\n            }\n            else if ( cOption == 't' )\n            {\n                /* Table */\n                featureNode = _fnFeatureHtmlTable( oSettings );\n            }\n            else if ( cOption ==  'i' && features.bInfo )\n            {\n                /* Info */\n                featureNode = _fnFeatureHtmlInfo( oSettings );\n            }\n            else if ( cOption == 'p' && features.bPaginate )\n            {\n                /* Pagination */\n                featureNode = _fnFeatureHtmlPaginate( oSettings );\n            }\n            else if ( DataTable.ext.feature.length !== 0 )\n            {\n                /* Plug-in features */\n                var aoFeatures = DataTable.ext.feature;\n                for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n                {\n                    if ( cOption == aoFeatures[k].cFeature )\n                    {\n                        featureNode = aoFeatures[k].fnInit( oSettings );\n                        break;\n                    }\n                }\n            }\n            /* Add to the 2D features array */\n            if ( featureNode )\n            {\n                var aanFeatures = oSettings.aanFeatures;\n                if ( ! aanFeatures[cOption] )\n                {\n                    aanFeatures[cOption] = [];\n                }\n                aanFeatures[cOption].push( featureNode );\n                insert.append( featureNode );\n            }\n        }\n        /* Built our DOM structure - replace the holding div with what we want */\n        holding.replaceWith( insert );\n        oSettings.nHolding = null;\n    }\n    /**\n     * Use the DOM source to create up an array of header cells. The idea here is to\n     * create a layout grid (array) of rows x columns, which contains a reference\n     * to the cell that that point in the grid (regardless of col/rowspan), such that\n     * any column / row could be removed and the new grid constructed\n     *  @param {object} aLayout Array to store the calculated layout in\n     *  @param {node} nThead The header/footer element for the table\n     *  @memberof DataTable#oApi\n     */\n    function _fnDetectHeader ( aLayout, nThead )\n    {\n        var nTrs = $(nThead).children('tr');\n        var nTr, nCell;\n        var i, k, l, iLen, iColShifted, iColumn, iColspan, iRowspan;\n        var bUnique;\n        var fnShiftCol = function ( a, i, j ) {\n            var k = a[i];\n                    while ( k[j] ) {\n                j++;\n            }\n            return j;\n        };\n        aLayout.splice( 0, aLayout.length );\n        /* We know how many rows there are in the layout - so prep it */\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n        {\n            aLayout.push( [] );\n        }\n        /* Calculate a layout array */\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n        {\n            nTr = nTrs[i];\n            iColumn = 0;\n            /* For every cell in the row... */\n            nCell = nTr.firstChild;\n            while ( nCell ) {\n                if ( nCell.nodeName.toUpperCase() == \"TD\" ||\n                     nCell.nodeName.toUpperCase() == \"TH\" )\n                {\n                    /* Get the col and rowspan attributes from the DOM and sanitise them */\n                    iColspan = nCell.getAttribute('colspan') * 1;\n                    iRowspan = nCell.getAttribute('rowspan') * 1;\n                    iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n                    iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n                    /* There might be colspan cells already in this row, so shift our target\n                     * accordingly\n                     */\n                    iColShifted = fnShiftCol( aLayout, i, iColumn );\n                    /* Cache calculation for unique columns */\n                    bUnique = iColspan === 1 ? true : false;\n                    /* If there is col / rowspan, copy the information into the layout grid */\n                    for ( l=0 ; l<iColspan ; l++ )\n                    {\n                        for ( k=0 ; k<iRowspan ; k++ )\n                        {\n                            aLayout[i+k][iColShifted+l] = {\n                                \"cell\": nCell,\n                                \"unique\": bUnique\n                            };\n                            aLayout[i+k].nTr = nTr;\n                        }\n                    }\n                }\n                nCell = nCell.nextSibling;\n            }\n        }\n    }\n    /**\n     * Get an array of unique th elements, one for each column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} nHeader automatically detect the layout from this node - optional\n     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n     *  @returns array {node} aReturn list of unique th's\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n    {\n        var aReturn = [];\n        if ( !aLayout )\n        {\n            aLayout = oSettings.aoHeader;\n            if ( nHeader )\n            {\n                aLayout = [];\n                _fnDetectHeader( aLayout, nHeader );\n            }\n        }\n        for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n        {\n            for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n            {\n                if ( aLayout[i][j].unique &&\n                     (!aReturn[j] || !oSettings.bSortCellsTop) )\n                {\n                    aReturn[j] = aLayout[i][j].cell;\n                }\n            }\n        }\n        return aReturn;\n    }\n    /**\n     * Create an Ajax call based on the table's settings, taking into account that\n     * parameters can have multiple forms, and backwards compatibility.\n     *\n     * @param {object} oSettings dataTables settings object\n     * @param {array} data Data to send to the server, required by\n     *     DataTables - may be augmented by developer callbacks\n     * @param {function} fn Callback function to run when data is obtained\n     */\n    function _fnBuildAjax( oSettings, data, fn )\n    {\n        // Compatibility with 1.9-, allow fnServerData and event to manipulate\n        _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n        // Convert to object based for 1.10+ if using the old array scheme which can\n        // come from server-side processing or serverParams\n        if ( data && $.isArray(data) ) {\n            var tmp = {};\n            var rbracket = /(.*?)\\[\\]$/;\n            $.each( data, function (key, val) {\n                var match = val.name.match(rbracket);\n                if ( match ) {\n                    // Support for arrays\n                    var name = match[0];\n                    if ( ! tmp[name] ) {\n                        tmp[name] = [];\n                    }\n                    tmp[name].push( val.value );\n                }\n                else {\n                    tmp[val.name] = val.value;\n                }\n            } );\n            data = tmp;\n        }\n        var ajaxData;\n        var ajax = oSettings.ajax;\n        var instance = oSettings.oInstance;\n        var callback = function ( json ) {\n            _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n            fn( json );\n        };\n        if ( $.isPlainObject( ajax ) && ajax.data )\n        {\n            ajaxData = ajax.data;\n            var newData = $.isFunction( ajaxData ) ?\n                ajaxData( data, oSettings ) :  // fn can manipulate data or return\n                ajaxData;                      // an object object or array to merge\n            // If the function returned something, use that alone\n            data = $.isFunction( ajaxData ) && newData ?\n                newData :\n                $.extend( true, data, newData );\n            // Remove the data property as we've resolved it already and don't want\n            // jQuery to do it again (it is restored at the end of the function)\n            delete ajax.data;\n        }\n        var baseAjax = {\n            \"data\": data,\n            \"success\": function (json) {\n                var error = json.error || json.sError;\n                if ( error ) {\n                    _fnLog( oSettings, 0, error );\n                }\n                oSettings.json = json;\n                callback( json );\n            },\n            \"dataType\": \"json\",\n            \"cache\": false,\n            \"type\": oSettings.sServerMethod,\n            \"error\": function (xhr, error) {\n                var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n                if ( $.inArray( true, ret ) === -1 ) {\n                    if ( error == \"parsererror\" ) {\n                        _fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n                    }\n                    else if ( xhr.readyState === 4 ) {\n                        _fnLog( oSettings, 0, 'Ajax error', 7 );\n                    }\n                }\n                _fnProcessingDisplay( oSettings, false );\n            }\n        };\n        // Store the data submitted for the API\n        oSettings.oAjaxData = data;\n        // Allow plug-ins and external processes to modify the data\n        _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n        if ( oSettings.fnServerData )\n        {\n            // DataTables 1.9- compatibility\n            oSettings.fnServerData.call( instance,\n                oSettings.sAjaxSource,\n                $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n                    return { name: key, value: val };\n                } ),\n                callback,\n                oSettings\n            );\n        }\n        else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n        {\n            // DataTables 1.9- compatibility\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n                url: ajax || oSettings.sAjaxSource\n            } ) );\n        }\n        else if ( $.isFunction( ajax ) )\n        {\n            // Is a function - let the caller define what needs to be done\n            oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n        }\n        else\n        {\n            // Object to extend the base settings\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n            // Restore for next time around\n            ajax.data = ajaxData;\n        }\n    }\n    /**\n     * Update the table using an Ajax call\n     *  @param {object} settings dataTables settings object\n     *  @returns {boolean} Block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxUpdate( settings )\n    {\n        if ( settings.bAjaxDataGet ) {\n            settings.iDraw++;\n            _fnProcessingDisplay( settings, true );\n            _fnBuildAjax(\n                settings,\n                _fnAjaxParameters( settings ),\n                function(json) {\n                    _fnAjaxUpdateDraw( settings, json );\n                }\n            );\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Build up the parameters in an object needed for a server-side processing\n     * request. Note that this is basically done twice, is different ways - a modern\n     * method which is used by default in DataTables 1.10 which uses objects and\n     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n     * the sAjaxSource option is used in the initialisation, or the legacyAjax\n     * option is set.\n     *  @param {object} settings dataTables settings object\n     *  @returns {bool} block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxParameters( settings )\n    {\n        var\n            columns = settings.aoColumns,\n            columnCount = columns.length,\n            features = settings.oFeatures,\n            preSearch = settings.oPreviousSearch,\n            preColSearch = settings.aoPreSearchCols,\n            i, data = [], dataProp, column, columnSearch,\n            sort = _fnSortFlatten( settings ),\n            displayStart = settings._iDisplayStart,\n            displayLength = features.bPaginate !== false ?\n                settings._iDisplayLength :\n                -1;\n        var param = function ( name, value ) {\n            data.push( { 'name': name, 'value': value } );\n        };\n        // DataTables 1.9- compatible method\n        param( 'sEcho',          settings.iDraw );\n        param( 'iColumns',       columnCount );\n        param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n        param( 'iDisplayStart',  displayStart );\n        param( 'iDisplayLength', displayLength );\n        // DataTables 1.10+ method\n        var d = {\n            draw:    settings.iDraw,\n            columns: [],\n            order:   [],\n            start:   displayStart,\n            length:  displayLength,\n            search:  {\n                value: preSearch.sSearch,\n                regex: preSearch.bRegex\n            }\n        };\n        for ( i=0 ; i<columnCount ; i++ ) {\n            column = columns[i];\n            columnSearch = preColSearch[i];\n            dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n            d.columns.push( {\n                data:       dataProp,\n                name:       column.sName,\n                searchable: column.bSearchable,\n                orderable:  column.bSortable,\n                search:     {\n                    value: columnSearch.sSearch,\n                    regex: columnSearch.bRegex\n                }\n            } );\n            param( \"mDataProp_\"+i, dataProp );\n            if ( features.bFilter ) {\n                param( 'sSearch_'+i,     columnSearch.sSearch );\n                param( 'bRegex_'+i,      columnSearch.bRegex );\n                param( 'bSearchable_'+i, column.bSearchable );\n            }\n            if ( features.bSort ) {\n                param( 'bSortable_'+i, column.bSortable );\n            }\n        }\n        if ( features.bFilter ) {\n            param( 'sSearch', preSearch.sSearch );\n            param( 'bRegex', preSearch.bRegex );\n        }\n        if ( features.bSort ) {\n            $.each( sort, function ( i, val ) {\n                d.order.push( { column: val.col, dir: val.dir } );\n                param( 'iSortCol_'+i, val.col );\n                param( 'sSortDir_'+i, val.dir );\n            } );\n            param( 'iSortingCols', sort.length );\n        }\n        // If the legacy.ajax parameter is null, then we automatically decide which\n        // form to use, based on sAjaxSource\n        var legacy = DataTable.ext.legacy.ajax;\n        if ( legacy === null ) {\n            return settings.sAjaxSource ? data : d;\n        }\n        // Otherwise, if legacy has been specified then we use that to decide on the\n        // form\n        return legacy ? data : d;\n    }\n    /**\n     * Data the data from the server (nuking the old) and redraw the table\n     *  @param {object} settings dataTables settings object\n     *  @param {object} json json data return from the server.\n     */\n    function _fnAjaxUpdateDraw ( settings, json )\n    {\n        // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n        // Support both\n        var compat = function ( old, modern ) {\n            return json[old] !== undefined ? json[old] : json[modern];\n        };\n        var data = _fnAjaxDataSrc( settings, json );\n        var draw            = compat( 'sEcho',                'draw' );\n        var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n        var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n        if ( draw ) {\n            // Protect against out of sequence returns\n            if ( draw*1 < settings.iDraw ) {\n                return;\n            }\n            settings.iDraw = draw * 1;\n        }\n        _fnClearTable( settings );\n        settings._iRecordsTotal   = parseInt(recordsTotal, 10);\n        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n        for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n            _fnAddData( settings, data[i] );\n        }\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\n        settings.bAjaxDataGet = false;\n        _fnDraw( settings );\n        if ( ! settings._bInitComplete ) {\n            _fnInitComplete( settings, json );\n        }\n        settings.bAjaxDataGet = true;\n        _fnProcessingDisplay( settings, false );\n    }\n    /**\n     * Get the data from the JSON data source to use for drawing a table. Using\n     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n     * source object, or from a processing function.\n     *  @param {object} oSettings dataTables settings object\n     *  @param  {object} json Data source object / array from the server\n     *  @return {array} Array of data to use\n     */\n    function _fnAjaxDataSrc ( oSettings, json )\n    {\n        var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n            oSettings.ajax.dataSrc :\n            oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n        // Compatibility with 1.9-. In order to read from aaData, check if the\n        // default has been changed, if not, check for aaData\n        if ( dataSrc === 'data' ) {\n            return json.aaData || json[dataSrc];\n        }\n        return dataSrc !== \"\" ?\n            _fnGetObjectDataFn( dataSrc )( json ) :\n            json;\n    }\n    /**\n     * Generate the node required for filtering text\n     *  @returns {node} Filter control element\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlFilter ( settings )\n    {\n        var classes = settings.oClasses;\n        var tableId = settings.sTableId;\n        var language = settings.oLanguage;\n        var previousSearch = settings.oPreviousSearch;\n        var features = settings.aanFeatures;\n        var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n        var str = language.sSearch;\n        str = str.match(/_INPUT_/) ?\n            str.replace('_INPUT_', input) :\n            str+input;\n        var filter = $('<div/>', {\n                'id': ! features.f ? tableId+'_filter' : null,\n                'class': classes.sFilter\n            } )\n            .append( $('<label/>' ).append( str ) );\n        var searchFn = function() {\n            /* Update all other filter input elements for the new display */\n            var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n            /* Now do the filter */\n            if ( val != previousSearch.sSearch ) {\n                _fnFilterComplete( settings, {\n                    \"sSearch\": val,\n                    \"bRegex\": previousSearch.bRegex,\n                    \"bSmart\": previousSearch.bSmart ,\n                    \"bCaseInsensitive\": previousSearch.bCaseInsensitive\n                } );\n                // Need to redraw, without resorting\n                settings._iDisplayStart = 0;\n                _fnDraw( settings );\n            }\n        };\n        var searchDelay = settings.searchDelay !== null ?\n            settings.searchDelay :\n            _fnDataSource( settings ) === 'ssp' ?\n                400 :\n                0;\n        var jqFilter = $('input', filter)\n            .val( previousSearch.sSearch )\n            .attr( 'placeholder', language.sSearchPlaceholder )\n            .on(\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\n                searchDelay ?\n                    _fnThrottle( searchFn, searchDelay ) :\n                    searchFn\n            )\n            .on( 'keypress.DT', function(e) {\n                /* Prevent form submission */\n                if ( e.keyCode == 13 ) {\n                    return false;\n                }\n            } )\n            .attr('aria-controls', tableId);\n        // Update the input elements whenever the table is filtered\n        $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n            if ( settings === s ) {\n                // IE9 throws an 'unknown error' if document.activeElement is used\n                // inside an iframe or frame...\n                try {\n                    if ( jqFilter[0] !== document.activeElement ) {\n                        jqFilter.val( previousSearch.sSearch );\n                    }\n                }\n                catch ( e ) {}\n            }\n        } );\n        return filter[0];\n    }\n    /**\n     * Filter the table using both the global filter and column based filtering\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} oInput search information\n     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterComplete ( oSettings, oInput, iForce )\n    {\n        var oPrevSearch = oSettings.oPreviousSearch;\n        var aoPrevSearch = oSettings.aoPreSearchCols;\n        var fnSaveFilter = function ( oFilter ) {\n            /* Save the filtering values */\n            oPrevSearch.sSearch = oFilter.sSearch;\n            oPrevSearch.bRegex = oFilter.bRegex;\n            oPrevSearch.bSmart = oFilter.bSmart;\n            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n        };\n        var fnRegex = function ( o ) {\n            // Backwards compatibility with the bEscapeRegex option\n            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n        };\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo As per sort - can this be moved into an event handler?\n        _fnColumnTypes( oSettings );\n        /* In server-side processing all filtering is done by the server, so no point hanging around here */\n        if ( _fnDataSource( oSettings ) != 'ssp' )\n        {\n            /* Global filter */\n            _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n            fnSaveFilter( oInput );\n            /* Now do the individual column filter */\n            for ( var i=0 ; i<aoPrevSearch.length ; i++ )\n            {\n                _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n                    aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n            }\n            /* Custom filtering */\n            _fnFilterCustom( oSettings );\n        }\n        else\n        {\n            fnSaveFilter( oInput );\n        }\n        /* Tell the draw function we have been filtering */\n        oSettings.bFiltered = true;\n        _fnCallbackFire( oSettings, null, 'search', [oSettings] );\n    }\n    /**\n     * Apply custom filtering functions\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCustom( settings )\n    {\n        var filters = DataTable.ext.search;\n        var displayRows = settings.aiDisplay;\n        var row, rowIdx;\n        for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n            var rows = [];\n            // Loop over each row and see if it should be included\n            for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n                rowIdx = displayRows[j];\n                row = settings.aoData[rowIdx];\n                if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n                    rows.push( rowIdx );\n                }\n            }\n            // So the array reference doesn't break set the results into the\n            // existing array\n            displayRows.length = 0;\n            $.merge( displayRows, rows );\n        }\n    }\n    /**\n     * Filter the table on a per-column basis\n     *  @param {object} settings dataTables settings object\n     *  @param {string} searchStr string to filter on\n     *  @param {int} colIdx column to filter\n     *  @param {bool} regex treat search string as a regular expression or not\n     *  @param {bool} smart use smart filtering or not\n     *  @param {bool} caseInsensitive Do case insenstive matching or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n    {\n        if ( searchStr === '' ) {\n            return;\n        }\n        var data;\n        var out = [];\n        var display = settings.aiDisplay;\n        var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n        for ( var i=0 ; i<display.length ; i++ ) {\n            data = settings.aoData[display[i]]._aFilterData[colIdx];\n            if ( rpSearch.test( data ) ) {\n                out.push( display[i] );\n            }\n        }\n        settings.aiDisplay = out;\n    }\n    /**\n     * Filter the data table based on user input and draw the table\n     *  @param {object} settings dataTables settings object\n     *  @param {string} input string to filter on\n     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n     *  @param {bool} regex treat as a regular expression or not\n     *  @param {bool} smart perform smart filtering or not\n     *  @param {bool} caseInsensitive Do case insenstive matching or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n    {\n        var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n        var prevSearch = settings.oPreviousSearch.sSearch;\n        var displayMaster = settings.aiDisplayMaster;\n        var display, invalidated, i;\n        var filtered = [];\n        // Need to take account of custom filtering functions - always filter\n        if ( DataTable.ext.search.length !== 0 ) {\n            force = true;\n        }\n        // Check if any of the rows were invalidated\n        invalidated = _fnFilterData( settings );\n        // If the input is blank - we just want the full data set\n        if ( input.length <= 0 ) {\n            settings.aiDisplay = displayMaster.slice();\n        }\n        else {\n            // New search - start from the master array\n            if ( invalidated ||\n                 force ||\n                 prevSearch.length > input.length ||\n                 input.indexOf(prevSearch) !== 0 ||\n                 settings.bSorted // On resort, the display master needs to be\n                                  // re-filtered since indexes will have changed\n            ) {\n                settings.aiDisplay = displayMaster.slice();\n            }\n            // Search the display array\n            display = settings.aiDisplay;\n            for ( i=0 ; i<display.length ; i++ ) {\n                if ( rpSearch.test( settings.aoData[display[i]]._sFilterRow ) ) {\n                    filtered.push( display[i] );\n                }\n            }\n            settings.aiDisplay = filtered;\n        }\n    }\n    /**\n     * Build a regular expression object suitable for searching a table\n     *  @param {string} search string to search for\n     *  @param {bool} regex treat as a regular expression or not\n     *  @param {bool} smart perform smart filtering or not\n     *  @param {bool} caseInsensitive Do case insensitive matching or not\n     *  @returns {RegExp} constructed object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n    {\n        search = regex ?\n            search :\n            _fnEscapeRegex( search );\n        if ( smart ) {\n            /* For smart filtering we want to allow the search to work regardless of\n             * word order. We also want double quoted text to be preserved, so word\n             * order is important - a la google. So this is what we want to\n             * generate:\n             * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n             */\n            var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n                if ( word.charAt(0) === '\"' ) {\n                    var m = word.match( /^\"(.*)\"$/ );\n                    word = m ? m[1] : word;\n                }\n                return word.replace('\"', '');\n            } );\n            search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n        }\n        return new RegExp( search, caseInsensitive ? 'i' : '' );\n    }\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *  @param {string} sVal string to escape\n     *  @returns {string} escaped string\n     *  @memberof DataTable#oApi\n     */\n    var _fnEscapeRegex = DataTable.util.escapeRegex;\n    var __filter_div = $('<div>')[0];\n    var __filter_div_textContent = __filter_div.textContent !== undefined;\n    // Update the filtering data for each row if needed (by invalidation or first run)\n    /**\n     *  @param {string} settings string to escape\n     */\n    function _fnFilterData ( settings )\n    {\n        var columns = settings.aoColumns;\n        var column;\n        var i, j, ien, jen, filterData, cellData, row;\n        var fomatters = DataTable.ext.type.search;\n        var wasInvalidated = false;\n        for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            row = settings.aoData[i];\n            if ( ! row._aFilterData ) {\n                filterData = [];\n                for ( j=0, jen=columns.length ; j<jen ; j++ ) {\n                    column = columns[j];\n                    if ( column.bSearchable ) {\n                        cellData = _fnGetCellData( settings, i, j, 'filter' );\n                        if ( fomatters[column.sType] ) {\n                            cellData = fomatters[column.sType]( cellData );\n                        }\n                        // Search in DataTables 1.10 is string based. In 1.11 this\n                        // should be altered to also allow strict type checking.\n                        if ( cellData === null ) {\n                            cellData = '';\n                        }\n                        if ( typeof cellData !== 'string' && cellData.toString ) {\n                            cellData = cellData.toString();\n                        }\n                    }\n                    else {\n                        cellData = '';\n                    }\n                    // If it looks like there is an HTML entity in the string,\n                    // attempt to decode it so sorting works as expected. Note that\n                    // we could use a single line of jQuery to do this, but the DOM\n                    // method used here is much faster http://jsperf.com/html-decode\n                    if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n                        __filter_div.innerHTML = cellData;\n                        cellData = __filter_div_textContent ?\n                            __filter_div.textContent :\n                            __filter_div.innerText;\n                    }\n                    if ( cellData.replace ) {\n                        cellData = cellData.replace(/[\\r\\n]/g, '');\n                    }\n                    filterData.push( cellData );\n                }\n                row._aFilterData = filterData;\n                row._sFilterRow = filterData.join('  ');\n                wasInvalidated = true;\n            }\n        }\n        return wasInvalidated;\n    }\n    /**\n     * Convert from the internal Hungarian notation to camelCase for external\n     * interaction\n     *  @param {object} obj Object to convert\n     *  @returns {object} Inverted object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSearchToCamel ( obj )\n    {\n        return {\n            search:          obj.sSearch,\n            smart:           obj.bSmart,\n            regex:           obj.bRegex,\n            caseInsensitive: obj.bCaseInsensitive\n        };\n    }\n    /**\n     * Convert from camelCase notation to the internal Hungarian. We could use the\n     * Hungarian convert function here, but this is cleaner\n     *  @param {object} obj Object to convert\n     *  @returns {object} Inverted object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSearchToHung ( obj )\n    {\n        return {\n            sSearch:          obj.search,\n            bSmart:           obj.smart,\n            bRegex:           obj.regex,\n            bCaseInsensitive: obj.caseInsensitive\n        };\n    }\n    /**\n     * Generate the node required for the info display\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Information element\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlInfo ( settings )\n    {\n        var\n            tid = settings.sTableId,\n            nodes = settings.aanFeatures.i,\n            n = $('<div/>', {\n                'class': settings.oClasses.sInfo,\n                'id': ! nodes ? tid+'_info' : null\n            } );\n        if ( ! nodes ) {\n            // Update display on each draw\n            settings.aoDrawCallback.push( {\n                \"fn\": _fnUpdateInfo,\n                \"sName\": \"information\"\n            } );\n            n\n                .attr( 'role', 'status' )\n                .attr( 'aria-live', 'polite' );\n            // Table is described by our info div\n            $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n        }\n        return n[0];\n    }\n    /**\n     * Update the information elements in the display\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnUpdateInfo ( settings )\n    {\n        /* Show information about the table */\n        var nodes = settings.aanFeatures.i;\n        if ( nodes.length === 0 ) {\n            return;\n        }\n        var\n            lang  = settings.oLanguage,\n            start = settings._iDisplayStart+1,\n            end   = settings.fnDisplayEnd(),\n            max   = settings.fnRecordsTotal(),\n            total = settings.fnRecordsDisplay(),\n            out   = total ?\n                lang.sInfo :\n                lang.sInfoEmpty;\n        if ( total !== max ) {\n            /* Record set after filtering */\n            out += ' ' + lang.sInfoFiltered;\n        }\n        // Convert the macros\n        out += lang.sInfoPostFix;\n        out = _fnInfoMacros( settings, out );\n        var callback = lang.fnInfoCallback;\n        if ( callback !== null ) {\n            out = callback.call( settings.oInstance,\n                settings, start, end, max, total, out\n            );\n        }\n        $(nodes).html( out );\n    }\n    /**\n     *  @param {object} settings dataTables settings object\n     *  @param {object} str dataTables settings object\n     */\n    function _fnInfoMacros ( settings, str )\n    {\n        // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n        // internally\n        var\n            formatter  = settings.fnFormatNumber,\n            start      = settings._iDisplayStart+1,\n            len        = settings._iDisplayLength,\n            vis        = settings.fnRecordsDisplay(),\n            all        = len === -1;\n        return str.\n            replace(/_START_/g, formatter.call( settings, start ) ).\n            replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n            replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n            replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n            replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n            replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n    }\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitialise ( settings )\n    {\n        var i, iLen, iAjaxStart=settings.iInitDisplayStart;\n        var columns = settings.aoColumns, column;\n        var features = settings.oFeatures;\n        var deferLoading = settings.bDeferLoading; // value modified by the draw\n        /* Ensure that the table data is fully initialised */\n        if ( ! settings.bInitialised ) {\n            setTimeout( function(){ _fnInitialise( settings ); }, 200 );\n            return;\n        }\n        /* Show the display HTML options */\n        _fnAddOptionsHtml( settings );\n        /* Build and draw the header / footer for the table */\n        _fnBuildHead( settings );\n        _fnDrawHead( settings, settings.aoHeader );\n        _fnDrawHead( settings, settings.aoFooter );\n        /* Okay to show that something is going on now */\n        _fnProcessingDisplay( settings, true );\n        /* Calculate sizes for columns */\n        if ( features.bAutoWidth ) {\n            _fnCalculateColumnWidths( settings );\n        }\n        for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n            column = columns[i];\n            if ( column.sWidth ) {\n                column.nTh.style.width = _fnStringToCss( column.sWidth );\n            }\n        }\n        _fnCallbackFire( settings, null, 'preInit', [settings] );\n        // If there is default sorting required - let's do it. The sort function\n        // will do the drawing for us. Otherwise we draw the table regardless of the\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\n        // data (show 'loading' message possibly)\n        _fnReDraw( settings );\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\n        var dataSrc = _fnDataSource( settings );\n        if ( dataSrc != 'ssp' || deferLoading ) {\n            // if there is an ajax source load the data\n            if ( dataSrc == 'ajax' ) {\n                _fnBuildAjax( settings, [], function(json) {\n                    var aData = _fnAjaxDataSrc( settings, json );\n                    // Got the data - add it to the table\n                    for ( i=0 ; i<aData.length ; i++ ) {\n                        _fnAddData( settings, aData[i] );\n                    }\n                    // Reset the init display for cookie saving. We've already done\n                    // a filter, and therefore cleared it before. So we need to make\n                    // it appear 'fresh'\n                    settings.iInitDisplayStart = iAjaxStart;\n                    _fnReDraw( settings );\n                    _fnProcessingDisplay( settings, false );\n                    _fnInitComplete( settings, json );\n                }, settings );\n            }\n            else {\n                _fnProcessingDisplay( settings, false );\n                _fnInitComplete( settings );\n            }\n        }\n    }\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n     *    with client-side processing (optional)\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitComplete ( settings, json )\n    {\n        settings._bInitComplete = true;\n        // When data was added after the initialisation (data or Ajax) we need to\n        // calculate the column sizing\n        if ( json || settings.oInit.aaData ) {\n            _fnAdjustColumnSizing( settings );\n        }\n        _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n    }\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @param {object} val dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnLengthChange ( settings, val )\n    {\n        var len = parseInt( val, 10 );\n        settings._iDisplayLength = len;\n        _fnLengthOverflow( settings );\n        // Fire length change event\n        _fnCallbackFire( settings, null, 'length', [settings, len] );\n    }\n    /**\n     * Generate the node required for user display length changing\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Display length feature node\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlLength ( settings )\n    {\n        var\n            classes  = settings.oClasses,\n            tableId  = settings.sTableId,\n            menu     = settings.aLengthMenu,\n            d2       = $.isArray( menu[0] ),\n            lengths  = d2 ? menu[0] : menu,\n            language = d2 ? menu[1] : menu;\n        var select = $('<select/>', {\n            'name':          tableId+'_length',\n            'aria-controls': tableId,\n            'class':         classes.sLengthSelect\n        } );\n        for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n            select[0][i] = new Option( language[i], lengths[i] );\n        }\n        var div = $('<div><label/></div>').addClass( classes.sLength );\n        if ( ! settings.aanFeatures.l ) {\n            div[0].id = tableId+'_length';\n        }\n        div.children().append(\n            settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n        );\n        // Can't use `select` variable as user might provide their own and the\n        // reference is broken by the use of outerHTML\n        $('select', div)\n            .val( settings._iDisplayLength )\n            .on( 'change.DT', function() {\n                _fnLengthChange( settings, $(this).val() );\n                _fnDraw( settings );\n            } );\n        // Update node value whenever anything changes the table's length\n        $(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\n            if ( settings === s ) {\n                $('select', div).val( len );\n            }\n        } );\n        return div[0];\n    }\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Note that most of the paging logic is done in\n     * DataTable.ext.pager\n     */\n    /**\n     * Generate the node required for default pagination\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Pagination feature node\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlPaginate ( settings )\n    {\n        var\n            type   = settings.sPaginationType,\n            plugin = DataTable.ext.pager[type],\n            modern = typeof plugin === 'function',\n            redraw = function( settings ) {\n                _fnDraw( settings );\n            },\n            node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n            features = settings.aanFeatures;\n        if ( ! modern ) {\n            plugin.fnInit( settings, node, redraw );\n        }\n        /* Add a draw callback for the pagination on first instance, to update the paging display */\n        if ( ! features.p )\n        {\n            node.id = settings.sTableId+'_paginate';\n            settings.aoDrawCallback.push( {\n                \"fn\": function( settings ) {\n                    if ( modern ) {\n                        var\n                            start      = settings._iDisplayStart,\n                            len        = settings._iDisplayLength,\n                            visRecords = settings.fnRecordsDisplay(),\n                            all        = len === -1,\n                            page = all ? 0 : Math.ceil( start / len ),\n                            pages = all ? 1 : Math.ceil( visRecords / len ),\n                            buttons = plugin(page, pages),\n                            i, ien;\n                        for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n                            _fnRenderer( settings, 'pageButton' )(\n                                settings, features.p[i], i, buttons, page, pages\n                            );\n                        }\n                    }\n                    else {\n                        plugin.fnUpdate( settings, redraw );\n                    }\n                },\n                \"sName\": \"pagination\"\n            } );\n        }\n        return node;\n    }\n    /**\n     * Alter the display settings to change the page\n     *  @param {object} settings DataTables settings object\n     *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n     *    \"next\" or \"last\" or page number to jump to (integer)\n     *  @param {redraw} redraw Automatically draw the update or not\n     */\n    function _fnPageChange ( settings, action, redraw )\n    {\n        var\n            start     = settings._iDisplayStart,\n            len       = settings._iDisplayLength,\n            records   = settings.fnRecordsDisplay();\n        if ( records === 0 || len === -1 )\n        {\n            start = 0;\n        }\n        else if ( typeof action === \"number\" )\n        {\n            start = action * len;\n            if ( start > records )\n            {\n                start = 0;\n            }\n        }\n        else if ( action == \"first\" )\n        {\n            start = 0;\n        }\n        else if ( action == \"previous\" )\n        {\n            start = len >= 0 ?\n                start - len :\n                0;\n            if ( start < 0 )\n            {\n              start = 0;\n            }\n        }\n        else if ( action == \"next\" )\n        {\n            if ( start + len < records )\n            {\n                start += len;\n            }\n        }\n        else if ( action == \"last\" )\n        {\n            start = Math.floor( (records-1) / len) * len;\n        }\n        else\n        {\n            _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n        }\n        var changed = settings._iDisplayStart !== start;\n        settings._iDisplayStart = start;\n        if ( changed ) {\n            _fnCallbackFire( settings, null, 'page', [settings] );\n            if ( redraw ) {\n                _fnDraw( settings );\n            }\n        }\n        return changed;\n    }\n    /**\n     * Generate the node required for the processing node\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Processing element\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlProcessing ( settings )\n    {\n        return $('<div/>', {\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n                'class': settings.oClasses.sProcessing\n            } )\n            .html( settings.oLanguage.sProcessing )\n            .insertBefore( settings.nTable )[0];\n    }\n    /**\n     * Display or hide the processing indicator\n     *  @param {object} settings dataTables settings object\n     *  @param {bool} show Show the processing indicator (true) or not (false)\n     *  @memberof DataTable#oApi\n     */\n    function _fnProcessingDisplay ( settings, show )\n    {\n        if ( settings.oFeatures.bProcessing ) {\n            $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n        }\n        _fnCallbackFire( settings, null, 'processing', [settings, show] );\n    }\n    /**\n     * Add any control elements for the table - specifically scrolling\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Node to add to the DOM\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlTable ( settings )\n    {\n        var table = $(settings.nTable);\n        // Add the ARIA grid role to the table\n        table.attr( 'role', 'grid' );\n        // Scrolling from here on in\n        var scroll = settings.oScroll;\n        if ( scroll.sX === '' && scroll.sY === '' ) {\n            return settings.nTable;\n        }\n        var scrollX = scroll.sX;\n        var scrollY = scroll.sY;\n        var classes = settings.oClasses;\n        var caption = table.children('caption');\n        var captionSide = caption.length ? caption[0]._captionSide : null;\n        var headerClone = $( table[0].cloneNode(false) );\n        var footerClone = $( table[0].cloneNode(false) );\n        var footer = table.children('tfoot');\n        var _div = '<div/>';\n        var size = function ( s ) {\n            return !s ? null : _fnStringToCss( s );\n        };\n        if ( ! footer.length ) {\n            footer = null;\n        }\n        /*\n         * The HTML structure that we want to generate in this function is:\n         *  div - scroller\n         *    div - scroll head\n         *      div - scroll head inner\n         *        table - scroll head table\n         *          thead - thead\n         *    div - scroll body\n         *      table - table (master table)\n         *        thead - thead clone for sizing\n         *        tbody - tbody\n         *    div - scroll foot\n         *      div - scroll foot inner\n         *        table - scroll foot table\n         *          tfoot - tfoot\n         */\n        var scroller = $( _div, { 'class': classes.sScrollWrapper } )\n            .append(\n                $(_div, { 'class': classes.sScrollHead } )\n                    .css( {\n                        overflow: 'hidden',\n                        position: 'relative',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    } )\n                    .append(\n                        $(_div, { 'class': classes.sScrollHeadInner } )\n                            .css( {\n                                'box-sizing': 'content-box',\n                                width: scroll.sXInner || '100%'\n                            } )\n                            .append(\n                                headerClone\n                                    .removeAttr('id')\n                                    .css( 'margin-left', 0 )\n                                    .append( captionSide === 'top' ? caption : null )\n                                    .append(\n                                        table.children('thead')\n                                    )\n                            )\n                    )\n            )\n            .append(\n                $(_div, { 'class': classes.sScrollBody } )\n                    .css( {\n                        position: 'relative',\n                        overflow: 'auto',\n                        width: size( scrollX )\n                    } )\n                    .append( table )\n            );\n        if ( footer ) {\n            scroller.append(\n                $(_div, { 'class': classes.sScrollFoot } )\n                    .css( {\n                        overflow: 'hidden',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    } )\n                    .append(\n                        $(_div, { 'class': classes.sScrollFootInner } )\n                            .append(\n                                footerClone\n                                    .removeAttr('id')\n                                    .css( 'margin-left', 0 )\n                                    .append( captionSide === 'bottom' ? caption : null )\n                                    .append(\n                                        table.children('tfoot')\n                                    )\n                            )\n                    )\n            );\n        }\n        var children = scroller.children();\n        var scrollHead = children[0];\n        var scrollBody = children[1];\n        var scrollFoot = footer ? children[2] : null;\n        // When the body is scrolled, then we also want to scroll the headers\n        if ( scrollX ) {\n            $(scrollBody).on( 'scroll.DT', function () {\n                var scrollLeft = this.scrollLeft;\n                scrollHead.scrollLeft = scrollLeft;\n                if ( footer ) {\n                    scrollFoot.scrollLeft = scrollLeft;\n                }\n            } );\n        }\n        $(scrollBody).css(\n            scrollY && scroll.bCollapse ? 'max-height' : 'height',\n            scrollY\n        );\n        settings.nScrollHead = scrollHead;\n        settings.nScrollBody = scrollBody;\n        settings.nScrollFoot = scrollFoot;\n        // On redraw - align columns\n        settings.aoDrawCallback.push( {\n            \"fn\": _fnScrollDraw,\n            \"sName\": \"scrolling\"\n        } );\n        return scroller[0];\n    }\n    /**\n     * Update the header, footer and body tables for resizing - i.e. column\n     * alignment.\n     *\n     * Welcome to the most horrible function DataTables. The process that this\n     * function follows is basically:\n     *   1. Re-create the table inside the scrolling div\n     *   2. Take live measurements from the DOM\n     *   3. Apply the measurements to align the columns\n     *   4. Clean up\n     *\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnScrollDraw ( settings )\n    {\n        // Given that this is such a monster function, a lot of variables are use\n        // to try and keep the minimised size as small as possible\n        var\n            scroll         = settings.oScroll,\n            scrollX        = scroll.sX,\n            scrollXInner   = scroll.sXInner,\n            scrollY        = scroll.sY,\n            barWidth       = scroll.iBarWidth,\n            divHeader      = $(settings.nScrollHead),\n            divHeaderStyle = divHeader[0].style,\n            divHeaderInner = divHeader.children('div'),\n            divHeaderInnerStyle = divHeaderInner[0].style,\n            divHeaderTable = divHeaderInner.children('table'),\n            divBodyEl      = settings.nScrollBody,\n            divBody        = $(divBodyEl),\n            divBodyStyle   = divBodyEl.style,\n            divFooter      = $(settings.nScrollFoot),\n            divFooterInner = divFooter.children('div'),\n            divFooterTable = divFooterInner.children('table'),\n            header         = $(settings.nTHead),\n            table          = $(settings.nTable),\n            tableEl        = table[0],\n            tableStyle     = tableEl.style,\n            footer         = settings.nTFoot ? $(settings.nTFoot) : null,\n            browser        = settings.oBrowser,\n            ie67           = browser.bScrollOversize,\n            dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n            headerTrgEls, footerTrgEls,\n            headerSrcEls, footerSrcEls,\n            headerCopy, footerCopy,\n            headerWidths=[], footerWidths=[],\n            headerContent=[], footerContent=[],\n            idx, correction, sanityWidth,\n            zeroOut = function(nSizer) {\n                var style = nSizer.style;\n                style.paddingTop = \"0\";\n                style.paddingBottom = \"0\";\n                style.borderTopWidth = \"0\";\n                style.borderBottomWidth = \"0\";\n                style.height = 0;\n            };\n        // If the scrollbar visibility has changed from the last draw, we need to\n        // adjust the column sizes as the table width will have changed to account\n        // for the scrollbar\n        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n        if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n            settings.scrollBarVis = scrollBarVis;\n            _fnAdjustColumnSizing( settings );\n            return; // adjust column sizing will call this function again\n        }\n        else {\n            settings.scrollBarVis = scrollBarVis;\n        }\n        /*\n         * 1. Re-create the table inside the scrolling div\n         */\n        // Remove the old minimised thead and tfoot elements in the inner table\n        table.children('thead, tfoot').remove();\n        if ( footer ) {\n            footerCopy = footer.clone().prependTo( table );\n            footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n            footerSrcEls = footerCopy.find('tr');\n        }\n        // Clone the current header and footer elements and then place it into the inner table\n        headerCopy = header.clone().prependTo( table );\n        headerTrgEls = header.find('tr'); // original header is in its own table\n        headerSrcEls = headerCopy.find('tr');\n        headerCopy.find('th, td').removeAttr('tabindex');\n        /*\n         * 2. Take live measurements from the DOM - do not alter the DOM itself!\n         */\n        // Remove old sizing and apply the calculated column widths\n        // Get the unique column headers in the newly created (cloned) header. We want to apply the\n        // calculated sizes to this header\n        if ( ! scrollX )\n        {\n            divBodyStyle.width = '100%';\n            divHeader[0].style.width = '100%';\n        }\n        $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n            idx = _fnVisibleToColumnIndex( settings, i );\n            el.style.width = settings.aoColumns[idx].sWidth;\n        } );\n        if ( footer ) {\n            _fnApplyToChildren( function(n) {\n                n.style.width = \"\";\n            }, footerSrcEls );\n        }\n        // Size the table as a whole\n        sanityWidth = table.outerWidth();\n        if ( scrollX === \"\" ) {\n            // No x scrolling\n            tableStyle.width = \"100%\";\n            // IE7 will make the width of the table when 100% include the scrollbar\n            // - which is shouldn't. When there is a scrollbar we need to take this\n            // into account.\n            if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n                divBody.css('overflow-y') == \"scroll\")\n            ) {\n                tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n            }\n            // Recalculate the sanity width\n            sanityWidth = table.outerWidth();\n        }\n        else if ( scrollXInner !== \"\" ) {\n            // legacy x scroll inner has been given - use it\n            tableStyle.width = _fnStringToCss(scrollXInner);\n            // Recalculate the sanity width\n            sanityWidth = table.outerWidth();\n        }\n        // Hidden header should have zero height, so remove padding and borders. Then\n        // set the width based on the real headers\n        // Apply all styles in one pass\n        _fnApplyToChildren( zeroOut, headerSrcEls );\n        // Read all widths in next pass\n        _fnApplyToChildren( function(nSizer) {\n            headerContent.push( nSizer.innerHTML );\n            headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n        }, headerSrcEls );\n        // Apply all widths in final pass\n        _fnApplyToChildren( function(nToSize, i) {\n            // Only apply widths to the DataTables detected header cells - this\n            // prevents complex headers from having contradictory sizes applied\n            if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\n                nToSize.style.width = headerWidths[i];\n            }\n        }, headerTrgEls );\n        $(headerSrcEls).height(0);\n        /* Same again with the footer if we have one */\n        if ( footer )\n        {\n            _fnApplyToChildren( zeroOut, footerSrcEls );\n            _fnApplyToChildren( function(nSizer) {\n                footerContent.push( nSizer.innerHTML );\n                footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n            }, footerSrcEls );\n            _fnApplyToChildren( function(nToSize, i) {\n                nToSize.style.width = footerWidths[i];\n            }, footerTrgEls );\n            $(footerSrcEls).height(0);\n        }\n        /*\n         * 3. Apply the measurements\n         */\n        // \"Hide\" the header and footer that we used for the sizing. We need to keep\n        // the content of the cell so that the width applied to the header and body\n        // both match, but we want to hide it completely. We want to also fix their\n        // width to what they currently are\n        _fnApplyToChildren( function(nSizer, i) {\n            nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\n            nSizer.style.width = headerWidths[i];\n        }, headerSrcEls );\n        if ( footer )\n        {\n            _fnApplyToChildren( function(nSizer, i) {\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+footerContent[i]+'</div>';\n                nSizer.style.width = footerWidths[i];\n            }, footerSrcEls );\n        }\n        // Sanity check that the table is of a sensible width. If not then we are going to get\n        // misalignment - try to prevent this by not allowing the table to shrink below its min width\n        if ( table.outerWidth() < sanityWidth )\n        {\n            // The min width depends upon if we have a vertical scrollbar visible or not */\n            correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n                divBody.css('overflow-y') == \"scroll\")) ?\n                    sanityWidth+barWidth :\n                    sanityWidth;\n            // IE6/7 are a law unto themselves...\n            if ( ie67 && (divBodyEl.scrollHeight >\n                divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n            ) {\n                tableStyle.width = _fnStringToCss( correction-barWidth );\n            }\n            // And give the user a warning that we've stopped the table getting too small\n            if ( scrollX === \"\" || scrollXInner !== \"\" ) {\n                _fnLog( settings, 1, 'Possible column misalignment', 6 );\n            }\n        }\n        else\n        {\n            correction = '100%';\n        }\n        // Apply to the container elements\n        divBodyStyle.width = _fnStringToCss( correction );\n        divHeaderStyle.width = _fnStringToCss( correction );\n        if ( footer ) {\n            settings.nScrollFoot.style.width = _fnStringToCss( correction );\n        }\n        /*\n         * 4. Clean up\n         */\n        if ( ! scrollY ) {\n            /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n             * the scrollbar height from the visible display, rather than adding it on. We need to\n             * set the height in order to sort this. Don't want to do it in any other browsers.\n             */\n            if ( ie67 ) {\n                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n            }\n        }\n        /* Finally set the width's of the header and footer tables */\n        var iOuterWidth = table.outerWidth();\n        divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n        divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n        // Figure out if there are scrollbar present - if so then we need a the header and footer to\n        // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n        divHeaderInnerStyle[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n        if ( footer ) {\n            divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n            divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n            divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n        }\n        // Correct DOM ordering for colgroup - comes before the thead\n        table.children('colgroup').insertBefore( table.children('thead') );\n        /* Adjust the position of the header in case we loose the y-scrollbar */\n        divBody.scroll();\n        // If sorting or filtering has occurred, jump the scrolling back to the top\n        // only if we aren't holding the position\n        if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n            divBodyEl.scrollTop = 0;\n        }\n    }\n    /**\n     * Apply a given function to the display child nodes of an element array (typically\n     * TD children of TR rows\n     *  @param {function} fn Method to apply to the objects\n     *  @param {an1} an1 List of elements to look through for display children\n     *  @param {an2} an2 Another list (identical structure to the first) - optional\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyToChildren( fn, an1, an2 )\n    {\n        var index=0, i=0, iLen=an1.length;\n        var nNode1, nNode2;\n        while ( i < iLen ) {\n            nNode1 = an1[i].firstChild;\n            nNode2 = an2 ? an2[i].firstChild : null;\n            while ( nNode1 ) {\n                if ( nNode1.nodeType === 1 ) {\n                    if ( an2 ) {\n                        fn( nNode1, nNode2, index );\n                    }\n                    else {\n                        fn( nNode1, index );\n                    }\n                    index++;\n                }\n                nNode1 = nNode1.nextSibling;\n                nNode2 = an2 ? nNode2.nextSibling : null;\n            }\n            i++;\n        }\n    }\n    var __re_html_remove = /<.*?>/g;\n    /**\n     * Calculate the width of columns for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnCalculateColumnWidths ( oSettings )\n    {\n        var\n            table = oSettings.nTable,\n            columns = oSettings.aoColumns,\n            scroll = oSettings.oScroll,\n            scrollY = scroll.sY,\n            scrollX = scroll.sX,\n            scrollXInner = scroll.sXInner,\n            columnCount = columns.length,\n            visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n            headerCells = $('th', oSettings.nTHead),\n            tableWidthAttr = table.getAttribute('width'), // from DOM element\n            tableContainer = table.parentNode,\n            userInputs = false,\n            i, column, columnIdx,\n            browser = oSettings.oBrowser,\n            ie67 = browser.bScrollOversize;\n        var styleWidth = table.style.width;\n        if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n            tableWidthAttr = styleWidth;\n        }\n        /* Convert any user input sizes into pixel sizes */\n        for ( i=0 ; i<visibleColumns.length ; i++ ) {\n            column = columns[visibleColumns[i]];\n            if ( column.sWidth !== null ) {\n                column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n                userInputs = true;\n            }\n        }\n        /* If the number of columns in the DOM equals the number that we have to\n         * process in DataTables, then we can use the offsets that are created by\n         * the web- browser. No custom sizes can be set in order for this to happen,\n         * nor scrolling used\n         */\n        if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n             columnCount == _fnVisbleColumns( oSettings ) &&\n             columnCount == headerCells.length\n        ) {\n            for ( i=0 ; i<columnCount ; i++ ) {\n                var colIdx = _fnVisibleToColumnIndex( oSettings, i );\n                if ( colIdx !== null ) {\n                    columns[colIdx].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n                }\n            }\n        }\n        else\n        {\n            // Otherwise construct a single row, worst case, table with the widest\n            // node in the data, assign any user defined widths, then insert it into\n            // the DOM and allow the browser to do all the hard work of calculating\n            // table widths\n            var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n                .css( 'visibility', 'hidden' )\n                .removeAttr( 'id' );\n            // Clean up the table body\n            tmpTable.find('tbody tr').remove();\n            var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n            // Clone the table header and footer - we can't use the header / footer\n            // from the cloned table, since if scrolling is active, the table's\n            // real header and footer are contained in different table tags\n            tmpTable.find('thead, tfoot').remove();\n            tmpTable\n                .append( $(oSettings.nTHead).clone() )\n                .append( $(oSettings.nTFoot).clone() );\n            // Remove any assigned widths from the footer (from scrolling)\n            tmpTable.find('tfoot th, tfoot td').css('width', '');\n            // Apply custom sizing to the cloned header\n            headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                column = columns[visibleColumns[i]];\n                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n                    _fnStringToCss( column.sWidthOrig ) :\n                    '';\n                // For scrollX we need to force the column width otherwise the\n                // browser will collapse it. If this width is smaller than the\n                // width the column requires, then it will have no effect\n                if ( column.sWidthOrig && scrollX ) {\n                    $( headerCells[i] ).append( $('<div/>').css( {\n                        width: column.sWidthOrig,\n                        margin: 0,\n                        padding: 0,\n                        border: 0,\n                        height: 1\n                    } ) );\n                }\n            }\n            // Find the widest cell for each column and put it into the table\n            if ( oSettings.aoData.length ) {\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                    columnIdx = visibleColumns[i];\n                    column = columns[columnIdx];\n                    $( _fnGetWidestNode( oSettings, columnIdx ) )\n                        .clone( false )\n                        .append( column.sContentPadding )\n                        .appendTo( tr );\n                }\n            }\n            // Tidy the temporary table - remove name attributes so there aren't\n            // duplicated in the dom (radio elements for example)\n            $('[name]', tmpTable).removeAttr('name');\n            // Table has been built, attach to the document so we can work with it.\n            // A holding element is used, positioned at the top of the container\n            // with minimal height, so it has no effect on if the container scrolls\n            // or not. Otherwise it might trigger scrolling when it actually isn't\n            // needed\n            var holder = $('<div/>').css( scrollX || scrollY ?\n                    {\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        height: 1,\n                        right: 0,\n                        overflow: 'hidden'\n                    } :\n                    {}\n                )\n                .append( tmpTable )\n                .appendTo( tableContainer );\n            // When scrolling (X or Y) we want to set the width of the table as\n            // appropriate. However, when not scrolling leave the table width as it\n            // is. This results in slightly different, but I think correct behaviour\n            if ( scrollX && scrollXInner ) {\n                tmpTable.width( scrollXInner );\n            }\n            else if ( scrollX ) {\n                tmpTable.css( 'width', 'auto' );\n                tmpTable.removeAttr('width');\n                // If there is no width attribute or style, then allow the table to\n                // collapse\n                if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n                    tmpTable.width( tableContainer.clientWidth );\n                }\n            }\n            else if ( scrollY ) {\n                tmpTable.width( tableContainer.clientWidth );\n            }\n            else if ( tableWidthAttr ) {\n                tmpTable.width( tableWidthAttr );\n            }\n            // Get the width of each column in the constructed table - we need to\n            // know the inner width (so it can be assigned to the other table's\n            // cells) and the outer width so we can calculate the full width of the\n            // table. This is safe since DataTables requires a unique cell for each\n            // column, but if ever a header can span multiple columns, this will\n            // need to be modified.\n            var total = 0;\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                var cell = $(headerCells[i]);\n                var border = cell.outerWidth() - cell.width();\n                // Use getBounding... where possible (not IE8-) because it can give\n                // sub-pixel accuracy, which we then want to round up!\n                var bounding = browser.bBounding ?\n                    Math.ceil( headerCells[i].getBoundingClientRect().width ) :\n                    cell.outerWidth();\n                // Total is tracked to remove any sub-pixel errors as the outerWidth\n                // of the table might not equal the total given here (IE!).\n                total += bounding;\n                // Width for each column to use\n                columns[visibleColumns[i]].sWidth = _fnStringToCss( bounding - border );\n            }\n            table.style.width = _fnStringToCss( total );\n            // Finished with the table - ditch it\n            holder.remove();\n        }\n        // If there is a width attr, we want to attach an event listener which\n        // allows the table sizing to automatically adjust when the window is\n        // resized. Use the width attr rather than CSS, since we can't know if the\n        // CSS is a relative value or absolute - DOM read is always px.\n        if ( tableWidthAttr ) {\n            table.style.width = _fnStringToCss( tableWidthAttr );\n        }\n        if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n            var bindResize = function () {\n                $(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n                    _fnAdjustColumnSizing( oSettings );\n                } ) );\n            };\n            // IE6/7 will crash if we bind a resize event handler on page load.\n            // To be removed in 1.11 which drops IE6/7 support\n            if ( ie67 ) {\n                setTimeout( bindResize, 1000 );\n            }\n            else {\n                bindResize();\n            }\n            oSettings._reszEvt = true;\n        }\n    }\n    /**\n     * Throttle the calls to a function. Arguments and context are maintained for\n     * the throttled function\n     *  @param {function} fn Function to be called\n     *  @param {int} [freq=200] call frequency in mS\n     *  @returns {function} wrapped function\n     *  @memberof DataTable#oApi\n     */\n    var _fnThrottle = DataTable.util.throttle;\n    /**\n     * Convert a CSS unit width to pixels (e.g. 2em)\n     *  @param {string} width width to be converted\n     *  @param {node} parent parent to get the with for (required for relative widths) - optional\n     *  @returns {int} width in pixels\n     *  @memberof DataTable#oApi\n     */\n    function _fnConvertToWidth ( width, parent )\n    {\n        if ( ! width ) {\n            return 0;\n        }\n        var n = $('<div/>')\n            .css( 'width', _fnStringToCss( width ) )\n            .appendTo( parent || document.body );\n        var val = n[0].offsetWidth;\n        n.remove();\n        return val;\n    }\n    /**\n     * Get the widest node\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {node} widest table node\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetWidestNode( settings, colIdx )\n    {\n        var idx = _fnGetMaxLenString( settings, colIdx );\n        if ( idx < 0 ) {\n            return null;\n        }\n        var data = settings.aoData[idx];\n        return ! data.nTr ? // Might not have been created when deferred rendering\n            $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n            data.anCells[colIdx];\n    }\n    /**\n     * Get the maximum strlen for each data column\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {string} max string length for each column\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetMaxLenString( settings, colIdx )\n    {\n        var s, max=-1, maxIdx = -1;\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n            s = s.replace( __re_html_remove, '' );\n            s = s.replace( /&nbsp;/g, ' ' );\n            if ( s.length > max ) {\n                max = s.length;\n                maxIdx = i;\n            }\n        }\n        return maxIdx;\n    }\n    /**\n     * Append a CSS unit (only if required) to a string\n     *  @param {string} s to css-ify\n     *  @returns {string} value with css unit\n     *  @memberof DataTable#oApi\n     */\n    function _fnStringToCss( s )\n    {\n        if ( s === null ) {\n            return '0px';\n        }\n        if ( typeof s == 'number' ) {\n            return s < 0 ?\n                '0px' :\n                s+'px';\n        }\n        // Check it has a unit character already\n        return s.match(/\\d$/) ?\n            s+'px' :\n            s;\n    }\n    /**\n     * Append a CSS unit (only if required) to a string\n     *  @param {string} settings to css-ify\n     */\n    function _fnSortFlatten ( settings )\n    {\n        var\n            i, k, kLen,\n            aSort = [],\n            aoColumns = settings.aoColumns,\n            aDataSort, iCol, sType, srcCol,\n            fixed = settings.aaSortingFixed,\n            fixedObj = $.isPlainObject( fixed ),\n            nestedSort = [],\n            add = function ( a ) {\n                if ( a.length && ! $.isArray( a[0] ) ) {\n                    // 1D array\n                    nestedSort.push( a );\n                }\n                else {\n                    // 2D array\n                    $.merge( nestedSort, a );\n                }\n            };\n        // Build the sort array, with pre-fix and post-fix options if they have been\n        // specified\n        if ( $.isArray( fixed ) ) {\n            add( fixed );\n        }\n        if ( fixedObj && fixed.pre ) {\n            add( fixed.pre );\n        }\n        add( settings.aaSorting );\n        if (fixedObj && fixed.post ) {\n            add( fixed.post );\n        }\n        for ( i=0 ; i<nestedSort.length ; i++ )\n        {\n            srcCol = nestedSort[i][0];\n            aDataSort = aoColumns[srcCol].aDataSort;\n            for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n            {\n                iCol = aDataSort[k];\n                sType = aoColumns[iCol].sType || 'string';\n                if ( nestedSort[i]._idx === undefined ) {\n                    nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n                }\n                aSort.push( {\n                    src:       srcCol,\n                    col:       iCol,\n                    dir:       nestedSort[i][1],\n                    index:     nestedSort[i]._idx,\n                    type:      sType,\n                    formatter: DataTable.ext.type.order[sType+\"-pre\"]\n                } );\n            }\n        }\n        return aSort;\n    }\n    /**\n     * Change the order of the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     *  @todo This really needs split up!\n     */\n    function _fnSort ( oSettings )\n    {\n        var\n            i, ien, iLen,\n            aiOrig = [],\n            oExtSort = DataTable.ext.type.order,\n            aoData = oSettings.aoData,\n            formatters = 0,\n            sortCol,\n            displayMaster = oSettings.aiDisplayMaster,\n            aSort;\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo Can this be moved into a 'data-ready' handler which is called when\n        //   data is going to be used in the table?\n        _fnColumnTypes( oSettings );\n        aSort = _fnSortFlatten( oSettings );\n        for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n            sortCol = aSort[i];\n            // Track if we can use the fast sort algorithm\n            if ( sortCol.formatter ) {\n                formatters++;\n            }\n            // Load the data needed for the sort, for each cell\n            _fnSortData( oSettings, sortCol.col );\n        }\n        /* No sorting required if server-side or no sorting array */\n        if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n        {\n            // Create a value - key array of the current row positions such that we can use their\n            // current position during the sort, if values match, in order to perform stable sorting\n            for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n                aiOrig[displayMaster[i]] = i;\n            }\n            /* Do the sort - here we want multi-column sorting based on a given data source (column)\n             * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n             * follow on it's own, but this is what we want (example two column sorting):\n             *  fnLocalSorting = function(a,b){\n             *    var iTest;\n             *    iTest = oSort['string-asc']('data11', 'data12');\n             *      if (iTest !== 0)\n             *        return iTest;\n             *    iTest = oSort['numeric-desc']('data21', 'data22');\n             *    if (iTest !== 0)\n             *      return iTest;\n             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n             *  }\n             * Basically we have a test for each sorting column, if the data in that column is equal,\n             * test the next column. If all columns match, then we use a numeric sort on the row\n             * positions in the original data array to provide a stable sort.\n             *\n             * Note - I know it seems excessive to have two sorting methods, but the first is around\n             * 15% faster, so the second is only maintained for backwards compatibility with sorting\n             * methods which do not have a pre-sort formatting function.\n             */\n            if ( formatters === aSort.length ) {\n                // All sort types have formatting functions\n                displayMaster.sort( function ( a, b ) {\n                    var\n                        x, y, k, test, sort,\n                        len=aSort.length,\n                        dataA = aoData[a]._aSortData,\n                        dataB = aoData[b]._aSortData;\n                    for ( k=0 ; k<len ; k++ ) {\n                        sort = aSort[k];\n                        x = dataA[sort.col];\n                        y = dataB[sort.col];\n                        test = x<y ? -1 : x>y ? 1 : 0;\n                        if ( test !== 0 ) {\n                            return sort.dir === 'asc' ? test : -test;\n                        }\n                    }\n                    x = aiOrig[a];\n                    y = aiOrig[b];\n                    return x<y ? -1 : x>y ? 1 : 0;\n                } );\n            }\n            else {\n                // Depreciated - remove in 1.11 (providing a plug-in option)\n                // Not all sort types have formatting methods, so we have to call their sorting\n                // methods.\n                displayMaster.sort( function ( a, b ) {\n                    var\n                        x, y, k, test, sort, fn,\n                        len=aSort.length,\n                        dataA = aoData[a]._aSortData,\n                        dataB = aoData[b]._aSortData;\n                    for ( k=0 ; k<len ; k++ ) {\n                        sort = aSort[k];\n                        x = dataA[sort.col];\n                        y = dataB[sort.col];\n                        fn = oExtSort[sort.type+\"-\"+sort.dir] || oExtSort[\"string-\"+sort.dir];\n                        test = fn( x, y );\n                        if ( test !== 0 ) {\n                            return test;\n                        }\n                    }\n                    x = aiOrig[a];\n                    y = aiOrig[b];\n                    return x<y ? -1 : x>y ? 1 : 0;\n                } );\n            }\n        }\n        /* Tell the draw function that we have sorted the data */\n        oSettings.bSorted = true;\n    }\n    /**\n     * Change the order of the table\n     *  @param {object} settings dataTables settings object\n     *  @todo This really needs split up!\n     */\n    function _fnSortAria ( settings )\n    {\n        var label;\n        var nextSort;\n        var columns = settings.aoColumns;\n        var aSort = _fnSortFlatten( settings );\n        var oAria = settings.oLanguage.oAria;\n        // ARIA attributes - need to loop all columns, to update all (removing old\n        // attributes as needed)\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n        {\n            var col = columns[i];\n            var asSorting = col.asSorting;\n            var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n            var th = col.nTh;\n            // IE7 is throwing an error when setting these properties with jQuery's\n            // attr() and removeAttr() methods...\n            th.removeAttribute('aria-sort');\n            /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n            if ( col.bSortable ) {\n                if ( aSort.length > 0 && aSort[0].col == i ) {\n                    th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n                    nextSort = asSorting[aSort[0].index+1] || asSorting[0];\n                }\n                else {\n                    nextSort = asSorting[0];\n                }\n                label = sTitle + ( nextSort === \"asc\" ?\n                    oAria.sSortAscending :\n                    oAria.sSortDescending\n                );\n            }\n            else {\n                label = sTitle;\n            }\n            th.setAttribute('aria-label', label);\n        }\n    }\n    /**\n     * Function to run on user sort request\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column sorting index\n     *  @param {boolean} [append=false] Append the requested sort to the existing\n     *    sort if true (i.e. multi-column sort)\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortListener ( settings, colIdx, append, callback )\n    {\n        var col = settings.aoColumns[colIdx];\n        var sorting = settings.aaSorting;\n        var asSorting = col.asSorting;\n        var nextSortIdx;\n        var next = function ( a, overflow ) {\n            var idx = a._idx;\n            if ( idx === undefined ) {\n                idx = $.inArray( a[1], asSorting );\n            }\n            return idx+1 < asSorting.length ?\n                idx+1 :\n                overflow ?\n                    null :\n                    0;\n        };\n        // Convert to 2D array if needed\n        if ( typeof sorting[0] === 'number' ) {\n            sorting = settings.aaSorting = [ sorting ];\n        }\n        // If appending the sort then we are multi-column sorting\n        if ( append && settings.oFeatures.bSortMulti ) {\n            // Are we already doing some kind of sort on this column?\n            var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n            if ( sortIdx !== -1 ) {\n                // Yes, modify the sort\n                nextSortIdx = next( sorting[sortIdx], true );\n                if ( nextSortIdx === null && sorting.length === 1 ) {\n                    nextSortIdx = 0; // can't remove sorting completely\n                }\n                if ( nextSortIdx === null ) {\n                    sorting.splice( sortIdx, 1 );\n                }\n                else {\n                    sorting[sortIdx][1] = asSorting[nextSortIdx];\n                    sorting[sortIdx]._idx = nextSortIdx;\n                }\n            }\n            else {\n                // No sort on this column yet\n                sorting.push( [ colIdx, asSorting[0], 0 ] );\n                sorting[sorting.length-1]._idx = 0;\n            }\n        }\n        else if ( sorting.length && sorting[0][0] == colIdx ) {\n            // Single column - already sorting on this column, modify the sort\n            nextSortIdx = next( sorting[0] );\n            sorting.length = 1;\n            sorting[0][1] = asSorting[nextSortIdx];\n            sorting[0]._idx = nextSortIdx;\n        }\n        else {\n            // Single column - sort only on this column\n            sorting.length = 0;\n            sorting.push( [ colIdx, asSorting[0] ] );\n            sorting[0]._idx = 0;\n        }\n        // Run the sort by calling a full redraw\n        _fnReDraw( settings );\n        // callback used for async user interaction\n        if ( typeof callback == 'function' ) {\n            callback( settings );\n        }\n    }\n    /**\n     * Attach a sort handler (click) to a node\n     *  @param {object} settings dataTables settings object\n     *  @param {node} attachTo node to attach the handler to\n     *  @param {int} colIdx column sorting index\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n    {\n        var col = settings.aoColumns[colIdx];\n        _fnBindAction( attachTo, {}, function (e) {\n            /* If the column is not sortable - don't to anything */\n            if ( col.bSortable === false ) {\n                return;\n            }\n            // If processing is enabled use a timeout to allow the processing\n            // display to be shown - otherwise to it synchronously\n            if ( settings.oFeatures.bProcessing ) {\n                _fnProcessingDisplay( settings, true );\n                setTimeout( function() {\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\n                    // In server-side processing, the draw callback will remove the\n                    // processing display\n                    if ( _fnDataSource( settings ) !== 'ssp' ) {\n                        _fnProcessingDisplay( settings, false );\n                    }\n                }, 0 );\n            }\n            else {\n                _fnSortListener( settings, colIdx, e.shiftKey, callback );\n            }\n        } );\n    }\n    /**\n     * Set the sorting classes on table's body, Note: it is safe to call this function\n     * when bSort and bSortClasses are false\n     *  @param {object} settings dataTables settings object\n     */\n    function _fnSortingClasses( settings )\n    {\n        var oldSort = settings.aLastSort;\n        var sortClass = settings.oClasses.sSortColumn;\n        var sort = _fnSortFlatten( settings );\n        var features = settings.oFeatures;\n        var i, ien, colIdx;\n        if ( features.bSort && features.bSortClasses ) {\n            // Remove old sorting classes\n            for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n                colIdx = oldSort[i].src;\n                // Remove column sorting\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\n                    .removeClass( sortClass + (i<2 ? i+1 : 3) );\n            }\n            // Add new column sorting\n            for ( i=0, ien=sort.length ; i<ien ; i++ ) {\n                colIdx = sort[i].src;\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\n                    .addClass( sortClass + (i<2 ? i+1 : 3) );\n            }\n        }\n        settings.aLastSort = sort;\n    }\n    // Get the data to sort a column, be it from cache, fresh (populating the\n    // cache), or from a sort formatter\n    /**\n     * Set the sorting classes on table's body, Note: it is safe to call this function\n     * when bSort and bSortClasses are false\n     *  @param {object} settings dataTables settings object\n     *  @param {idx} idx dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortData( settings, idx )\n    {\n        // Custom sorting function - provided by the sort data type\n        var column = settings.aoColumns[idx];\n        var customSort = DataTable.ext.order[column.sSortDataType];\n        var customData;\n        if ( customSort ) {\n            customData = customSort.call( settings.oInstance, settings, idx,\n                _fnColumnIndexToVisible( settings, idx )\n            );\n        }\n        // Use / populate cache\n        var row, cellData;\n        var formatter = DataTable.ext.type.order[column.sType+\"-pre\"];\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            row = settings.aoData[i];\n            if ( ! row._aSortData ) {\n                row._aSortData = [];\n            }\n            if ( ! row._aSortData[idx] || customSort ) {\n                cellData = customSort ?\n                    customData[i] : // If there was a custom sort function, use data from there\n                    _fnGetCellData( settings, i, idx, 'sort' );\n                row._aSortData[idx] = formatter ?\n                    formatter( cellData ) :\n                    cellData;\n            }\n        }\n    }\n    /**\n     * Save the state of a table\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSaveState ( settings )\n    {\n        if ( !settings.oFeatures.bStateSave || settings.bDestroying )\n        {\n            return;\n        }\n        /* Store the interesting variables */\n        var state = {\n            time:    +new Date(),\n            start:   settings._iDisplayStart,\n            length:  settings._iDisplayLength,\n            order:   $.extend( true, [], settings.aaSorting ),\n            search:  _fnSearchToCamel( settings.oPreviousSearch ),\n            columns: $.map( settings.aoColumns, function ( col, i ) {\n                return {\n                    visible: col.bVisible,\n                    search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n                };\n            } )\n        };\n        _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n        settings.oSavedState = state;\n        settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n    }\n    /**\n     * Attempt to load a saved table state\n     *  @param {object} settings dataTables settings object\n     *  @param {object} oInit DataTables init object so we can override settings\n     *  @param {function} callback Callback to execute when the state has been loaded\n     *  @memberof DataTable#oApi\n     */\n    function _fnLoadState ( settings, oInit, callback )\n    {\n        var i, ien;\n        var columns = settings.aoColumns;\n        var loaded = function ( s ) {\n            if ( ! s || ! s.time ) {\n                callback();\n                return;\n            }\n            // Allow custom and plug-in manipulation functions to alter the saved data set and\n            // cancelling of loading by returning false\n            var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\n            if ( $.inArray( false, abStateLoad ) !== -1 ) {\n                callback();\n                return;\n            }\n            // Reject old data\n            var duration = settings.iStateDuration;\n            if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\n                callback();\n                return;\n            }\n            // Number of columns have changed - all bets are off, no restore of settings\n            if ( s.columns && columns.length !== s.columns.length ) {\n                callback();\n                return;\n            }\n            // Store the saved state so it might be accessed at any time\n            settings.oLoadedState = $.extend( true, {}, s );\n            // Restore key features - todo - for 1.11 this needs to be done by\n            // subscribed events\n            if ( s.start !== undefined ) {\n                settings._iDisplayStart    = s.start;\n                settings.iInitDisplayStart = s.start;\n            }\n            if ( s.length !== undefined ) {\n                settings._iDisplayLength   = s.length;\n            }\n            // Order\n            if ( s.order !== undefined ) {\n                settings.aaSorting = [];\n                $.each( s.order, function ( i, col ) {\n                    settings.aaSorting.push( col[0] >= columns.length ?\n                        [ 0, col[1] ] :\n                        col\n                    );\n                } );\n            }\n            // Search\n            if ( s.search !== undefined ) {\n                $.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\n            }\n            // Columns\n            //\n            if ( s.columns ) {\n                for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\n                    var col = s.columns[i];\n                    // Visibility\n                    if ( col.visible !== undefined ) {\n                        columns[i].bVisible = col.visible;\n                    }\n                    // Search\n                    if ( col.search !== undefined ) {\n                        $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n                    }\n                }\n            }\n            _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\n            callback();\n        };\n        if ( ! settings.oFeatures.bStateSave ) {\n            callback();\n            return;\n        }\n        var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\n        if ( state !== undefined ) {\n            loaded( state );\n        }\n        // otherwise, wait for the loaded callback to be executed\n    }\n    /**\n     * Return the settings object for a particular table\n     *  @param {node} table table we are using as a dataTable\n     *  @returns {object} Settings object - or null if not found\n     *  @memberof DataTable#oApi\n     */\n    function _fnSettingsFromNode ( table )\n    {\n        var settings = DataTable.settings;\n        var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n        return idx !== -1 ?\n            settings[idx] :\n            null;\n    }\n    /**\n     * Log an error message\n     *  @param {object} settings dataTables settings object\n     *  @param {int} level log error messages, or display them to the user\n     *  @param {string} msg error message\n     *  @param {int} tn Technical note id to get more information about the error.\n     *  @memberof DataTable#oApi\n     */\n    function _fnLog( settings, level, msg, tn )\n    {\n        msg = 'DataTables warning: '+\n            (settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n        if ( tn ) {\n            msg += '. For more information about this error, please see '+\n            'http://datatables.net/tn/'+tn;\n        }\n        if ( ! level  ) {\n            // Backwards compatibility pre 1.10\n            var ext = DataTable.ext;\n            var type = ext.sErrMode || ext.errMode;\n            if ( settings ) {\n                _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n            }\n            if ( type == 'alert' ) {\n                alert( msg );\n            }\n            else if ( type == 'throw' ) {\n                throw new Error(msg);\n            }\n            else if ( typeof type == 'function' ) {\n                type( settings, tn, msg );\n            }\n        }\n    }\n    /**\n     * See if a property is defined on one object, if so assign it to the other object\n     *  @param {object} ret target object\n     *  @param {object} src source object\n     *  @param {string} name property\n     *  @param {string} [mappedName] name to map too - optional, name used if not given\n     *  @memberof DataTable#oApi\n     */\n    function _fnMap( ret, src, name, mappedName )\n    {\n        if ( $.isArray( name ) ) {\n            $.each( name, function (i, val) {\n                if ( $.isArray( val ) ) {\n                    _fnMap( ret, src, val[0], val[1] );\n                }\n                else {\n                    _fnMap( ret, src, val );\n                }\n            } );\n            return;\n        }\n        if ( mappedName === undefined ) {\n            mappedName = name;\n        }\n        if ( src[name] !== undefined ) {\n            ret[mappedName] = src[name];\n        }\n    }\n    /**\n     * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n     * shallow copy arrays. The reason we need to do this, is that we don't want to\n     * deep copy array init values (such as aaSorting) since the dev wouldn't be\n     * able to override them, but we do want to deep copy arrays.\n     *  @param {object} out Object to extend\n     *  @param {object} extender Object from which the properties will be applied to\n     *      out\n     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n     *      independent copy with the exception of the `data` or `aaData` parameters\n     *      if they are present. This is so you can pass in a collection to\n     *      DataTables and have that used as your data source without breaking the\n     *      references\n     *  @returns {object} out Reference, just for convenience - out === the return.\n     *  @memberof DataTable#oApi\n     *  @todo This doesn't take account of arrays inside the deep copied objects.\n     */\n    function _fnExtend( out, extender, breakRefs )\n    {\n        var val;\n        for ( var prop in extender ) {\n            if ( extender.hasOwnProperty(prop) ) {\n                val = extender[prop];\n                if ( $.isPlainObject( val ) ) {\n                    if ( ! $.isPlainObject( out[prop] ) ) {\n                        out[prop] = {};\n                    }\n                    $.extend( true, out[prop], val );\n                }\n                else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n                    out[prop] = val.slice();\n                }\n                else {\n                    out[prop] = val;\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Bind an event handers to allow a click or return key to activate the callback.\n     * This is good for accessibility since a return on the keyboard will have the\n     * same effect as a click, if the element has focus.\n     *  @param {element} n Element to bind the action to\n     *  @param {object} oData Data object to pass to the triggered function\n     *  @param {function} fn Callback function for when the event is triggered\n     *  @memberof DataTable#oApi\n     */\n    function _fnBindAction( n, oData, fn )\n    {\n        $(n)\n            .on( 'click.DT', oData, function (e) {\n                    n.blur(); // Remove focus outline for mouse users\n                    fn(e);\n                } )\n            .on( 'keypress.DT', oData, function (e){\n                    if ( e.which === 13 ) {\n                        e.preventDefault();\n                        fn(e);\n                    }\n                } )\n            .on( 'selectstart.DT', function () {\n                    /* Take the brutal approach to cancelling text selection */\n                    return false;\n                } );\n    }\n    /**\n     * Register a callback function. Easily allows a callback function to be added to\n     * an array store of callback functions that can then all be called together.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n     *  @param {function} fn Function to be called back\n     *  @param {string} sName Identifying name for the callback (i.e. a label)\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackReg( oSettings, sStore, fn, sName )\n    {\n        if ( fn )\n        {\n            oSettings[sStore].push( {\n                \"fn\": fn,\n                \"sName\": sName\n            } );\n        }\n    }\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {object} settings dataTables settings object\n     *  @param {string} callbackArr Name of the array storage for the callbacks in\n     *      oSettings\n     *  @param {string} eventName Name of the jQuery custom event to trigger. If\n     *      null no trigger is fired\n     *  @param {array} args Array of arguments to pass to the callback function /\n     *      trigger\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackFire( settings, callbackArr, eventName, args )\n    {\n        var ret = [];\n        if ( callbackArr ) {\n            ret = $.map( settings[callbackArr].slice().reverse(), function (val) {\n                return val.fn.apply( settings.oInstance, args );\n            } );\n        }\n        if ( eventName !== null ) {\n            var e = $.Event( eventName+'.dt' );\n            $(settings.nTable).trigger( e, args );\n            ret.push( e.result );\n        }\n        return ret;\n    }\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {object} settings dataTables settings object\n     */\n    function _fnLengthOverflow ( settings )\n    {\n        var\n            start = settings._iDisplayStart,\n            end = settings.fnDisplayEnd(),\n            len = settings._iDisplayLength;\n        /* If we have space to show extra rows (backing up from the end point - then do so */\n        if ( start >= end )\n        {\n            start = end - len;\n        }\n        // Keep the start record on the current page\n        start -= (start % len);\n        if ( len === -1 || start < 0 )\n        {\n            start = 0;\n        }\n        settings._iDisplayStart = start;\n    }\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {settings} settings dataTables settings object\n     *  @param {type} type Name of the array storage for the callbacks in\n     *      oSettings\n     */\n    function _fnRenderer( settings, type )\n    {\n        var renderer = settings.renderer;\n        var host = DataTable.ext.renderer[type];\n        if ( $.isPlainObject( renderer ) && renderer[type] ) {\n            // Specific renderer for this type. If available use it, otherwise use\n            // the default.\n            return host[renderer[type]] || host._;\n        }\n        else if ( typeof renderer === 'string' ) {\n            // Common renderer - if there is one available for this type use it,\n            // otherwise use the default\n            return host[renderer] || host._;\n        }\n        // Use the default\n        return host._;\n    }\n    /**\n     * Detect the data source being used for the table. Used to simplify the code\n     * a little (ajax) and to make it compress a little smaller.\n     *\n     *  @param {object} settings dataTables settings object\n     *  @returns {string} Data source\n     *  @memberof DataTable#oApi\n     */\n    function _fnDataSource ( settings )\n    {\n        if ( settings.oFeatures.bServerSide ) {\n            return 'ssp';\n        }\n        else if ( settings.ajax || settings.sAjaxSource ) {\n            return 'ajax';\n        }\n        return 'dom';\n    }\n    /**\n     * Computed structure of the DataTables API, defined by the options passed to\n     * `DataTable.Api.register()` when building the API.\n     *\n     * The structure is built in order to speed creation and extension of the Api\n     * objects since the extensions are effectively pre-parsed.\n     *\n     * The array is an array of objects with the following structure, where this\n     * base array represents the Api prototype base:\n     *\n     *     [\n     *       {\n     *         name:      'data'                -- string   - Property name\n     *         val:       function () {},       -- function - Api method (or undefined if just an object\n     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n     *       },\n     *       {\n     *         name:     'row'\n     *         val:       {},\n     *         methodExt: [ ... ],\n     *         propExt:   [\n     *           {\n     *             name:      'data'\n     *             val:       function () {},\n     *             methodExt: [ ... ],\n     *             propExt:   [ ... ]\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     ]\n     *\n     * @type {Array}\n     * @ignore\n     */\n    var __apiStruct = [];\n    /**\n     * `Array.prototype` reference.\n     *\n     * @type object\n     * @ignore\n     */\n    var __arrayProto = Array.prototype;\n    /**\n     * Abstraction for `context` parameter of the `Api` constructor to allow it to\n     * take several different forms for ease of use.\n     *\n     * Each of the input parameter types will be converted to a DataTables settings\n     * object where possible.\n     *\n     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n     *   of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     *   * `DataTables.Api` - API instance\n     * @return {array|null} Matching DataTables settings objects. `null` or\n     *   `undefined` is returned if no matching DataTable is found.\n     * @ignore\n     */\n    var _toSettings = function ( mixed )\n    {\n        var idx, jq;\n        var settings = DataTable.settings;\n        var tables = $.map( settings, function (el) {\n            return el.nTable;\n        } );\n        if ( ! mixed ) {\n            return [];\n        }\n        else if ( mixed.nTable && mixed.oApi ) {\n            // DataTables settings object\n            return [ mixed ];\n        }\n        else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n            // Table node\n            idx = $.inArray( mixed, tables );\n            return idx !== -1 ? [ settings[idx] ] : null;\n        }\n        else if ( mixed && typeof mixed.settings === 'function' ) {\n            return mixed.settings().toArray();\n        }\n        else if ( typeof mixed === 'string' ) {\n            // jQuery selector\n            jq = $(mixed);\n        }\n        else if ( mixed instanceof $ ) {\n            // jQuery object (also DataTables instance)\n            jq = mixed;\n        }\n        if ( jq ) {\n            return jq.map( function() {\n                idx = $.inArray( this, tables );\n                return idx !== -1 ? settings[idx] : null;\n            } ).toArray();\n        }\n    };\n    /**\n     * DataTables API class - used to control and interface with  one or more\n     * DataTables enhanced tables.\n     *\n     * The API class is heavily based on jQuery, presenting a chainable interface\n     * that you can use to interact with tables. Each instance of the API class has\n     * a \"context\" - i.e. the tables that it will operate on. This could be a single\n     * table, all tables on a page or a sub-set thereof.\n     *\n     * Additionally the API is designed to allow you to easily work with the data in\n     * the tables, retrieving and manipulating it as required. This is done by\n     * presenting the API class as an array like interface. The contents of the\n     * array depend upon the actions requested by each method (for example\n     * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n     * return an array of objects or arrays depending upon your table's\n     * configuration). The API object has a number of array like methods (`push`,\n     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n     * `unique` etc) to assist your working with the data held in a table.\n     *\n     * Most methods (those which return an Api instance) are chainable, which means\n     * the return from a method call also has all of the methods available that the\n     * top level object had. For example, these two calls are equivalent:\n     *\n     *     // Not chained\n     *     api.row.add( {...} );\n     *     api.draw();\n     *\n     *     // Chained\n     *     api.row.add( {...} ).draw();\n     *\n     * @class DataTable.Api\n     * @param {array|object|string|jQuery} context DataTable identifier. This is\n     *   used to define which DataTables enhanced tables this API will operate on.\n     *   Can be one of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     * @param {array} [data] Data to initialise the Api instance with.\n     *\n     * @example\n     *   // Direct initialisation during DataTables construction\n     *   var api = $('#example').DataTable();\n     *\n     * @example\n     *   // Initialisation using a DataTables jQuery object\n     *   var api = $('#example').dataTable().api();\n     *\n     * @example\n     *   // Initialisation as a constructor\n     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n     */\n    _Api = function ( context, data )\n    {\n        if ( ! (this instanceof _Api) ) {\n            return new _Api( context, data );\n        }\n        var settings = [];\n        var ctxSettings = function ( o ) {\n            var a = _toSettings( o );\n            if ( a ) {\n                settings = settings.concat( a );\n            }\n        };\n        if ( $.isArray( context ) ) {\n            for ( var i=0, ien=context.length ; i<ien ; i++ ) {\n                ctxSettings( context[i] );\n            }\n        }\n        else {\n            ctxSettings( context );\n        }\n        // Remove duplicates\n        this.context = _unique( settings );\n        // Initial data\n        if ( data ) {\n            $.merge( this, data );\n        }\n        // selector\n        this.selector = {\n            rows: null,\n            cols: null,\n            opts: null\n        };\n        _Api.extend( this, this, __apiStruct );\n    };\n    DataTable.Api = _Api;\n    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n    // isPlainObject.\n    $.extend( _Api.prototype, {\n        any: function ()\n        {\n            return this.count() !== 0;\n        },\n        concat:  __arrayProto.concat,\n        context: [], // array of table settings objects\n        count: function ()\n        {\n            return this.flatten().length;\n        },\n        each: function ( fn )\n        {\n            for ( var i=0, ien=this.length ; i<ien; i++ ) {\n                fn.call( this, this[i], i, this );\n            }\n            return this;\n        },\n        eq: function ( idx )\n        {\n            var ctx = this.context;\n            return ctx.length > idx ?\n                new _Api( ctx[idx], this[idx] ) :\n                null;\n        },\n        filter: function ( fn )\n        {\n            var a = [];\n            if ( __arrayProto.filter ) {\n                a = __arrayProto.filter.call( this, fn, this );\n            }\n            else {\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\n                    if ( fn.call( this, this[i], i, this ) ) {\n                        a.push( this[i] );\n                    }\n                }\n            }\n            return new _Api( this.context, a );\n        },\n        flatten: function ()\n        {\n            var a = [];\n            return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n        },\n        join:    __arrayProto.join,\n        indexOf: __arrayProto.indexOf || function (obj, start)\n        {\n            for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n                if ( this[i] === obj ) {\n                    return i;\n                }\n            }\n            return -1;\n        },\n        iterator: function ( flatten, type, fn, alwaysNew ) {\n            var\n                a = [], ret,\n                i, ien, j, jen,\n                context = this.context,\n                rows, items, item,\n                selector = this.selector;\n            // Argument shifting\n            if ( typeof flatten === 'string' ) {\n                alwaysNew = fn;\n                fn = type;\n                type = flatten;\n                flatten = false;\n            }\n            for ( i=0, ien=context.length ; i<ien ; i++ ) {\n                var apiInst = new _Api( context[i] );\n                if ( type === 'table' ) {\n                    ret = fn.call( apiInst, context[i], i );\n                    if ( ret !== undefined ) {\n                        a.push( ret );\n                    }\n                }\n                else if ( type === 'columns' || type === 'rows' ) {\n                    // this has same length as context - one entry for each table\n                    ret = fn.call( apiInst, context[i], this[i], i );\n                    if ( ret !== undefined ) {\n                        a.push( ret );\n                    }\n                }\n                else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n                    // columns and rows share the same structure.\n                    // 'this' is an array of column indexes for each context\n                    items = this[i];\n                    if ( type === 'column-rows' ) {\n                        rows = _selector_row_indexes( context[i], selector.opts );\n                    }\n                    for ( j=0, jen=items.length ; j<jen ; j++ ) {\n                        item = items[j];\n                        if ( type === 'cell' ) {\n                            ret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n                        }\n                        else {\n                            ret = fn.call( apiInst, context[i], item, i, j, rows );\n                        }\n                        if ( ret !== undefined ) {\n                            a.push( ret );\n                        }\n                    }\n                }\n            }\n            if ( a.length || alwaysNew ) {\n                var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n                var apiSelector = api.selector;\n                apiSelector.rows = selector.rows;\n                apiSelector.cols = selector.cols;\n                apiSelector.opts = selector.opts;\n                return api;\n            }\n            return this;\n        },\n        lastIndexOf: __arrayProto.lastIndexOf || function ()\n        {\n            // Bit cheeky...\n            return this.indexOf.apply( this.toArray.reverse(), arguments );\n        },\n        length:  0,\n        map: function ( fn )\n        {\n            var a = [];\n            if ( __arrayProto.map ) {\n                a = __arrayProto.map.call( this, fn, this );\n            }\n            else {\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\n                    a.push( fn.call( this, this[i], i ) );\n                }\n            }\n            return new _Api( this.context, a );\n        },\n        pluck: function ( prop )\n        {\n            return this.map( function ( el ) {\n                return el[prop];\n            } );\n        },\n        pop:     __arrayProto.pop,\n        push:    __arrayProto.push,\n        // Does not return an API instance\n        reduce: __arrayProto.reduce || function ( fn, init )\n        {\n            return _fnReduce( this, fn, init, 0, this.length, 1 );\n        },\n        reduceRight: __arrayProto.reduceRight || function ( fn, init )\n        {\n            return _fnReduce( this, fn, init, this.length-1, -1, -1 );\n        },\n        reverse: __arrayProto.reverse,\n        // Object with rows, columns and opts\n        selector: null,\n        shift:   __arrayProto.shift,\n        slice: function () {\n            return new _Api( this.context, this );\n        },\n        sort:    __arrayProto.sort, // ? name - order?\n        splice:  __arrayProto.splice,\n        toArray: function ()\n        {\n            return __arrayProto.slice.call( this );\n        },\n        to$: function ()\n        {\n            return $( this );\n        },\n        toJQuery: function ()\n        {\n            return $( this );\n        },\n        unique: function ()\n        {\n            return new _Api( this.context, _unique(this) );\n        },\n        unshift: __arrayProto.unshift\n    } );\n    _Api.extend = function ( scope, obj, ext )\n    {\n        // Only extend API instances and static properties of the API\n        if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n            return;\n        }\n        var\n            i, ien,\n            struct,\n            methodScoping = function ( scope, fn, struc ) {\n                return function () {\n                    var ret = fn.apply( scope, arguments );\n                    // Method extension\n                    _Api.extend( ret, ret, struc.methodExt );\n                    return ret;\n                };\n            };\n        for ( i=0, ien=ext.length ; i<ien ; i++ ) {\n            struct = ext[i];\n            // Value\n            obj[struct.name] = typeof struct.val === 'function' ?\n                methodScoping( scope, struct.val, struct ) :\n                $.isPlainObject( struct.val ) ?\n                    {} :\n                    struct.val;\n            obj[struct.name].__dt_wrapper = true;\n            // Property extension\n            _Api.extend( scope, obj[struct.name], struct.propExt );\n        }\n    };\n    _Api.register = _api_register = function ( name, val )\n    {\n        if ( $.isArray( name ) ) {\n            for ( var j=0, jen=name.length ; j<jen ; j++ ) {\n                _Api.register( name[j], val );\n            }\n            return;\n        }\n        var\n            i, ien,\n            heir = name.split('.'),\n            struct = __apiStruct,\n            key, method;\n        var find = function ( src, name ) {\n            for ( var i=0, ien=src.length ; i<ien ; i++ ) {\n                if ( src[i].name === name ) {\n                    return src[i];\n                }\n            }\n            return null;\n        };\n        for ( i=0, ien=heir.length ; i<ien ; i++ ) {\n            method = heir[i].indexOf('()') !== -1;\n            key = method ?\n                heir[i].replace('()', '') :\n                heir[i];\n            var src = find( struct, key );\n            if ( ! src ) {\n                src = {\n                    name:      key,\n                    val:       {},\n                    methodExt: [],\n                    propExt:   []\n                };\n                struct.push( src );\n            }\n            if ( i === ien-1 ) {\n                src.val = val;\n            }\n            else {\n                struct = method ?\n                    src.methodExt :\n                    src.propExt;\n            }\n        }\n    };\n    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n        _Api.register( pluralName, val );\n        _Api.register( singularName, function () {\n            var ret = val.apply( this, arguments );\n            if ( ret === this ) {\n                // Returned item is the API instance that was passed in, return it\n                return this;\n            }\n            else if ( ret instanceof _Api ) {\n                // New API instance returned, want the value from the first item\n                // in the returned array for the singular result.\n                return ret.length ?\n                    $.isArray( ret[0] ) ?\n                        new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n                        ret[0] :\n                    undefined;\n            }\n            // Non-API return - just fire it back\n            return ret;\n        } );\n    };\n    /**\n     * Selector for HTML tables. Apply the given selector to the give array of\n     * DataTables settings objects.\n     *\n     * @param {string|integer} [selector] jQuery selector string or integer\n     * @param  {array} a of DataTables settings objects to be filtered\n     * @return {array}\n     * @ignore\n     */\n    var __table_selector = function ( selector, a )\n    {\n        // Integer is used to pick out a table by index\n        if ( typeof selector === 'number' ) {\n            return [a[selector]];\n        }\n        // Perform a jQuery selector on the table nodes\n        var nodes = $.map( a, function (el) {\n            return el.nTable;\n        } );\n        return $(nodes)\n            .filter( selector )\n            .map( function () {\n                // Need to translate back from the table node to the settings\n                var idx = $.inArray( this, nodes );\n                return a[idx];\n            } )\n            .toArray();\n    };\n    /**\n     * Context selector for the API's context (i.e. the tables the API instance\n     * refers to.\n     *\n     * @name    DataTable.Api#tables\n     * @param {string|integer} [selector] Selector to pick which tables the iterator\n     *   should operate on. If not given, all tables in the current context are\n     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n     *   select multiple tables or as an integer to select a single table.\n     * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n     */\n    _api_register( 'tables()', function ( selector ) {\n        // A new instance is created if there was a selector specified\n        return selector ?\n            new _Api( __table_selector( selector, this.context ) ) :\n            this;\n    } );\n    _api_register( 'table()', function ( selector ) {\n        var tables = this.tables( selector );\n        var ctx = tables.context;\n        // Truncate to the first matched table\n        return ctx.length ?\n            new _Api( ctx[0] ) :\n            tables;\n    } );\n    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTable;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().body()', 'table().body()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTBody;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().header()', 'table().header()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTHead;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTFoot;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTableWrapper;\n        }, 1 );\n    } );\n    /**\n     * Redraw the tables in the current context.\n     */\n    _api_register( 'draw()', function ( paging ) {\n        return this.iterator( 'table', function ( settings ) {\n            if ( paging === 'page' ) {\n                _fnDraw( settings );\n            }\n            else {\n                if ( typeof paging === 'string' ) {\n                    paging = paging === 'full-hold' ?\n                        false :\n                        true;\n                }\n                _fnReDraw( settings, paging===false );\n            }\n        } );\n    } );\n    /**\n     * Get the current page index.\n     *\n     * @return {integer} Current page index (zero based)\n     *//**\n     * Set the current page.\n     *\n     * Note that if you attempt to show a page which does not exist, DataTables will\n     * not throw an error, but rather reset the paging.\n     *\n     * @param {integer|string} action The paging action to take. This can be one of:\n     *  * `integer` - The page index to jump to\n     *  * `string` - An action to take:\n     *    * `first` - Jump to first page.\n     *    * `next` - Jump to the next page\n     *    * `previous` - Jump to previous page\n     *    * `last` - Jump to the last page.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'page()', function ( action ) {\n        if ( action === undefined ) {\n            return this.page.info().page; // not an expensive call\n        }\n        // else, have an action to take on all tables\n        return this.iterator( 'table', function ( settings ) {\n            _fnPageChange( settings, action );\n        } );\n    } );\n    /**\n     * Paging information for the first table in the current context.\n     *\n     * If you require paging information for another table, use the `table()` method\n     * with a suitable selector.\n     *\n     * @return {object} Object with the following properties set:\n     *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n     *  * `pages` - Total number of pages\n     *  * `start` - Display index for the first record shown on the current page\n     *  * `end` - Display index for the last record shown on the current page\n     *  * `length` - Display length (number of records). Note that generally `start\n     *    + length = end`, but this is not always true, for example if there are\n     *    only 2 records to show on the final page, with a length of 10.\n     *  * `recordsTotal` - Full data set length\n     *  * `recordsDisplay` - Data set length once the current filtering criterion\n     *    are applied.\n     */\n    _api_register( 'page.info()', function () {\n        if ( this.context.length === 0 ) {\n            return undefined;\n        }\n        var\n            settings   = this.context[0],\n            start      = settings._iDisplayStart,\n            len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n            visRecords = settings.fnRecordsDisplay(),\n            all        = len === -1;\n        return {\n            \"page\":           all ? 0 : Math.floor( start / len ),\n            \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n            \"start\":          start,\n            \"end\":            settings.fnDisplayEnd(),\n            \"length\":         len,\n            \"recordsTotal\":   settings.fnRecordsTotal(),\n            \"recordsDisplay\": visRecords,\n            \"serverSide\":     _fnDataSource( settings ) === 'ssp'\n        };\n    } );\n    /**\n     * Get the current page length.\n     *\n     * @return {integer} Current page length. Note `-1` indicates that all records\n     *   are to be shown.\n     *//**\n     * Set the current page length.\n     *\n     * @param {integer} Page length to set. Use `-1` to show all records.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'page.len()', function ( len ) {\n        // Note that we can't call this function 'length()' because `length`\n        // is a Javascript property of functions which defines how many arguments\n        // the function expects.\n        if ( len === undefined ) {\n            return this.context.length !== 0 ?\n                this.context[0]._iDisplayLength :\n                undefined;\n        }\n        // else, set the page length\n        return this.iterator( 'table', function ( settings ) {\n            _fnLengthChange( settings, len );\n        } );\n    } );\n    var __reload = function ( settings, holdPosition, callback ) {\n        // Use the draw event to trigger a callback\n        if ( callback ) {\n            var api = new _Api( settings );\n            api.one( 'draw', function () {\n                callback( api.ajax.json() );\n            } );\n        }\n        if ( _fnDataSource( settings ) == 'ssp' ) {\n            _fnReDraw( settings, holdPosition );\n        }\n        else {\n            _fnProcessingDisplay( settings, true );\n            // Cancel an existing request\n            var xhr = settings.jqXHR;\n            if ( xhr && xhr.readyState !== 4 ) {\n                xhr.abort();\n            }\n            // Trigger xhr\n            _fnBuildAjax( settings, [], function( json ) {\n                _fnClearTable( settings );\n                var data = _fnAjaxDataSrc( settings, json );\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    _fnAddData( settings, data[i] );\n                }\n                _fnReDraw( settings, holdPosition );\n                _fnProcessingDisplay( settings, false );\n            } );\n        }\n    };\n    /**\n     * Get the JSON response from the last Ajax request that DataTables made to the\n     * server. Note that this returns the JSON from the first table in the current\n     * context.\n     *\n     * @return {object} JSON received from the server.\n     */\n    _api_register( 'ajax.json()', function () {\n        var ctx = this.context;\n        if ( ctx.length > 0 ) {\n            return ctx[0].json;\n        }\n        // else return undefined;\n    } );\n    /**\n     * Get the data submitted in the last Ajax request\n     */\n    _api_register( 'ajax.params()', function () {\n        var ctx = this.context;\n        if ( ctx.length > 0 ) {\n            return ctx[0].oAjaxData;\n        }\n        // else return undefined;\n    } );\n    /**\n     * Reload tables from the Ajax data source. Note that this function will\n     * automatically re-draw the table when the remote data has been loaded.\n     *\n     * @param {boolean} [reset=true] Reset (default) or hold the current paging\n     *   position. A full re-sort and re-filter is performed when this method is\n     *   called, which is why the pagination reset is the default action.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n        return this.iterator( 'table', function (settings) {\n            __reload( settings, resetPaging===false, callback );\n        } );\n    } );\n    /**\n     * Get the current Ajax URL. Note that this returns the URL from the first\n     * table in the current context.\n     *\n     * @return {string} Current Ajax source URL\n     *//**\n     * Set the Ajax URL. Note that this will set the URL for all tables in the\n     * current context.\n     *\n     * @param {string} url URL to set.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.url()', function ( url ) {\n        var ctx = this.context;\n        if ( url === undefined ) {\n            // get\n            if ( ctx.length === 0 ) {\n                return undefined;\n            }\n            ctx = ctx[0];\n            return ctx.ajax ?\n                $.isPlainObject( ctx.ajax ) ?\n                    ctx.ajax.url :\n                    ctx.ajax :\n                ctx.sAjaxSource;\n        }\n        // set\n        return this.iterator( 'table', function ( settings ) {\n            if ( $.isPlainObject( settings.ajax ) ) {\n                settings.ajax.url = url;\n            }\n            else {\n                settings.ajax = url;\n            }\n            // No need to consider sAjaxSource here since DataTables gives priority\n            // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n            // value of `sAjaxSource` redundant.\n        } );\n    } );\n    /**\n     * Load data from the newly set Ajax URL. Note that this method is only\n     * available when `ajax.url()` is used to set a URL. Additionally, this method\n     * has the same effect as calling `ajax.reload()` but is provided for\n     * convenience when setting a new URL. Like `ajax.reload()` it will\n     * automatically redraw the table once the remote data has been loaded.\n     *\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n        // Same as a reload, but makes sense to present it for easy access after a\n        // url change\n        return this.iterator( 'table', function ( ctx ) {\n            __reload( ctx, resetPaging===false, callback );\n        } );\n    } );\n    var _selector_run = function ( type, selector, selectFn, settings, opts )\n    {\n        var\n            out = [], res,\n            a, i, ien, j, jen,\n            selectorType = typeof selector;\n        // Can't just check for isArray here, as an API or jQuery instance might be\n        // given with their array like look\n        if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n            selector = [ selector ];\n        }\n        for ( i=0, ien=selector.length ; i<ien ; i++ ) {\n            // Only split on simple strings - complex expressions will be jQuery selectors\n            a = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\n                selector[i].split(',') :\n                [ selector[i] ];\n            for ( j=0, jen=a.length ; j<jen ; j++ ) {\n                res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n                if ( res && res.length ) {\n                    out = out.concat( res );\n                }\n            }\n        }\n        // selector extensions\n        var ext = _ext.selector[type];\n        if ( ext.length ) {\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\n                out = ext[i]( settings, opts, out );\n            }\n        }\n        return _unique( out );\n    };\n    var _selector_opts = function ( opts )\n    {\n        if ( ! opts ) {\n            opts = {};\n        }\n        // Backwards compatibility for 1.9- which used the terminology filter rather\n        // than search\n        if ( opts.filter && opts.search === undefined ) {\n            opts.search = opts.filter;\n        }\n        return $.extend( {\n            search: 'none',\n            order: 'current',\n            page: 'all'\n        }, opts );\n    };\n    var _selector_first = function ( inst )\n    {\n        // Reduce the API instance to the first item found\n        for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n            if ( inst[i].length > 0 ) {\n                // Assign the first element to the first item in the instance\n                // and truncate the instance and context\n                inst[0] = inst[i];\n                inst[0].length = 1;\n                inst.length = 1;\n                inst.context = [ inst.context[i] ];\n                return inst;\n            }\n        }\n        // Not found - return an empty instance\n        inst.length = 0;\n        return inst;\n    };\n    var _selector_row_indexes = function ( settings, opts )\n    {\n        var\n            i, ien, tmp, a=[],\n            displayFiltered = settings.aiDisplay,\n            displayMaster = settings.aiDisplayMaster;\n        var\n            search = opts.search,  // none, applied, removed\n            order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n            page   = opts.page;    // all, current\n        if ( _fnDataSource( settings ) == 'ssp' ) {\n            // In server-side processing mode, most options are irrelevant since\n            // rows not shown don't exist and the index order is the applied order\n            // Removed is a special case - for consistency just return an empty\n            // array\n            return search === 'removed' ?\n                [] :\n                _range( 0, displayMaster.length );\n        }\n        else if ( page == 'current' ) {\n            // Current page implies that order=current and fitler=applied, since it is\n            // fairly senseless otherwise, regardless of what order and search actually\n            // are\n            for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n                a.push( displayFiltered[i] );\n            }\n        }\n        else if ( order == 'current' || order == 'applied' ) {\n            a = search == 'none' ?\n                displayMaster.slice() :                      // no search\n                search == 'applied' ?\n                    displayFiltered.slice() :                // applied search\n                    $.map( displayMaster, function (el) { // removed search\n                        return $.inArray( el, displayFiltered ) === -1 ? el : null;\n                    } );\n        }\n        else if ( order == 'index' || order == 'original' ) {\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n                if ( search == 'none' ) {\n                    a.push( i );\n                }\n                else { // applied | removed\n                    tmp = $.inArray( i, displayFiltered );\n                    if ((tmp === -1 && search == 'removed') ||\n                        (tmp >= 0   && search == 'applied') )\n                    {\n                        a.push( i );\n                    }\n                }\n            }\n        }\n        return a;\n    };\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Rows\n     *\n     * {}          - no selector - use all available rows\n     * {integer}   - row aoData index\n     * {node}      - TR node\n     * {string}    - jQuery selector to apply to the TR elements\n     * {array}     - jQuery array of nodes, or simply an array of TR nodes\n     *\n     */\n    var __row_selector = function ( settings, selector, opts )\n    {\n        var rows;\n        var run = function ( sel ) {\n            var selInt = _intVal( sel );\n            // Short cut - selector is a number and no options provided (default is\n            // all records, so no need to check if the index is in there, since it\n            // must be - dev error if the index doesn't exist).\n            if ( selInt !== null && ! opts ) {\n                return [ selInt ];\n            }\n            if ( ! rows ) {\n                rows = _selector_row_indexes( settings, opts );\n            }\n            if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n                // Selector - integer\n                return [ selInt ];\n            }\n            else if ( sel === null || sel === undefined || sel === '' ) {\n                // Selector - none\n                return rows;\n            }\n            // Selector - function\n            if ( typeof sel === 'function' ) {\n                return $.map( rows, function (idx) {\n                    var row = settings.aoData[idx];\n                    return sel( idx, row._aData, row.nTr ) ? idx : null;\n                } );\n            }\n            // Get nodes in the order from the `rows` array with null values removed\n            var nodes = _removeEmpty(\n                _pluck_order( settings.aoData, rows, 'nTr' )\n            );\n            // Selector - node\n            if ( sel.nodeName ) {\n                if ( sel._DT_RowIndex !== undefined ) {\n                    return [ sel._DT_RowIndex ]; // Property added by DT for fast lookup\n                }\n                else if ( sel._DT_CellIndex ) {\n                    return [ sel._DT_CellIndex.row ];\n                }\n                else {\n                    var host = $(sel).closest('*[data-dt-row]');\n                    return host.length ?\n                        [ host.data('dt-row') ] :\n                        [];\n                }\n            }\n            // ID selector. Want to always be able to select rows by id, regardless\n            // of if the tr element has been created or not, so can't rely upon\n            // jQuery here - hence a custom implementation. This does not match\n            // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n            // but to select it using a CSS selector engine (like Sizzle or\n            // querySelect) it would need to need to be escaped for some characters.\n            // DataTables simplifies this for row selectors since you can select\n            // only a row. A # indicates an id any anything that follows is the id -\n            // unescaped.\n            if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n                // get row index from id\n                var rowObj = settings.aIds[sel.replace( /^#/, '' )];\n                if ( rowObj !== undefined ) {\n                    return [ rowObj.idx ];\n                }\n                // need to fall through to jQuery in case there is DOM id that\n                // matches\n            }\n            // Selector - jQuery selector string, array of nodes or jQuery object/\n            // As jQuery's .filter() allows jQuery objects to be passed in filter,\n            // it also allows arrays, so this will cope with all three options\n            return $(nodes)\n                .filter( sel )\n                .map( function () {\n                    return this._DT_RowIndex;\n                } )\n                .toArray();\n        };\n        return _selector_run( 'row', selector, run, settings, opts );\n    };\n    _api_register( 'rows()', function ( selector, opts ) {\n        // argument shifting\n        if ( selector === undefined ) {\n            selector = '';\n        }\n        else if ( $.isPlainObject( selector ) ) {\n            opts = selector;\n            selector = '';\n        }\n        opts = _selector_opts( opts );\n        var inst = this.iterator( 'table', function ( settings ) {\n            return __row_selector( settings, selector, opts );\n        }, 1 );\n        // Want argument shifting here and in __row_selector?\n        inst.selector.rows = selector;\n        inst.selector.opts = opts;\n        return inst;\n    } );\n    _api_register( 'rows().nodes()', function () {\n        return this.iterator( 'row', function ( settings, row ) {\n            return settings.aoData[row].nTr || undefined;\n        }, 1 );\n    } );\n    _api_register( 'rows().data()', function () {\n        return this.iterator( true, 'rows', function ( settings, rows ) {\n            return _pluck_order( settings.aoData, rows, '_aData' );\n        }, 1 );\n    } );\n    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n        return this.iterator( 'row', function ( settings, row ) {\n            var r = settings.aoData[row];\n            return type === 'search' ? r._aFilterData : r._aSortData;\n        }, 1 );\n    } );\n    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n        return this.iterator( 'row', function ( settings, row ) {\n            _fnInvalidate( settings, row, src );\n        } );\n    } );\n    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n        return this.iterator( 'row', function ( settings, row ) {\n            return row;\n        }, 1 );\n    } );\n    _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n        var a = [];\n        var context = this.context;\n        // `iterator` will drop undefined values, but in this case we want them\n        for ( var i=0, ien=context.length ; i<ien ; i++ ) {\n            for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n                var id = context[i].rowIdFn( context[i].aoData[this[i][j]]._aData );\n                a.push( (hash === true ? '#' : '' )+ id );\n            }\n        }\n        return new _Api( context, a );\n    } );\n    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n        var that = this;\n        this.iterator( 'row', function ( settings, row, thatIdx ) {\n            var data = settings.aoData;\n            var rowData = data[row];\n            var i, ien, j, jen;\n            var loopRow, loopCells;\n            data.splice( row, 1 );\n            // Update the cached indexes\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\n                loopRow = data[i];\n                loopCells = loopRow.anCells;\n                // Rows\n                if ( loopRow.nTr !== null ) {\n                    loopRow.nTr._DT_RowIndex = i;\n                }\n                // Cells\n                if ( loopCells !== null ) {\n                    for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n                        loopCells[j]._DT_CellIndex.row = i;\n                    }\n                }\n            }\n            // Delete from the display arrays\n            _fnDeleteIndex( settings.aiDisplayMaster, row );\n            _fnDeleteIndex( settings.aiDisplay, row );\n            _fnDeleteIndex( that[thatIdx], row, false ); // maintain local indexes\n            // Check for an 'overflow' they case for displaying the table\n            _fnLengthOverflow( settings );\n            // Remove the row's ID reference if there is one\n            var id = settings.rowIdFn( rowData._aData );\n            if ( id !== undefined ) {\n                delete settings.aIds[id];\n            }\n        } );\n        this.iterator( 'table', function ( settings ) {\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n                settings.aoData[i].idx = i;\n            }\n        } );\n        return this;\n    } );\n    _api_register( 'rows.add()', function ( rows ) {\n        var newRows = this.iterator( 'table', function ( settings ) {\n                var row, i, ien;\n                var out = [];\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\n                    row = rows[i];\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n                        out.push( _fnAddTr( settings, row )[0] );\n                    }\n                    else {\n                        out.push( _fnAddData( settings, row ) );\n                    }\n                }\n                return out;\n            }, 1 );\n        // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n        var modRows = this.rows( -1 );\n        modRows.pop();\n        $.merge( modRows, newRows );\n        return modRows;\n    } );\n    /**\n     *\n     */\n    _api_register( 'row()', function ( selector, opts ) {\n        return _selector_first( this.rows( selector, opts ) );\n    } );\n    _api_register( 'row().data()', function ( data ) {\n        var ctx = this.context;\n        if ( data === undefined ) {\n            // Get\n            return ctx.length && this.length ?\n                ctx[0].aoData[this[0]]._aData :\n                undefined;\n        }\n        // Set\n        ctx[0].aoData[this[0]]._aData = data;\n        // Automatically invalidate\n        _fnInvalidate( ctx[0], this[0], 'data' );\n        return this;\n    } );\n    _api_register( 'row().node()', function () {\n        var ctx = this.context;\n        return ctx.length && this.length ?\n            ctx[0].aoData[this[0]].nTr || null :\n            null;\n    } );\n    _api_register( 'row.add()', function ( row ) {\n        // Allow a jQuery object to be passed in - only a single row is added from\n        // it though - the first element in the set\n        if ( row instanceof $ && row.length ) {\n            row = row[0];\n        }\n        var rows = this.iterator( 'table', function ( settings ) {\n            if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n                return _fnAddTr( settings, row )[0];\n            }\n            return _fnAddData( settings, row );\n        } );\n        // Return an Api.rows() extended instance, with the newly added row selected\n        return this.row( rows[0] );\n    } );\n    var __details_add = function ( ctx, row, data, klass )\n    {\n        // Convert to array of TR elements\n        var rows = [];\n        var addRow = function ( r, k ) {\n            // Recursion to allow for arrays of jQuery objects\n            if ( $.isArray( r ) || r instanceof $ ) {\n                for ( var i=0, ien=r.length ; i<ien ; i++ ) {\n                    addRow( r[i], k );\n                }\n                return;\n            }\n            // If we get a TR element, then just add it directly - up to the dev\n            // to add the correct number of columns etc\n            if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n                rows.push( r );\n            }\n            else {\n                // Otherwise create a row with a wrapper\n                var created = $('<tr><td/></tr>').addClass( k );\n                $('td', created)\n                    .addClass( k )\n                    .html( r )[0].colSpan = _fnVisbleColumns( ctx );\n                rows.push( created[0] );\n            }\n        };\n        addRow( data, klass );\n        if ( row._details ) {\n            row._details.detach();\n        }\n        row._details = $(rows);\n        // If the children were already shown, that state should be retained\n        if ( row._detailsShow ) {\n            row._details.insertAfter( row.nTr );\n        }\n    };\n    var __details_remove = function ( api, idx )\n    {\n        var ctx = api.context;\n        if ( ctx.length ) {\n            var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n            if ( row && row._details ) {\n                row._details.remove();\n                row._detailsShow = undefined;\n                row._details = undefined;\n            }\n        }\n    };\n    var __details_display = function ( api, show ) {\n        var ctx = api.context;\n        if ( ctx.length && api.length ) {\n            var row = ctx[0].aoData[api[0]];\n            if ( row._details ) {\n                row._detailsShow = show;\n                if ( show ) {\n                    row._details.insertAfter( row.nTr );\n                }\n                else {\n                    row._details.detach();\n                }\n                __details_events( ctx[0] );\n            }\n        }\n    };\n    var __details_events = function ( settings )\n    {\n        var api = new _Api( settings );\n        var namespace = '.dt.DT_details';\n        var drawEvent = 'draw'+namespace;\n        var colvisEvent = 'column-visibility'+namespace;\n        var destroyEvent = 'destroy'+namespace;\n        var data = settings.aoData;\n        api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n        if ( _pluck( data, '_details' ).length > 0 ) {\n            // On each draw, insert the required elements into the document\n            api.on( drawEvent, function ( e, ctx ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n                api.rows( {page:'current'} ).eq(0).each( function (idx) {\n                    // Internal data grab\n                    var row = data[idx];\n                    if ( row._detailsShow ) {\n                        row._details.insertAfter( row.nTr );\n                    }\n                } );\n            } );\n            // Column visibility change - update the colspan\n            api.on( colvisEvent, function ( e, ctx) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n                // Update the colspan for the details rows (note, only if it already has\n                // a colspan)\n                var row, visible = _fnVisbleColumns( ctx );\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    row = data[i];\n                    if ( row._details ) {\n                        row._details.children('td[colspan]').attr('colspan', visible );\n                    }\n                }\n            } );\n            // Table destroyed - nuke any child rows\n            api.on( destroyEvent, function ( e, ctx ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    if ( data[i]._details ) {\n                        __details_remove( api, i );\n                    }\n                }\n            } );\n        }\n    };\n    // Strings for the method names to help minification\n    var _emp = '';\n    var _child_obj = _emp+'row().child';\n    var _child_mth = _child_obj+'()';\n    // data can be:\n    //  tr\n    //  string\n    //  jQuery or array of any of the above\n    _api_register( _child_mth, function ( data, klass ) {\n        var ctx = this.context;\n        if ( data === undefined ) {\n            // get\n            return ctx.length && this.length ?\n                ctx[0].aoData[this[0]]._details :\n                undefined;\n        }\n        else if ( data === true ) {\n            // show\n            this.child.show();\n        }\n        else if ( data === false ) {\n            // remove\n            __details_remove( this );\n        }\n        else if ( ctx.length && this.length ) {\n            // set\n            __details_add( ctx[0], ctx[0].aoData[this[0]], data, klass );\n        }\n        return this;\n    } );\n    _api_register( [\n        _child_obj+'.show()',\n        _child_mth+'.show()' // only when `child()` was called with parameters (without\n    ], function () {   // it returns an object and this method is not executed)\n        __details_display( this, true );\n        return this;\n    } );\n    _api_register( [\n        _child_obj+'.hide()',\n        _child_mth+'.hide()' // only when `child()` was called with parameters (without\n    ], function () {         // it returns an object and this method is not executed)\n        __details_display( this, false );\n        return this;\n    } );\n    _api_register( [\n        _child_obj+'.remove()',\n        _child_mth+'.remove()' // only when `child()` was called with parameters (without\n    ], function () {           // it returns an object and this method is not executed)\n        __details_remove( this );\n        return this;\n    } );\n    _api_register( _child_obj+'.isShown()', function () {\n        var ctx = this.context;\n        if ( ctx.length && this.length ) {\n            // _detailsShown as false or undefined will fall through to return false\n            return ctx[0].aoData[this[0]]._detailsShow || false;\n        }\n        return false;\n    } );\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Columns\n     *\n     * {integer}           - column index (>=0 count from left, <0 count from right)\n     * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n     * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n     * \"{string}:name\"     - column name\n     * \"{string}\"          - jQuery selector on column header nodes\n     *\n     */\n    // can be an array of these items, comma separated list, or an array of comma\n    // separated lists\n    var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\n    // r1 and r2 are redundant - but it means that the parameters match for the\n    // iterator callback in columns().data()\n    var __columnData = function ( settings, column, r1, r2, rows ) {\n        var a = [];\n        for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n            a.push( _fnGetCellData( settings, rows[row], column ) );\n        }\n        return a;\n    };\n    var __column_selector = function ( settings, selector, opts )\n    {\n        var\n            columns = settings.aoColumns,\n            names = _pluck( columns, 'sName' ),\n            nodes = _pluck( columns, 'nTh' );\n        var run = function ( s ) {\n            var selInt = _intVal( s );\n            // Selector - all\n            if ( s === '' ) {\n                return _range( columns.length );\n            }\n            // Selector - index\n            if ( selInt !== null ) {\n                return [ selInt >= 0 ?\n                    selInt : // Count from left\n                    columns.length + selInt // Count from right (+ because its a negative value)\n                ];\n            }\n            // Selector = function\n            if ( typeof s === 'function' ) {\n                var rows = _selector_row_indexes( settings, opts );\n                return $.map( columns, function (col, idx) {\n                    return s(\n                            idx,\n                            __columnData( settings, idx, 0, 0, rows ),\n                            nodes[idx]\n                        ) ? idx : null;\n                } );\n            }\n            // jQuery or string selector\n            var match = typeof s === 'string' ?\n                s.match( __re_column_selector ) :\n                '';\n            if ( match ) {\n                switch( match[2] ) {\n                    case 'visIdx':\n                    case 'visible':\n                        var idx = parseInt( match[1], 10 );\n                        // Visible index given, convert to column index\n                        if ( idx < 0 ) {\n                            // Counting from the right\n                            var visColumns = $.map( columns, function (col,i) {\n                                return col.bVisible ? i : null;\n                            } );\n                            return [visColumns[visColumns.length + idx]];\n                        }\n                        // Counting from the left\n                        return [ _fnVisibleToColumnIndex( settings, idx ) ];\n                    case 'name':\n                        // match by name. `names` is column index complete and in order\n                        return $.map( names, function (name, i) {\n                            return name === match[1] ? i : null;\n                        } );\n                    default:\n                        return [];\n                }\n            }\n            // Cell in the table body\n            if ( s.nodeName && s._DT_CellIndex ) {\n                return [ s._DT_CellIndex.column ];\n            }\n            // jQuery selector on the TH elements for the columns\n            var jqResult = $( nodes )\n                .filter( s )\n                .map( function () {\n                    return $.inArray( this, nodes ); // `nodes` is column index complete and in order\n                } )\n                .toArray();\n            if ( jqResult.length || ! s.nodeName ) {\n                return jqResult;\n            }\n            // Otherwise a node which might have a `dt-column` data attribute, or be\n            // a child or such an element\n            var host = $(s).closest('*[data-dt-column]');\n            return host.length ?\n                [ host.data('dt-column') ] :\n                [];\n        };\n        return _selector_run( 'column', selector, run, settings, opts );\n    };\n    var __setColumnVis = function ( settings, column, vis ) {\n        var\n            cols = settings.aoColumns,\n            col  = cols[column],\n            data = settings.aoData,\n            cells, i, ien, tr;\n        // Get\n        if ( vis === undefined ) {\n            return col.bVisible;\n        }\n        // Set\n        // No change\n        if ( col.bVisible === vis ) {\n            return;\n        }\n        if ( vis ) {\n            // Insert column\n            // Need to decide if we should use appendChild or insertBefore\n            var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\n                tr = data[i].nTr;\n                cells = data[i].anCells;\n                if ( tr ) {\n                    // insertBefore can act like appendChild if 2nd arg is null\n                    tr.insertBefore( cells[column], cells[insertBefore] || null );\n                }\n            }\n        }\n        else {\n            // Remove column\n            $( _pluck( settings.aoData, 'anCells', column ) ).detach();\n        }\n        // Common actions\n        col.bVisible = vis;\n        _fnDrawHead( settings, settings.aoHeader );\n        _fnDrawHead( settings, settings.aoFooter );\n        _fnSaveState( settings );\n    };\n    _api_register( 'columns()', function ( selector, opts ) {\n        // argument shifting\n        if ( selector === undefined ) {\n            selector = '';\n        }\n        else if ( $.isPlainObject( selector ) ) {\n            opts = selector;\n            selector = '';\n        }\n        opts = _selector_opts( opts );\n        var inst = this.iterator( 'table', function ( settings ) {\n            return __column_selector( settings, selector, opts );\n        }, 1 );\n        // Want argument shifting here and in _row_selector?\n        inst.selector.cols = selector;\n        inst.selector.opts = opts;\n        return inst;\n    } );\n    _api_registerPlural( 'columns().header()', 'column().header()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].nTh;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().footer()', 'column().footer()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].nTf;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().data()', 'column().data()', function () {\n        return this.iterator( 'column-rows', __columnData, 1 );\n    } );\n    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].mData;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n            return _pluck_order( settings.aoData, rows,\n                type === 'search' ? '_aFilterData' : '_aSortData', column\n            );\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n            return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n        var ret = this.iterator( 'column', function ( settings, column ) {\n            if ( vis === undefined ) {\n                return settings.aoColumns[column].bVisible;\n            } // else\n            __setColumnVis( settings, column, vis );\n        } );\n        // Group the column visibility changes\n        if ( vis !== undefined ) {\n            // Second loop once the first is done for events\n            this.iterator( 'column', function ( settings, column ) {\n                _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n            } );\n            if ( calc === undefined || calc ) {\n                this.columns.adjust();\n            }\n        }\n        return ret;\n    } );\n    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n        return this.iterator( 'column', function ( settings, column ) {\n            return type === 'visible' ?\n                _fnColumnIndexToVisible( settings, column ) :\n                column;\n        }, 1 );\n    } );\n    _api_register( 'columns.adjust()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnAdjustColumnSizing( settings );\n        }, 1 );\n    } );\n    _api_register( 'column.index()', function ( type, idx ) {\n        if ( this.context.length !== 0 ) {\n            var ctx = this.context[0];\n            if ( type === 'fromVisible' || type === 'toData' ) {\n                return _fnVisibleToColumnIndex( ctx, idx );\n            }\n            else if ( type === 'fromData' || type === 'toVisible' ) {\n                return _fnColumnIndexToVisible( ctx, idx );\n            }\n        }\n    } );\n    _api_register( 'column()', function ( selector, opts ) {\n        return _selector_first( this.columns( selector, opts ) );\n    } );\n    var __cell_selector = function ( settings, selector, opts )\n    {\n        var data = settings.aoData;\n        var rows = _selector_row_indexes( settings, opts );\n        var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n        var allCells = $( [].concat.apply([], cells) );\n        var row;\n        var columns = settings.aoColumns.length;\n        var a, i, ien, j, o, host;\n        var run = function ( s ) {\n            var fnSelector = typeof s === 'function';\n            if ( s === null || s === undefined || fnSelector ) {\n                // All cells and function selectors\n                a = [];\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\n                    row = rows[i];\n                    for ( j=0 ; j<columns ; j++ ) {\n                        o = {\n                            row: row,\n                            column: j\n                        };\n                        if ( fnSelector ) {\n                            // Selector - function\n                            host = data[row];\n                            if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n                                a.push( o );\n                            }\n                        }\n                        else {\n                            // Selector - all\n                            a.push( o );\n                        }\n                    }\n                }\n                return a;\n            }\n            // Selector - index\n            if ( $.isPlainObject( s ) ) {\n                return [s];\n            }\n            // Selector - jQuery filtered cells\n            var jqResult = allCells\n                .filter( s )\n                .map( function (i, el) {\n                    return { // use a new object, in case someone changes the values\n                        row:    el._DT_CellIndex.row,\n                        column: el._DT_CellIndex.column\n                    };\n                } )\n                .toArray();\n            if ( jqResult.length || ! s.nodeName ) {\n                return jqResult;\n            }\n            // Otherwise the selector is a node, and there is one last option - the\n            // element might be a child of an element which has dt-row and dt-column\n            // data attributes\n            host = $(s).closest('*[data-dt-row]');\n            return host.length ?\n                [ {\n                    row: host.data('dt-row'),\n                    column: host.data('dt-column')\n                } ] :\n                [];\n        };\n        return _selector_run( 'cell', selector, run, settings, opts );\n    };\n    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n        // Argument shifting\n        if ( $.isPlainObject( rowSelector ) ) {\n            // Indexes\n            if ( rowSelector.row === undefined ) {\n                // Selector options in first parameter\n                opts = rowSelector;\n                rowSelector = null;\n            }\n            else {\n                // Cell index objects in first parameter\n                opts = columnSelector;\n                columnSelector = null;\n            }\n        }\n        if ( $.isPlainObject( columnSelector ) ) {\n            opts = columnSelector;\n            columnSelector = null;\n        }\n        // Cell selector\n        if ( columnSelector === null || columnSelector === undefined ) {\n            return this.iterator( 'table', function ( settings ) {\n                return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n            } );\n        }\n        // Row + column selector\n        var columns = this.columns( columnSelector, opts );\n        var rows = this.rows( rowSelector, opts );\n        var a, i, ien, j, jen;\n        var cells = this.iterator( 'table', function ( settings, idx ) {\n            a = [];\n            for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n                for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n                    a.push( {\n                        row:    rows[idx][i],\n                        column: columns[idx][j]\n                    } );\n                }\n            }\n            return a;\n        }, 1 );\n        $.extend( cells.selector, {\n            cols: columnSelector,\n            rows: rowSelector,\n            opts: opts\n        } );\n        return cells;\n    } );\n    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            var data = settings.aoData[row];\n            return data && data.anCells ?\n                data.anCells[column] :\n                undefined;\n        }, 1 );\n    } );\n    _api_register( 'cells().data()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return _fnGetCellData( settings, row, column );\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n        type = type === 'search' ? '_aFilterData' : '_aSortData';\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return settings.aoData[row][type][column];\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return _fnGetCellData( settings, row, column, type );\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return {\n                row: row,\n                column: column,\n                columnVisible: _fnColumnIndexToVisible( settings, column )\n            };\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            _fnInvalidate( settings, row, src, column );\n        } );\n    } );\n    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n        return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n    } );\n    _api_register( 'cell().data()', function ( data ) {\n        var ctx = this.context;\n        var cell = this[0];\n        if ( data === undefined ) {\n            // Get\n            return ctx.length && cell.length ?\n                _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n                undefined;\n        }\n        // Set\n        _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n        _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n        return this;\n    } );\n    /**\n     * Get current ordering (sorting) that has been applied to the table.\n     * @returns {array} 2D array containing the sorting information for the first\n     *   table in the current context. Each element in the parent array represents\n     *   a column being sorted upon (i.e. multi-sorting with two columns would have\n     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n     *   the column index that the sorting condition applies to, the second is the\n     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n     *   index of the sorting order from the `column.sorting` initialisation array.\n     *//**\n     * Set the ordering for the table.\n     * @param {integer} order Column index to sort upon.\n     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n     * @returns {DataTables.Api} this\n     *//**\n     * Set the ordering for the table.\n     * @param {array} order 1D array of sorting information to be applied.\n     * @param {array} [...] Optional additional sorting conditions\n     * @returns {DataTables.Api} this\n     *//**\n     * Set the ordering for the table.\n     * @param {array} order 2D array of sorting information to be applied.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'order()', function ( order, dir ) {\n        var ctx = this.context;\n        if ( order === undefined ) {\n            // get\n            return ctx.length !== 0 ?\n                ctx[0].aaSorting :\n                undefined;\n        }\n        // set\n        if ( typeof order === 'number' ) {\n            // Simple column / direction passed in\n            order = [ [ order, dir ] ];\n        }\n        else if ( order.length && ! $.isArray( order[0] ) ) {\n            // Arguments passed in (list of 1D arrays)\n            order = Array.prototype.slice.call( arguments );\n        }\n        // otherwise a 2D array was passed in\n        return this.iterator( 'table', function ( settings ) {\n            settings.aaSorting = order.slice();\n        } );\n    } );\n    /**\n     * Attach a sort listener to an element for a given column\n     * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n     *   listener to. This can take the form of a single DOM node, a jQuery\n     *   collection of nodes or a jQuery selector which will identify the node(s).\n     * @param {integer} column the column that a click on this node will sort on\n     * @param {function} [callback] callback function when sort is run\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'order.listener()', function ( node, column, callback ) {\n        return this.iterator( 'table', function ( settings ) {\n            _fnSortAttachListener( settings, node, column, callback );\n        } );\n    } );\n    _api_register( 'order.fixed()', function ( set ) {\n        if ( ! set ) {\n            var ctx = this.context;\n            var fixed = ctx.length ?\n                ctx[0].aaSortingFixed :\n                undefined;\n            return $.isArray( fixed ) ?\n                { pre: fixed } :\n                fixed;\n        }\n        return this.iterator( 'table', function ( settings ) {\n            settings.aaSortingFixed = $.extend( true, {}, set );\n        } );\n    } );\n    // Order by the selected column(s)\n    _api_register( [\n        'columns().order()',\n        'column().order()'\n    ], function ( dir ) {\n        var that = this;\n        return this.iterator( 'table', function ( settings, i ) {\n            var sort = [];\n            $.each( that[i], function (j, col) {\n                sort.push( [ col, dir ] );\n            } );\n            settings.aaSorting = sort;\n        } );\n    } );\n    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n        var ctx = this.context;\n        if ( input === undefined ) {\n            // get\n            return ctx.length !== 0 ?\n                ctx[0].oPreviousSearch.sSearch :\n                undefined;\n        }\n        // set\n        return this.iterator( 'table', function ( settings ) {\n            if ( ! settings.oFeatures.bFilter ) {\n                return;\n            }\n            _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n                \"sSearch\": input+\"\",\n                \"bRegex\":  regex === null ? false : regex,\n                \"bSmart\":  smart === null ? true  : smart,\n                \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n            } ), 1 );\n        } );\n    } );\n    _api_registerPlural(\n        'columns().search()',\n        'column().search()',\n        function ( input, regex, smart, caseInsen ) {\n            return this.iterator( 'column', function ( settings, column ) {\n                var preSearch = settings.aoPreSearchCols;\n                if ( input === undefined ) {\n                    // get\n                    return preSearch[column].sSearch;\n                }\n                // set\n                if ( ! settings.oFeatures.bFilter ) {\n                    return;\n                }\n                $.extend( preSearch[column], {\n                    \"sSearch\": input+\"\",\n                    \"bRegex\":  regex === null ? false : regex,\n                    \"bSmart\":  smart === null ? true  : smart,\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n                } );\n                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n            } );\n        }\n    );\n    /*\n     * State API methods\n     */\n    _api_register( 'state()', function () {\n        return this.context.length ?\n            this.context[0].oSavedState :\n            null;\n    } );\n    _api_register( 'state.clear()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            // Save an empty object\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n        } );\n    } );\n    _api_register( 'state.loaded()', function () {\n        return this.context.length ?\n            this.context[0].oLoadedState :\n            null;\n    } );\n    _api_register( 'state.save()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnSaveState( settings );\n        } );\n    } );\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being\n     * used, in order to ensure compatibility.\n     *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n     *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to\n     *    the required version, or false if this version of DataTales is not\n     *    suitable\n     *  @static\n     *  @dtopt API-Static\n     *  @example\n     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n     */\n    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n    {\n        var aThis = DataTable.version.split('.');\n        var aThat = version.split('.');\n        var iThis, iThat;\n        for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n            iThis = parseInt( aThis[i], 10 ) || 0;\n            iThat = parseInt( aThat[i], 10 ) || 0;\n            // Parts are the same, keep comparing\n            if (iThis === iThat) {\n                continue;\n            }\n            // Parts are different, return immediately\n            return iThis > iThat;\n        }\n        return true;\n    };\n    /**\n     * Check if a `<table>` node is a DataTable table already or not.\n     *\n     *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n     *      selector for the table to test. Note that if more than more than one\n     *      table is passed on, only the first will be checked\n     *  @returns {boolean} true the table given is a DataTable, or false otherwise\n     *  @static\n     *  @dtopt API-Static\n     *  @example\n     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n     *      $('#example').dataTable();\n     *    }\n     */\n    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n    {\n        var t = $(table).get(0);\n        var is = false;\n        if ( table instanceof DataTable.Api ) {\n            return true;\n        }\n        $.each( DataTable.settings, function (i, o) {\n            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n            if ( o.nTable === t || head === t || foot === t ) {\n                is = true;\n            }\n        } );\n        return is;\n    };\n    /**\n     * Get all DataTable tables that have been initialised - optionally you can\n     * select to get only currently visible tables.\n     *\n     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n     *    or visible tables only.\n     *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n     *    DataTables\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    $.each( $.fn.dataTable.tables(true), function () {\n     *      $(table).DataTable().columns.adjust();\n     *    } );\n     */\n    DataTable.tables = DataTable.fnTables = function ( visible )\n    {\n        var api = false;\n        if ( $.isPlainObject( visible ) ) {\n            api = visible.api;\n            visible = visible.visible;\n        }\n        var a = $.map( DataTable.settings, function (o) {\n            if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n                return o.nTable;\n            }\n        } );\n        return api ?\n            new _Api( a ) :\n            a;\n    };\n    /**\n     * Convert from camel case parameters to Hungarian notation. This is made public\n     * for the extensions to provide the same ability as DataTables core to accept\n     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n     * parameters.\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     */\n    DataTable.camelToHungarian = _fnCamelToHungarian;\n    /**\n     *\n     */\n    _api_register( '$()', function ( selector, opts ) {\n        var\n            rows   = this.rows( opts ).nodes(), // Get all rows\n            jqRows = $(rows);\n        return $( [].concat(\n            jqRows.filter( selector ).toArray(),\n            jqRows.find( selector ).toArray()\n        ) );\n    } );\n    // jQuery functions to operate on the tables\n    $.each( [ 'on', 'one', 'off' ], function (i, key) {\n        _api_register( key+'()', function ( /* event, handler */ ) {\n            var args = Array.prototype.slice.call(arguments);\n            // Add the `dt` namespace automatically if it isn't already present\n            args[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\n                return ! e.match(/\\.dt\\b/) ?\n                    e+'.dt' :\n                    e;\n                } ).join( ' ' );\n            var inst = $( this.tables().nodes() );\n            inst[key].apply( inst, args );\n            return this;\n        } );\n    } );\n    _api_register( 'clear()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnClearTable( settings );\n        } );\n    } );\n    _api_register( 'settings()', function () {\n        return new _Api( this.context, this.context );\n    } );\n    _api_register( 'init()', function () {\n        var ctx = this.context;\n        return ctx.length ? ctx[0].oInit : null;\n    } );\n    _api_register( 'data()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            return _pluck( settings.aoData, '_aData' );\n        } ).flatten();\n    } );\n    _api_register( 'destroy()', function ( remove ) {\n        remove = remove || false;\n        return this.iterator( 'table', function ( settings ) {\n            var orig      = settings.nTableWrapper.parentNode;\n            var classes   = settings.oClasses;\n            var table     = settings.nTable;\n            var tbody     = settings.nTBody;\n            var thead     = settings.nTHead;\n            var tfoot     = settings.nTFoot;\n            var jqTable   = $(table);\n            var jqTbody   = $(tbody);\n            var jqWrapper = $(settings.nTableWrapper);\n            var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n            var ien;\n            // Flag to note that the table is currently being destroyed - no action\n            // should be taken\n            settings.bDestroying = true;\n            // Fire off the destroy callbacks for plug-ins etc\n            _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n            // If not being removed from the document, make all columns visible\n            if ( ! remove ) {\n                new _Api( settings ).columns().visible( true );\n            }\n            // Blitz all `DT` namespaced events (these are internal events, the\n            // lowercase, `dt` events are user subscribed and they are responsible\n            // for removing them\n            jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n            $(window).off('.DT-'+settings.sInstance);\n            // When scrolling we had to break the table up - restore it\n            if ( table != thead.parentNode ) {\n                jqTable.children('thead').detach();\n                jqTable.append( thead );\n            }\n            if ( tfoot && table != tfoot.parentNode ) {\n                jqTable.children('tfoot').detach();\n                jqTable.append( tfoot );\n            }\n            settings.aaSorting = [];\n            settings.aaSortingFixed = [];\n            _fnSortingClasses( settings );\n            $( rows ).removeClass( settings.asStripeClasses.join(' ') );\n            $('th, td', thead).removeClass( classes.sSortable+' '+\n                classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n            );\n            if ( settings.bJUI ) {\n                $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\n                $('th, td', thead).each( function () {\n                    var wrapper = $('div.'+classes.sSortJUIWrapper, this);\n                    $(this).append( wrapper.contents() );\n                    wrapper.detach();\n                } );\n            }\n            // Add the TR elements back into the table in their original order\n            jqTbody.children().detach();\n            jqTbody.append( rows );\n            // Remove the DataTables generated nodes, events and classes\n            var removedMethod = remove ? 'remove' : 'detach';\n            jqTable[removedMethod]();\n            jqWrapper[removedMethod]();\n            // If we need to reattach the table to the document\n            if ( ! remove && orig ) {\n                // insertBefore acts like appendChild if !arg[1]\n                orig.insertBefore( table, settings.nTableReinsertBefore );\n                // Restore the width of the original table - was read from the style property,\n                // so we can restore directly to that\n                jqTable\n                    .css( 'width', settings.sDestroyWidth )\n                    .removeClass( classes.sTable );\n                // If the were originally stripe classes - then we add them back here.\n                // Note this is not fool proof (for example if not all rows had stripe\n                // classes - but it's a good effort without getting carried away\n                ien = settings.asDestroyStripes.length;\n                if ( ien ) {\n                    jqTbody.children().each( function (i) {\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\n                    } );\n                }\n            }\n            /* Remove the settings object from the settings array */\n            var idx = $.inArray( settings, DataTable.settings );\n            if ( idx !== -1 ) {\n                DataTable.settings.splice( idx, 1 );\n            }\n        } );\n    } );\n    // Add the `every()` method for rows, columns and cells in a compact form\n    $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n        _api_register( type+'s().every()', function ( fn ) {\n            var opts = this.selector.opts;\n            var api = this;\n            return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n                // Rows and columns:\n                //  arg1 - index\n                //  arg2 - table counter\n                //  arg3 - loop counter\n                //  arg4 - undefined\n                // Cells:\n                //  arg1 - row index\n                //  arg2 - column index\n                //  arg3 - table counter\n                //  arg4 - loop counter\n                fn.call(\n                    api[type](\n                        arg1,\n                        type==='cell' ? arg2 : opts,\n                        type==='cell' ? opts : undefined\n                    ),\n                    arg1, arg2, arg3, arg4\n                );\n            } );\n        } );\n    } );\n    // i18n method for extensions to be able to use the language object from the\n    // DataTable\n    _api_register( 'i18n()', function ( token, def, plural ) {\n        var ctx = this.context[0];\n        var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n        if ( resolved === undefined ) {\n            resolved = def;\n        }\n        if ( plural !== undefined && $.isPlainObject( resolved ) ) {\n            resolved = resolved[plural] !== undefined ?\n                resolved[plural] :\n                resolved._;\n        }\n        return resolved.replace( '%d', plural ); // nb: plural might be undefined,\n    } );\n    /**\n     * Version string for plug-ins to check compatibility. Allowed format is\n     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n     * only for non-release builds. See http://semver.org/ for more information.\n     *  @member\n     *  @type string\n     *  @default Version number\n     */\n    DataTable.version = \"1.10.15\";\n    /**\n     * Private data store, containing all of the settings objects that are\n     * created for the tables on a given page.\n     *\n     * Note that the `DataTable.settings` object is aliased to\n     * `jQuery.fn.dataTableExt` through which it may be accessed and\n     * manipulated, or `jQuery.fn.dataTable.settings`.\n     *  @member\n     *  @type array\n     *  @default []\n     *  @private\n     */\n    DataTable.settings = [];\n    /**\n     * Object models container, for the various models that DataTables has\n     * available to it. These models define the objects that are used to hold\n     * the active state and configuration of the table.\n     *  @namespace\n     */\n    DataTable.models = {};\n    /**\n     * Template object for the way in which DataTables holds information about\n     * search information for the global filter and individual column filters.\n     *  @namespace\n     */\n    DataTable.models.oSearch = {\n        /**\n         * Flag to indicate if the filtering should be case insensitive or not\n         *  @type boolean\n         *  @default true\n         */\n        \"bCaseInsensitive\": true,\n        /**\n         * Applied search term\n         *  @type string\n         *  @default <i>Empty string</i>\n         */\n        \"sSearch\": \"\",\n        /**\n         * Flag to indicate if the search term should be interpreted as a\n         * regular expression (true) or not (false) and therefore and special\n         * regex characters escaped.\n         *  @type boolean\n         *  @default false\n         */\n        \"bRegex\": false,\n        /**\n         * Flag to indicate if DataTables is to use its smart filtering or not.\n         *  @type boolean\n         *  @default true\n         */\n        \"bSmart\": true\n    };\n    /**\n     * Template object for the way in which DataTables holds information about\n     * each individual row. This is the object format used for the settings\n     * aoData array.\n     *  @namespace\n     */\n    DataTable.models.oRow = {\n        /**\n         * TR element for the row\n         *  @type node\n         *  @default null\n         */\n        \"nTr\": null,\n        /**\n         * Array of TD elements for each row. This is null until the row has been\n         * created.\n         *  @type array nodes\n         *  @default []\n         */\n        \"anCells\": null,\n        /**\n         * Data object from the original data source for the row. This is either\n         * an array if using the traditional form of DataTables, or an object if\n         * using mData options. The exact type will depend on the passed in\n         * data from the data source, or will be an array if using DOM a data\n         * source.\n         *  @type array|object\n         *  @default []\n         */\n        \"_aData\": [],\n        /**\n         * Sorting data cache - this array is ostensibly the same length as the\n         * number of columns (although each index is generated only as it is\n         * needed), and holds the data that is used for sorting each column in the\n         * row. We do this cache generation at the start of the sort in order that\n         * the formatting of the sort data need be done only once for each cell\n         * per sort. This array should not be read from or written to by anything\n         * other than the master sorting methods.\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_aSortData\": null,\n        /**\n         * Per cell filtering data cache. As per the sort data cache, used to\n         * increase the performance of the filtering in DataTables\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_aFilterData\": null,\n        /**\n         * Filtering data cache. This is the same as the cell filtering cache, but\n         * in this case a string rather than an array. This is easily computed with\n         * a join on `_aFilterData`, but is provided as a cache so the join isn't\n         * needed on every search (memory traded for performance)\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_sFilterRow\": null,\n        /**\n         * Cache of the class name that DataTables has applied to the row, so we\n         * can quickly look at this variable rather than needing to do a DOM check\n         * on className for the nTr property.\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @private\n         */\n        \"_sRowStripe\": \"\",\n        /**\n         * Denote if the original data source was from the DOM, or the data source\n         * object. This is used for invalidating data, so DataTables can\n         * automatically read data from the original source, unless uninstructed\n         * otherwise.\n         *  @type string\n         *  @default null\n         *  @private\n         */\n        \"src\": null,\n        /**\n         * Index in the aoData array. This saves an indexOf lookup when we have the\n         * object, but want to know the index\n         *  @type integer\n         *  @default -1\n         *  @private\n         */\n        \"idx\": -1\n    };\n    /**\n     * Template object for the column information object in DataTables. This object\n     * is held in the settings aoColumns array and contains all the information that\n     * DataTables needs about each individual column.\n     * Note that this object is related to {@link DataTable.defaults.column}\n     * but this one is the internal data store for DataTables's cache of columns.\n     * It should NOT be manipulated outside of DataTables. Any configuration should\n     * be done through the initialisation options.\n     *  @namespace\n     */\n    DataTable.models.oColumn = {\n        /**\n         * Column index. This could be worked out on-the-fly with $.inArray, but it\n         * is faster to just hold it as a variable\n         *  @type integer\n         *  @default null\n         */\n        \"idx\": null,\n        /**\n         * A list of the columns that sorting should occur on when this column\n         * is sorted. That this property is an array allows multi-column sorting\n         * to be defined for a column (for example first name / last name columns\n         * would benefit from this). The values are integers pointing to the\n         * columns to be sorted on (typically it will be a single integer pointing\n         * at itself, but that doesn't need to be the case).\n         *  @type array\n         */\n        \"aDataSort\": null,\n        /**\n         * Define the sorting directions that are applied to the column, in sequence\n         * as the column is repeatedly sorted upon - i.e. the first value is used\n         * as the sorting direction when the column if first sorted (clicked on).\n         * Sort it again (click again) and it will move on to the next index.\n         * Repeat until loop.\n         *  @type array\n         */\n        \"asSorting\": null,\n        /**\n         * Flag to indicate if the column is searchable, and thus should be included\n         * in the filtering or not.\n         *  @type boolean\n         */\n        \"bSearchable\": null,\n        /**\n         * Flag to indicate if the column is sortable or not.\n         *  @type boolean\n         */\n        \"bSortable\": null,\n        /**\n         * Flag to indicate if the column is currently visible in the table or not\n         *  @type boolean\n         */\n        \"bVisible\": null,\n        /**\n         * Store for manual type assignment using the `column.type` option. This\n         * is held in store so we can manipulate the column's `sType` property.\n         *  @type string\n         *  @default null\n         *  @private\n         */\n        \"_sManualType\": null,\n        /**\n         * Flag to indicate if HTML5 data attributes should be used as the data\n         * source for filtering or sorting. True is either are.\n         *  @type boolean\n         *  @default false\n         *  @private\n         */\n        \"_bAttrSrc\": false,\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         *  @type function\n         *  @param {element} nTd The TD node that has been created\n         *  @param {*} sData The Data for the cell\n         *  @param {array|object} oData The data for the whole row\n         *  @param {int} iRow The row index for the aoData data store\n         *  @default null\n         */\n        \"fnCreatedCell\": null,\n        /**\n         * Function to get data from a cell in a column. You should <b>never</b>\n         * access data directly through _aData internally in DataTables - always use\n         * the method attached to this property. It allows mData to function as\n         * required. This function is automatically assigned by the column\n         * initialisation method\n         *  @type function\n         *  @param {array|object} oData The data array/object for the array\n         *    (i.e. aoData[]._aData)\n         *  @param {string} sSpecific The specific data type you want to get -\n         *    'display', 'type' 'filter' 'sort'\n         *  @returns {*} The data for the cell from the given row's data\n         *  @default null\n         */\n        \"fnGetData\": null,\n        /**\n         * Function to set data for a cell in the column. You should <b>never</b>\n         * set the data directly to _aData internally in DataTables - always use\n         * this method. It allows mData to function as required. This function\n         * is automatically assigned by the column initialisation method\n         *  @type function\n         *  @param {array|object} oData The data array/object for the array\n         *    (i.e. aoData[]._aData)\n         *  @param {*} sValue Value to set\n         *  @default null\n         */\n        \"fnSetData\": null,\n        /**\n         * Property to read the value for the cells in the column from the data\n         * source array / object. If null, then the default content is used, if a\n         * function is given then the return from the function is used.\n         *  @type function|int|string|null\n         *  @default null\n         */\n        \"mData\": null,\n        /**\n         * Partner property to mData which is used (only when defined) to get\n         * the data - i.e. it is basically the same as mData, but without the\n         * 'set' option, and also the data fed to it is the result from mData.\n         * This is the rendering method to match the data method of mData.\n         *  @type function|int|string|null\n         *  @default null\n         */\n        \"mRender\": null,\n        /**\n         * Unique header TH/TD element for this column - this is what the sorting\n         * listener is attached to (if sorting is enabled.)\n         *  @type node\n         *  @default null\n         */\n        \"nTh\": null,\n        /**\n         * Unique footer TH/TD element for this column (if there is one). Not used\n         * in DataTables as such, but can be used for plug-ins to reference the\n         * footer for each column.\n         *  @type node\n         *  @default null\n         */\n        \"nTf\": null,\n        /**\n         * The class to apply to all TD elements in the table's TBODY for the column\n         *  @type string\n         *  @default null\n         */\n        \"sClass\": null,\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         *  @type string\n         */\n        \"sContentPadding\": null,\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because mData\n         * is set to null, or because the data source itself is null).\n         *  @type string\n         *  @default null\n         */\n        \"sDefaultContent\": null,\n        /**\n         * Name for the column, allowing reference to the column by name as well as\n         * by index (needs a lookup to work by name).\n         *  @type string\n         */\n        \"sName\": null,\n        /**\n         * Custom sorting data type - defines which of the available plug-ins in\n         * afnSortData the custom sorting will use - if any is defined.\n         *  @type string\n         *  @default std\n         */\n        \"sSortDataType\": 'std',\n        /**\n         * Class to be applied to the header element when sorting on this column\n         *  @type string\n         *  @default null\n         */\n        \"sSortingClass\": null,\n        /**\n         * Class to be applied to the header element when sorting on this column -\n         * when jQuery UI theming is used.\n         *  @type string\n         *  @default null\n         */\n        \"sSortingClassJUI\": null,\n        /**\n         * Title of the column - what is seen in the TH element (nTh).\n         *  @type string\n         */\n        \"sTitle\": null,\n        /**\n         * Column sorting and filtering type\n         *  @type string\n         *  @default null\n         */\n        \"sType\": null,\n        /**\n         * Width of the column\n         *  @type string\n         *  @default null\n         */\n        \"sWidth\": null,\n        /**\n         * Width of the column when it was first \"encountered\"\n         *  @type string\n         *  @default null\n         */\n        \"sWidthOrig\": null\n    };\n    /*\n     * Developer note: The properties of the object below are given in Hungarian\n     * notation, that was used as the interface for DataTables prior to v1.10, however\n     * from v1.10 onwards the primary interface is camel case. In order to avoid\n     * breaking backwards compatibility utterly with this change, the Hungarian\n     * version is still, internally the primary interface, but is is not documented\n     * - hence the @name tags in each doc comment. This allows a Javascript function\n     * to create a map from Hungarian notation to camel case (going the other direction\n     * would require each property to be listed, which would at around 3K to the size\n     * of DataTables, while this method is about a 0.5K hit.\n     *\n     * Ultimately this does pave the way for Hungarian notation to be dropped\n     * completely, but that is a massive amount of work and will break current\n     * installs (therefore is on-hold until v2).\n     */\n    /**\n     * Initialisation options that can be given to DataTables at initialisation\n     * time.\n     *  @namespace\n     */\n    DataTable.defaults = {\n        /**\n         * An array of data to use for the table, passed in at initialisation which\n         * will be used in preference to any data which is already in the DOM. This is\n         * particularly useful for constructing tables purely in Javascript, for\n         * example with a custom Ajax call.\n         *  @type array\n         *  @default null\n         *  @dtopt Option\n         *  @name DataTable.defaults.data\n         *  @example\n         *    // Using a 2D array data source\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"data\": [\n         *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n         *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n         *        ],\n         *        \"columns\": [\n         *          { \"title\": \"Engine\" },\n         *          { \"title\": \"Browser\" },\n         *          { \"title\": \"Platform\" },\n         *          { \"title\": \"Version\" },\n         *          { \"title\": \"Grade\" }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using an array of objects as a data source (`data`)\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"data\": [\n         *          {\n         *            \"engine\":   \"Trident\",\n         *            \"browser\":  \"Internet Explorer 4.0\",\n         *            \"platform\": \"Win 95+\",\n         *            \"version\":  4,\n         *            \"grade\":    \"X\"\n         *          },\n         *          {\n         *            \"engine\":   \"Trident\",\n         *            \"browser\":  \"Internet Explorer 5.0\",\n         *            \"platform\": \"Win 95+\",\n         *            \"version\":  5,\n         *            \"grade\":    \"C\"\n         *          }\n         *        ],\n         *        \"columns\": [\n         *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n         *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n         *          { \"title\": \"Platform\", \"data\": \"platform\" },\n         *          { \"title\": \"Version\",  \"data\": \"version\" },\n         *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"aaData\": null,\n        /**\n         * If ordering is enabled, then DataTables will perform a first pass sort on\n         * initialisation. You can define which column(s) the sort is performed\n         * upon, and the sorting direction, with this variable. The `sorting` array\n         * should contain an array for each column to be sorted initially containing\n         * the column's index and a direction string ('asc' or 'desc').\n         *  @type array\n         *  @default [[0,'asc']]\n         *  @dtopt Option\n         *  @name DataTable.defaults.order\n         *  @example\n         *    // Sort by 3rd column first, and then 4th column\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"order\": [[2,'asc'], [3,'desc']]\n         *      } );\n         *    } );\n         *    // No initial sorting\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"order\": []\n         *      } );\n         *    } );\n         */\n        \"aaSorting\": [[0,'asc']],\n        /**\n         * This parameter is basically identical to the `sorting` parameter, but\n         * cannot be overridden by user interaction with the table. What this means\n         * is that you could have a column (visible or hidden) which the sorting\n         * will always be forced on first - any sorting after that (from the user)\n         * will then be performed as required. This can be useful for grouping rows\n         * together.\n         *  @type array\n         *  @default null\n         *  @dtopt Option\n         *  @name DataTable.defaults.orderFixed\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"orderFixed\": [[0,'asc']]\n         *      } );\n         *    } )\n         */\n        \"aaSortingFixed\": [],\n        /**\n         * DataTables can be instructed to load data to display in the table from a\n         * Ajax source. This option defines how that Ajax call is made and where to.\n         * The `ajax` property has three different modes of operation, depending on\n         * how it is defined. These are:\n         * * `string` - Set the URL from where the data should be loaded from.\n         * * `object` - Define properties for `jQuery.ajax`.\n         * * `function` - Custom data get function\n         * `string`\n         * --------\n         * As a string, the `ajax` property simply defines the URL from which\n         * DataTables will load data.\n         * `object`\n         * --------\n         * As an object, the parameters in the object are passed to\n         * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n         * of the Ajax request. DataTables has a number of default parameters which\n         * you can override using this option. Please refer to the jQuery\n         * documentation for a full description of the options available, although\n         * the following parameters provide additional options in DataTables or\n         * require special consideration:\n         * * `data` - As with jQuery, `data` can be provided as an object, but it\n         *   can also be used as a function to manipulate the data DataTables sends\n         *   to the server. The function takes a single parameter, an object of\n         *   parameters with the values that DataTables has readied for sending. An\n         *   object may be returned which will be merged into the DataTables\n         *   defaults, or you can add the items to the object that was passed in and\n         *   not return anything from the function. This supersedes `fnServerParams`\n         *   from DataTables 1.9-.\n         * * `dataSrc` - By default DataTables will look for the property `data` (or\n         *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n         *   from an Ajax source or for server-side processing - this parameter\n         *   allows that property to be changed. You can use Javascript dotted\n         *   object notation to get a data source for multiple levels of nesting, or\n         *   it my be used as a function. As a function it takes a single parameter,\n         *   the JSON returned from the server, which can be manipulated as\n         *   required, with the returned value being that used by DataTables as the\n         *   data source for the table. This supersedes `sAjaxDataProp` from\n         *   DataTables 1.9-.\n         *\n         * * `success` - Should not be overridden it is used internally in\n         *   DataTables. To manipulate / transform the data returned by the server\n         *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n         * `function`\n         * ----------\n         * As a function, making the Ajax call is left up to yourself allowing\n         * complete control of the Ajax request. Indeed, if desired, a method other\n         * than Ajax could be used to obtain the required data, such as Web storage\n         * or an AIR database.\n         *\n         * The function is given four parameters and no return is required. The\n         * parameters are:\n         *\n         * 1. _object_ - Data to send to the server\n         * 2. _function_ - Callback function that must be executed when the required\n         *    data has been obtained. That data should be passed into the callback\n         *    as the only parameter\n         * 3. _object_ - DataTables settings object for the table\n         *\n         * Note that this supersedes `fnServerData` from DataTables 1.9-.\n         *  @type string|object|function\n         *  @default null\n         *  @dtopt Option\n         *  @name DataTable.defaults.ajax\n         *  @since 1.10.0\n         * @example\n         *   // Get JSON data from a file via Ajax.\n         *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n         *   $('#example').dataTable( {\n         *     \"ajax\": \"data.json\"\n         *   } );\n         * @example\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n         *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"dataSrc\": \"tableData\"\n         *     }\n         *   } );\n         * @example\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n         *   // from a plain array rather than an array in an object\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"dataSrc\": \"\"\n         *     }\n         *   } );\n         * @example\n         *   // Manipulate the data returned from the server - add a link to data\n         *   // (note this can, should, be done using `render` for the column - this\n         *   // is just a simple example of how the data can be manipulated).\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"dataSrc\": function ( json ) {\n         *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n         *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n         *         }\n         *         return json;\n         *       }\n         *     }\n         *   } );\n         * @example\n         *   // Add data to the request\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"data\": function ( d ) {\n         *         return {\n         *           \"extra_search\": $('#extra').val()\n         *         };\n         *       }\n         *     }\n         *   } );\n         * @example\n         *   // Send request as POST\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"type\": \"POST\"\n         *     }\n         *   } );\n         * @example\n         *   // Get the data from localStorage (could interface with a form for\n         *   // adding, editing and removing rows).\n         *   $('#example').dataTable( {\n         *     \"ajax\": function (data, callback, settings) {\n         *       callback(\n         *         JSON.parse( localStorage.getItem('dataTablesData') )\n         *       );\n         *     }\n         *   } );\n         */\n        \"ajax\": null,\n        /**\n         * This parameter allows you to readily specify the entries in the length drop\n         * down menu that DataTables shows when pagination is enabled. It can be\n         * either a 1D array of options which will be used for both the displayed\n         * option and the value, or a 2D array which will use the array in the first\n         * position as the value, and the array in the second position as the\n         * displayed options (useful for language strings such as 'All').\n         *\n         * Note that the `pageLength` property will be automatically set to the\n         * first value given in this array, unless `pageLength` is also provided.\n         *  @type array\n         *  @default [ 10, 25, 50, 100 ]\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.lengthMenu\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n         *      } );\n         *    } );\n         */\n        \"aLengthMenu\": [ 10, 25, 50, 100 ],\n        /**\n         * The `columns` option in the initialisation parameter allows you to define\n         * details about the way individual columns behave. For a full list of\n         * column options that can be set, please see\n         * {@link DataTable.defaults.column}. Note that if you use `columns` to\n         * define your columns, you must have an entry in the array for every single\n         * column that you have in your table (these can be null if you don't which\n         * to specify any options).\n         *  @member\n         *\n         *  @name DataTable.defaults.column\n         */\n        \"aoColumns\": null,\n        /**\n         * Very similar to `columns`, `columnDefs` allows you to target a specific\n         * column, multiple columns, or all columns, using the `targets` property of\n         * each object in the array. This allows great flexibility when creating\n         * tables, as the `columnDefs` arrays can be of any length, targeting the\n         * columns you specifically want. `columnDefs` may use any of the column\n         * options available: {@link DataTable.defaults.column}, but it _must_\n         * have `targets` defined in each object in the array. Values in the `targets`\n         * array may be:\n         *   <ul>\n         *     <li>a string - class name will be matched on the TH for the column</li>\n         *     <li>0 or a positive integer - column index counting from the left</li>\n         *     <li>a negative integer - column index counting from the right</li>\n         *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n         *   </ul>\n         *  @member\n         *\n         *  @name DataTable.defaults.columnDefs\n         */\n        \"aoColumnDefs\": null,\n        /**\n         * Basically the same as `search`, this parameter defines the individual column\n         * filtering state at initialisation time. The array must be of the same size\n         * as the number of columns, and each element be an object with the parameters\n         * `search` and `escapeRegex` (the latter is optional). 'null' is also\n         * accepted and the default will be used.\n         *  @type array\n         *  @default []\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.searchCols\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"searchCols\": [\n         *          null,\n         *          { \"search\": \"My filter\" },\n         *          null,\n         *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n         *        ]\n         *      } );\n         *    } )\n         */\n        \"aoSearchCols\": [],\n        /**\n         * An array of CSS classes that should be applied to displayed rows. This\n         * array may be of any length, and DataTables will apply each class\n         * sequentially, looping when required.\n         *  @type array\n         *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n         *    options</i>\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.stripeClasses\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n         *      } );\n         *    } )\n         */\n        \"asStripeClasses\": null,\n        /**\n         * Enable or disable automatic column width calculation. This can be disabled\n         * as an optimisation (it takes some time to calculate the widths) if the\n         * tables widths are passed in using `columns`.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.autoWidth\n         *\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"autoWidth\": false\n         *      } );\n         *    } );\n         */\n        \"bAutoWidth\": true,\n        /**\n         * Deferred rendering can provide DataTables with a huge speed boost when you\n         * are using an Ajax or JS data source for the table. This option, when set to\n         * true, will cause DataTables to defer the creation of the table elements for\n         * each row until they are needed for a draw - saving a significant amount of\n         * time.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.deferRender\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajax\": \"sources/arrays.txt\",\n         *        \"deferRender\": true\n         *      } );\n         *    } );\n         */\n        \"bDeferRender\": false,\n        /**\n         * Replace a DataTable which matches the given selector and replace it with\n         * one which has the properties of the new initialisation object passed. If no\n         * table matches the selector, then the new DataTable will be constructed as\n         * per normal.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.destroy\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"srollY\": \"200px\",\n         *        \"paginate\": false\n         *      } );\n         *      // Some time later....\n         *      $('#example').dataTable( {\n         *        \"filter\": false,\n         *        \"destroy\": true\n         *      } );\n         *    } );\n         */\n        \"bDestroy\": false,\n        /**\n         * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n         * that it allows the end user to input multiple words (space separated) and\n         * will match a row containing those words, even if not in the order that was\n         * specified (this allow matching across multiple columns). Note that if you\n         * wish to use filtering in DataTables this must remain 'true' - to remove the\n         * default filtering input box and retain filtering abilities, please use\n         * {@link DataTable.defaults.dom}.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.searching\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"searching\": false\n         *      } );\n         *    } );\n         */\n        \"bFilter\": true,\n        /**\n         * Enable or disable the table information display. This shows information\n         * about the data that is currently visible on the page, including information\n         * about filtered data if that action is being performed.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.info\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"info\": false\n         *      } );\n         *    } );\n         */\n        \"bInfo\": true,\n        /**\n         * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\n         * slightly different and additional mark-up from what DataTables has\n         * traditionally used).\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @name DataTable.defaults.jQueryUI\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"jQueryUI\": true\n         *      } );\n         *    } );\n         */\n        \"bJQueryUI\": false,\n        /**\n         * Allows the end user to select the size of a formatted page from a select\n         * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.lengthChange\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"lengthChange\": false\n         *      } );\n         *    } );\n         */\n        \"bLengthChange\": true,\n        /**\n         * Enable or disable pagination.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.paging\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"paging\": false\n         *      } );\n         *    } );\n         */\n        \"bPaginate\": true,\n        /**\n         * Enable or disable the display of a 'processing' indicator when the table is\n         * being processed (e.g. a sort). This is particularly useful for tables with\n         * large amounts of data where it can take a noticeable amount of time to sort\n         * the entries.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @name DataTable.defaults.processing\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"processing\": true\n         *      } );\n         *    } );\n         */\n        \"bProcessing\": false,\n        /**\n         * Retrieve the DataTables object for the given selector. Note that if the\n         * table has already been initialised, this parameter will cause DataTables\n         * to simply return the object that has already been set up - it will not take\n         * account of any changes you might have made to the initialisation object\n         * passed to DataTables (setting this parameter to true is an acknowledgement\n         * that you understand this). `destroy` can be used to reinitialise a table if\n         * you need.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.retrieve\n         *  @example\n         *    $(document).ready( function() {\n         *      initTable();\n         *      tableActions();\n         *    } );\n         *    function initTable ()\n         *    {\n         *      return $('#example').dataTable( {\n         *        \"scrollY\": \"200px\",\n         *        \"paginate\": false,\n         *        \"retrieve\": true\n         *      } );\n         *    }\n         *    function tableActions ()\n         *    {\n         *      var table = initTable();\n         *      // perform API operations with oTable\n         *    }\n         */\n        \"bRetrieve\": false,\n        /**\n         * When vertical (y) scrolling is enabled, DataTables will force the height of\n         * the table's viewport to the given height at all times (useful for layout).\n         * However, this can look odd when filtering data down to a small data set,\n         * and the footer is left \"floating\" further down. This parameter (when\n         * enabled) will cause DataTables to collapse the table's viewport down when\n         * the result set will fit within the given Y height.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.scrollCollapse\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollY\": \"200\",\n         *        \"scrollCollapse\": true\n         *      } );\n         *    } );\n         */\n        \"bScrollCollapse\": false,\n        /**\n         * Configure DataTables to use server-side processing. Note that the\n         * `ajax` parameter must also be given in order to give DataTables a\n         * source to obtain the required data for each draw.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverSide\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"serverSide\": true,\n         *        \"ajax\": \"xhr.php\"\n         *      } );\n         *    } );\n         */\n        \"bServerSide\": false,\n        /**\n         * Enable or disable sorting of columns. Sorting of individual columns can be\n         * disabled by the `sortable` option for each column.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.ordering\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"ordering\": false\n         *      } );\n         *    } );\n         */\n        \"bSort\": true,\n        /**\n         * Enable or display DataTables' ability to sort multiple columns at the\n         * same time (activated by shift-click by the user).\n         *  @type boolean\n         *  @default true\n         *  @dtopt Options\n         *  @name DataTable.defaults.orderMulti\n         *  @example\n         *    // Disable multiple column sorting ability\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"orderMulti\": false\n         *      } );\n         *    } );\n         */\n        \"bSortMulti\": true,\n        /**\n         * Allows control over whether DataTables should use the top (true) unique\n         * cell that is found for a single column, or the bottom (false - default).\n         * This is useful when using complex headers.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.orderCellsTop\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"orderCellsTop\": true\n         *      } );\n         *    } );\n         */\n        \"bSortCellsTop\": false,\n        /**\n         * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n         * `sorting\\_3` to the columns which are currently being sorted on. This is\n         * presented as a feature switch as it can increase processing time (while\n         * classes are removed and added) so for large data sets you might want to\n         * turn this off.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.orderClasses\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"orderClasses\": false\n         *      } );\n         *    } );\n         */\n        \"bSortClasses\": true,\n        /**\n         * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n         * used to save table display information such as pagination information,\n         * display length, filtering and sorting. As such when the end user reloads\n         * the page the display display will match what thy had previously set up.\n         *\n         * Due to the use of `localStorage` the default state saving is not supported\n         * in IE6 or 7. If state saving is required in those browsers, use\n         * `stateSaveCallback` to provide a storage solution such as cookies.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @name DataTable.defaults.stateSave\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true\n         *      } );\n         *    } );\n         */\n        \"bStateSave\": false,\n        /**\n         * This function is called when a TR element is created (and all TD child\n         * elements have been inserted), or registered if using a DOM source, allowing\n         * manipulation of the TR element (adding classes etc).\n         *  @type function\n         *  @param {node} row \"TR\" element for the current row\n         *  @param {array} data Raw data array for this row\n         *  @param {int} dataIndex The index of this row in the internal aoData array\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.createdRow\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"createdRow\": function( row, data, dataIndex ) {\n         *          // Bold the grade for all 'A' grade browsers\n         *          if ( data[4] == \"A\" )\n         *          {\n         *            $('td:eq(4)', row).html( '<b>A</b>' );\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnCreatedRow\": null,\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify any aspect you want about the created DOM.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.drawCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"drawCallback\": function( settings ) {\n         *          alert( 'DataTables has redrawn the table' );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnDrawCallback\": null,\n        /**\n         * Identical to fnHeaderCallback() but for the table footer this function\n         * allows you to modify the table footer on every 'draw' event.\n         *  @type function\n         *  @param {node} foot \"TR\" element for the footer\n         *  @param {array} data Full table data (as derived from the original HTML)\n         *  @param {int} start Index for the current display starting point in the\n         *    display array\n         *  @param {int} end Index for the current display ending point in the\n         *    display array\n         *  @param {array int} display Index array to translate the visual position\n         *    to the full data array\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.footerCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n         *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n         *        }\n         *      } );\n         *    } )\n         */\n        \"fnFooterCallback\": null,\n        /**\n         * When rendering large numbers in the information element for the table\n         * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n         * to have a comma separator for the 'thousands' units (e.g. 1 million is\n         * rendered as \"1,000,000\") to help readability for the end user. This\n         * function will override the default method DataTables uses.\n         *  @type function\n         *  @member\n         *  @param {int} toFormat number to be formatted\n         *  @returns {string} formatted string for DataTables to show the number\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.formatNumber\n         *  @example\n         *    // Format a number using a single quote for the separator (note that\n         *    // this can also be done with the language.thousands option)\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"formatNumber\": function ( toFormat ) {\n         *          return toFormat.toString().replace(\n         *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n         *          );\n         *        };\n         *      } );\n         *    } );\n         */\n        \"fnFormatNumber\": function ( toFormat ) {\n            return toFormat.toString().replace(\n                /\\B(?=(\\d{3})+(?!\\d))/g,\n                this.oLanguage.sThousands\n            );\n        },\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify the header row. This can be used to calculate and\n         * display useful information about the table.\n         *  @type function\n         *  @param {node} head \"TR\" element for the header\n         *  @param {array} data Full table data (as derived from the original HTML)\n         *  @param {int} start Index for the current display starting point in the\n         *    display array\n         *  @param {int} end Index for the current display ending point in the\n         *    display array\n         *  @param {array int} display Index array to translate the visual position\n         *    to the full data array\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.headerCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"fheaderCallback\": function( head, data, start, end, display ) {\n         *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n         *        }\n         *      } );\n         *    } )\n         */\n        \"fnHeaderCallback\": null,\n        /**\n         * The information element can be used to convey information about the current\n         * state of the table. Although the internationalisation options presented by\n         * DataTables are quite capable of dealing with most customisations, there may\n         * be times where you wish to customise the string further. This callback\n         * allows you to do exactly that.\n         *  @type function\n         *  @param {object} oSettings DataTables settings object\n         *  @param {int} start Starting position in data for the draw\n         *  @param {int} end End position in data for the draw\n         *  @param {int} max Total number of rows in the table (regardless of\n         *    filtering)\n         *  @param {int} total Total number of rows in the data set, after filtering\n         *  @param {string} pre The string that DataTables has formatted using it's\n         *    own rules\n         *  @returns {string} The string to be displayed in the information element.\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.infoCallback\n         *  @example\n         *    $('#example').dataTable( {\n         *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n         *        return start +\" to \"+ end;\n         *      }\n         *    } );\n         */\n        \"fnInfoCallback\": null,\n        /**\n         * Called when the table has been initialised. Normally DataTables will\n         * initialise sequentially and there will be no need for this function,\n         * however, this does not hold true when using external language information\n         * since that is obtained using an async XHR call.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} json The JSON object request from the server - only\n         *    present if client-side Ajax sourced data is used\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.initComplete\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"initComplete\": function(settings, json) {\n         *          alert( 'DataTables has finished its initialisation.' );\n         *        }\n         *      } );\n         *    } )\n         */\n        \"fnInitComplete\": null,\n        /**\n         * Called at the very start of each table draw and can be used to cancel the\n         * draw by returning false, any other return (including undefined) results in\n         * the full draw occurring).\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @returns {boolean} False will cancel the draw, anything else (including no\n         *    return) will allow it to complete.\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.preDrawCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"preDrawCallback\": function( settings ) {\n         *          if ( $('#test').val() == 1 ) {\n         *            return false;\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnPreDrawCallback\": null,\n        /**\n         * This function allows you to 'post process' each row after it have been\n         * generated for each table draw, but before it is rendered on screen. This\n         * function might be used for setting the row class name etc.\n         *  @type function\n         *  @param {node} row \"TR\" element for the current row\n         *  @param {array} data Raw data array for this row\n         *  @param {int} displayIndex The display index for the current table draw\n         *  @param {int} displayIndexFull The index of the data in the full list of\n         *    rows (after filtering)\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.rowCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n         *          // Bold the grade for all 'A' grade browsers\n         *          if ( data[4] == \"A\" ) {\n         *            $('td:eq(4)', row).html( '<b>A</b>' );\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnRowCallback\": null,\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * This parameter allows you to override the default function which obtains\n         * the data from the server so something more suitable for your application.\n         * For example you could use POST data, or pull information from a Gears or\n         * AIR database.\n         *  @type function\n         *  @member\n         *  @param {string} source HTTP source to obtain the data from (`ajax`)\n         *  @param {array} data A key/value pair object containing the data to send\n         *    to the server\n         *  @param {function} callback to be called on completion of the data get\n         *    process that will draw the data on the page.\n         *  @param {object} settings DataTables settings object\n         *  @dtopt Callbacks\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverData\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"fnServerData\": null,\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *  It is often useful to send extra data to the server when making an Ajax\n         * request - for example custom filtering information, and this callback\n         * function makes it trivial to send extra information to the server. The\n         * passed in parameter is the data set that has been constructed by\n         * DataTables, and you can add to this or modify it as you require.\n         *  @type function\n         *  @param {array} data Data array (array of objects which are name/value\n         *    pairs) that has been constructed by DataTables and will be sent to the\n         *    server. In the case of Ajax sourced data with server-side processing\n         *    this will be an empty array, for server-side processing there will be a\n         *    significant number of parameters!\n         *  @returns {undefined} Ensure that you modify the data array passed in,\n         *    as this is passed by reference.\n         *  @dtopt Callbacks\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverParams\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"fnServerParams\": null,\n        /**\n         * Load the table state. With this function you can define from where, and how, the\n         * state of a table is loaded. By default DataTables will load from `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         *  @type function\n         *  @member\n         *  @param {object} settings DataTables settings object\n         *  @return {object} The DataTables state object to be loaded\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoadCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoadCallback\": function (settings, callback) {\n         *          $.ajax( {\n         *            \"url\": \"/state_load\",\n         *            \"dataType\": \"json\",\n         *            \"success\": function (json) {\n         *              callback( json );\n         *            }\n         *          } );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateLoadCallback\": function ( settings ) {\n            try {\n                return JSON.parse(\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n                        'DataTables_'+settings.sInstance+'_'+location.pathname\n                    )\n                );\n            } catch (e) {}\n        },\n        /**\n         * Callback which allows modification of the saved state prior to loading that state.\n         * This callback is called when the table is loading state from the stored data, but\n         * prior to the settings object being modified by the saved state. Note that for\n         * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n         * a plug-in.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object that is to be loaded\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoadParams\n         *  @example\n         *    // Remove a saved filter, so filtering is never loaded\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoadParams\": function (settings, data) {\n         *          data.oSearch.sSearch = \"\";\n         *        }\n         *      } );\n         *    } );\n         *  @example\n         *    // Disallow state loading by returning false\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoadParams\": function (settings, data) {\n         *          return false;\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateLoadParams\": null,\n        /**\n         * Callback that is called when the state has been loaded from the state saving method\n         * and the DataTables settings object has been modified as a result of the loaded state.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object that was loaded\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoaded\n         *  @example\n         *    // Show an alert with the filtering value that was saved\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoaded\": function (settings, data) {\n         *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateLoaded\": null,\n        /**\n         * Save the table state. This function allows you to define where and how the state\n         * information for the table is stored By default DataTables will use `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         *  @type function\n         *  @member\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object to be saved\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateSaveCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateSaveCallback\": function (settings, data) {\n         *          // Send an Ajax request to the server with the state object\n         *          $.ajax( {\n         *            \"url\": \"/state_save\",\n         *            \"data\": data,\n         *            \"dataType\": \"json\",\n         *            \"method\": \"POST\"\n         *            \"success\": function () {}\n         *          } );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateSaveCallback\": function ( settings, data ) {\n            try {\n                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n                    'DataTables_'+settings.sInstance+'_'+location.pathname,\n                    JSON.stringify( data )\n                );\n            } catch (e) {}\n        },\n        /**\n         * Callback which allows modification of the state to be saved. Called when the table\n         * has changed state a new state save is required. This method allows modification of\n         * the state saving object prior to actually doing the save, including addition or\n         * other state properties or modification. Note that for plug-in authors, you should\n         * use the `stateSaveParams` event to save parameters for a plug-in.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object to be saved\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateSaveParams\n         *  @example\n         *    // Remove a saved filter, so filtering is never saved\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateSaveParams\": function (settings, data) {\n         *          data.oSearch.sSearch = \"\";\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateSaveParams\": null,\n        /**\n         * Duration for which the saved state information is considered valid. After this period\n         * has elapsed the state will be returned to the default.\n         * Value is given in seconds.\n         *  @type int\n         *  @default 7200 <i>(2 hours)</i>\n         *  @dtopt Options\n         *  @name DataTable.defaults.stateDuration\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateDuration\": 60*60*24; // 1 day\n         *      } );\n         *    } )\n         */\n        \"iStateDuration\": 7200,\n        /**\n         * When enabled DataTables will not make a request to the server for the first\n         * page draw - rather it will use the data already on the page (no sorting etc\n         * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n         * is used to indicate that deferred loading is required, but it is also used\n         * to tell DataTables how many records there are in the full table (allowing\n         * the information element and pagination to be displayed correctly). In the case\n         * where a filtering is applied to the table on initial load, this can be\n         * indicated by giving the parameter as an array, where the first element is\n         * the number of records available after filtering and the second element is the\n         * number of records without filtering (allowing the table information element\n         * to be shown correctly).\n         *  @type int | array\n         *  @default null\n         *  @dtopt Options\n         *  @name DataTable.defaults.deferLoading\n         *  @example\n         *    // 57 records available in the table, no filtering applied\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"serverSide\": true,\n         *        \"ajax\": \"scripts/server_processing.php\",\n         *        \"deferLoading\": 57\n         *      } );\n         *    } );\n         *  @example\n         *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"serverSide\": true,\n         *        \"ajax\": \"scripts/server_processing.php\",\n         *        \"deferLoading\": [ 57, 100 ],\n         *        \"search\": {\n         *          \"search\": \"my_filter\"\n         *        }\n         *      } );\n         *    } );\n         */\n        \"iDeferLoading\": null,\n        /**\n         * Number of rows to display on a single page when using pagination. If\n         * feature enabled (`lengthChange`) then the end user will be able to override\n         * this to a custom setting using a pop-up menu.\n         *  @type int\n         *  @default 10\n         *  @dtopt Options\n         *  @name DataTable.defaults.pageLength\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"pageLength\": 50\n         *      } );\n         *    } )\n         */\n        \"iDisplayLength\": 10,\n        /**\n         * Define the starting point for data display when using DataTables with\n         * pagination. Note that this parameter is the number of records, rather than\n         * the page number, so if you have 10 records per page and want to start on\n         * the third page, it should be \"20\".\n         *  @type int\n         *  @default 0\n         *  @dtopt Options\n         *  @name DataTable.defaults.displayStart\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"displayStart\": 20\n         *      } );\n         *    } )\n         */\n        \"iDisplayStart\": 0,\n        /**\n         * By default DataTables allows keyboard navigation of the table (sorting, paging,\n         * and filtering) by adding a `tabindex` attribute to the required elements. This\n         * allows you to tab through the controls and press the enter key to activate them.\n         * The tabindex is default 0, meaning that the tab follows the flow of the document.\n         * You can overrule this using this parameter if you wish. Use a value of -1 to\n         * disable built-in keyboard navigation.\n         *  @type int\n         *  @default 0\n         *  @dtopt Options\n         *  @name DataTable.defaults.tabIndex\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"tabIndex\": 1\n         *      } );\n         *    } );\n         */\n        \"iTabIndex\": 0,\n        /**\n         * Classes that DataTables assigns to the various components and features\n         * that it adds to the HTML table. This allows classes to be configured\n         * during initialisation in addition to through the static\n         * {@link DataTable.ext.oStdClasses} object).\n         *  @namespace\n         *  @name DataTable.defaults.classes\n         */\n        \"oClasses\": {},\n        /**\n         * All strings that DataTables uses in the user interface that it creates\n         * are defined in this object, allowing you to modified them individually or\n         * completely replace them all as required.\n         *  @namespace\n         *  @name DataTable.defaults.language\n         */\n        \"oLanguage\": {\n            /**\n             * Strings that are used for WAI-ARIA labels and controls only (these are not\n             * actually visible on the page, but will be read by screenreaders, and thus\n             * must be internationalised as well).\n             *  @namespace\n             *  @name DataTable.defaults.language.aria\n             */\n            \"oAria\": {\n                /**\n                 * ARIA label that is added to the table headers when the column may be\n                 * sorted ascending by activing the column (click or return when focused).\n                 * Note that the column header is prefixed to this string.\n                 *  @type string\n                 *  @default : activate to sort column ascending\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.aria.sortAscending\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"aria\": {\n                 *            \"sortAscending\": \" - click/return to sort ascending\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sSortAscending\": \": activate to sort column ascending\",\n                /**\n                 * ARIA label that is added to the table headers when the column may be\n                 * sorted descending by activing the column (click or return when focused).\n                 * Note that the column header is prefixed to this string.\n                 *  @type string\n                 *  @default : activate to sort column ascending\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.aria.sortDescending\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"aria\": {\n                 *            \"sortDescending\": \" - click/return to sort descending\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sSortDescending\": \": activate to sort column descending\"\n            },\n            /**\n             * Pagination string used by DataTables for the built-in pagination\n             * control types.\n             *  @namespace\n             *  @name DataTable.defaults.language.paginate\n             */\n            \"oPaginate\": {\n                /**\n                 * Text to use when using the 'full_numbers' type of pagination for the\n                 * button to take the user to the first page.\n                 *  @type string\n                 *  @default First\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.first\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"first\": \"First page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sFirst\": \"First\",\n                /**\n                 * Text to use when using the 'full_numbers' type of pagination for the\n                 * button to take the user to the last page.\n                 *  @type string\n                 *  @default Last\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.last\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"last\": \"Last page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sLast\": \"Last\",\n                /**\n                 * Text to use for the 'next' pagination button (to take the user to the\n                 * next page).\n                 *  @type string\n                 *  @default Next\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.next\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"next\": \"Next page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sNext\": \"Next\",\n                /**\n                 * Text to use for the 'previous' pagination button (to take the user to\n                 * the previous page).\n                 *  @type string\n                 *  @default Previous\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.previous\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"previous\": \"Previous page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sPrevious\": \"Previous\"\n            },\n            /**\n             * This string is shown in preference to `zeroRecords` when the table is\n             * empty of data (regardless of filtering). Note that this is an optional\n             * parameter - if it is not given, the value of `zeroRecords` will be used\n             * instead (either the default or given value).\n             *  @type string\n             *  @default No data available in table\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.emptyTable\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"emptyTable\": \"No data available in table\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sEmptyTable\": \"No data available in table\",\n            /**\n             * This string gives information to the end user about the information\n             * that is current on display on the page. The following tokens can be\n             * used in the string and will be dynamically replaced as the table\n             * display updates. This tokens can be placed anywhere in the string, or\n             * removed as needed by the language requires:\n             *\n             * * `\\_START\\_` - Display index of the first record on the current page\n             * * `\\_END\\_` - Display index of the last record on the current page\n             * * `\\_TOTAL\\_` - Number of records in the table after filtering\n             * * `\\_MAX\\_` - Number of records in the table without filtering\n             * * `\\_PAGE\\_` - Current page number\n             * * `\\_PAGES\\_` - Total number of pages of data in the table\n             *  @type string\n             *  @default Showing _START_ to _END_ of _TOTAL_ entries\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.info\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n            /**\n             * Display information string for when the table is empty. Typically the\n             * format of this string should match `info`.\n             *  @type string\n             *  @default Showing 0 to 0 of 0 entries\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoEmpty\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"infoEmpty\": \"No entries to show\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n            /**\n             * When a user filters the information in a table, this string is appended\n             * to the information (`info`) to give an idea of how strong the filtering\n             * is. The variable _MAX_ is dynamically updated.\n             *  @type string\n             *  @default (filtered from _MAX_ total entries)\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoFiltered\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n            /**\n             * If can be useful to append extra information to the info string at times,\n             * and this variable does exactly that. This information will be appended to\n             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n             * being used) at all times.\n             *  @type string\n             *  @default <i>Empty string</i>\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoPostFix\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"infoPostFix\": \"All records shown are derived from real information.\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfoPostFix\": \"\",\n            /**\n             * This decimal place operator is a little different from the other\n             * language options since DataTables doesn't output floating point\n             * numbers, so it won't ever use this for display of a number. Rather,\n             * what this parameter does is modify the sort methods of the table so\n             * that numbers which are in a format which has a character other than\n             * a period (`.`) as a decimal place will be sorted numerically.\n             *\n             * Note that numbers with different decimal places cannot be shown in\n             * the same table and still be sortable, the table must be consistent.\n             * However, multiple different tables on the page can use different\n             * decimal place characters.\n             *  @type string\n             *  @default\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.decimal\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"decimal\": \",\"\n             *          \"thousands\": \".\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sDecimal\": \"\",\n            /**\n             * DataTables has a build in number formatter (`formatNumber`) which is\n             * used to format large numbers that are used in the table information.\n             * By default a comma is used, but this can be trivially changed to any\n             * character you wish with this parameter.\n             *  @type string\n             *  @default ,\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.thousands\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"thousands\": \"'\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sThousands\": \",\",\n            /**\n             * Detail the action that will be taken when the drop down menu for the\n             * pagination length option is changed. The '_MENU_' variable is replaced\n             * with a default select list of 10, 25, 50 and 100, and can be replaced\n             * with a custom select box if required.\n             *  @type string\n             *  @default Show _MENU_ entries\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.lengthMenu\n             *  @example\n             *    // Language change only\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"lengthMenu\": \"Display _MENU_ records\"\n             *        }\n             *      } );\n             *    } );\n             *  @example\n             *    // Language and options change\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"lengthMenu\": 'Display <select>'+\n             *            '<option value=\"10\">10</option>'+\n             *            '<option value=\"20\">20</option>'+\n             *            '<option value=\"30\">30</option>'+\n             *            '<option value=\"40\">40</option>'+\n             *            '<option value=\"50\">50</option>'+\n             *            '<option value=\"-1\">All</option>'+\n             *            '</select> records'\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sLengthMenu\": \"Show _MENU_ entries\",\n            /**\n             * When using Ajax sourced data and during the first draw when DataTables is\n             * gathering the data, this message is shown in an empty row in the table to\n             * indicate to the end user the the data is being loaded. Note that this\n             * parameter is not used when loading data by server-side processing, just\n             * Ajax sourced data with client-side processing.\n             *  @type string\n             *  @default Loading...\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.loadingRecords\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"loadingRecords\": \"Please wait - loading...\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sLoadingRecords\": \"Loading...\",\n            /**\n             * Text which is displayed when the table is processing a user action\n             * (usually a sort command or similar).\n             *  @type string\n             *  @default Processing...\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.processing\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"processing\": \"DataTables is currently busy\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sProcessing\": \"Processing...\",\n            /**\n             * Details the actions that will be taken when the user types into the\n             * filtering input text box. The variable \"_INPUT_\", if used in the string,\n             * is replaced with the HTML text box for the filtering input allowing\n             * control over where it appears in the string. If \"_INPUT_\" is not given\n             * then the input box is appended to the string automatically.\n             *  @type string\n             *  @default Search:\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.search\n             *  @example\n             *    // Input text box will be appended at the end automatically\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"search\": \"Filter records:\"\n             *        }\n             *      } );\n             *    } );\n             *  @example\n             *    // Specify where the filter should appear\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"search\": \"Apply filter _INPUT_ to table\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sSearch\": \"Search:\",\n            /**\n             * Assign a `placeholder` attribute to the search `input` element\n             *  @type string\n             *  @default\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.searchPlaceholder\n             */\n            \"sSearchPlaceholder\": \"\",\n            /**\n             * All of the language information can be stored in a file on the\n             * server-side, which DataTables will look up if this parameter is passed.\n             * It must store the URL of the language file, which is in a JSON format,\n             * and the object has the same properties as the oLanguage object in the\n             * initialiser object (i.e. the above parameters). Please refer to one of\n             * the example language files to see how this works in action.\n             *  @type string\n             *  @default <i>Empty string - i.e. disabled</i>\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.url\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sUrl\": \"\",\n            /**\n             * Text shown inside the table records when the is no information to be\n             * displayed after filtering. `emptyTable` is shown when there is simply no\n             * information in the table at all (regardless of filtering).\n             *  @type string\n             *  @default No matching sessions found\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.zeroRecords\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"zeroRecords\": \"No sessions to display\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sZeroRecords\": \"No matching records found\"\n        },\n        /**\n         * This parameter allows you to have define the global filtering state at\n         * initialisation time. As an object the `search` parameter must be\n         * defined, but all other parameters are optional. When `regex` is true,\n         * the search string will be treated as a regular expression, when false\n         * (default) it will be treated as a straight string. When `smart`\n         * DataTables will use it's smart filtering methods (to word match at\n         * any point in the data), when false this will not be done.\n         *  @namespace\n         *  @extends DataTable.models.oSearch\n         *  @dtopt Options\n         *  @name DataTable.defaults.search\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"search\": {\"search\": \"Initial search\"}\n         *      } );\n         *    } )\n         */\n        \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * By default DataTables will look for the property `data` (or `aaData` for\n         * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n         * source or for server-side processing - this parameter allows that\n         * property to be changed. You can use Javascript dotted object notation to\n         * get a data source for multiple levels of nesting.\n         *  @type string\n         *  @default data\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.ajaxDataProp\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sAjaxDataProp\": \"data\",\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * You can instruct DataTables to load data from an external\n         * source using this parameter (use aData if you want to pass data in you\n         * already have). Simply provide a url a JSON object can be obtained from.\n         *  @type string\n         *  @default null\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.ajaxSource\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sAjaxSource\": null,\n        /**\n         * This initialisation variable allows you to specify exactly where in the\n         * DOM you want DataTables to inject the various controls it adds to the page\n         * (for example you might want the pagination controls at the top of the\n         * table). DIV elements (with or without a custom class) can also be added to\n         * aid styling. The follow syntax is used:\n         *   <ul>\n         *     <li>The following options are allowed:\n         *       <ul>\n         *         <li>'l' - Length changing</li>\n         *         <li>'f' - Filtering input</li>\n         *         <li>'t' - The table!</li>\n         *         <li>'i' - Information</li>\n         *         <li>'p' - Pagination</li>\n         *         <li>'r' - pRocessing</li>\n         *       </ul>\n         *     </li>\n         *     <li>The following constants are allowed:\n         *       <ul>\n         *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr\n         * ui-helper-clearfix')</li>\n         *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br\n         * ui-helper-clearfix')</li>\n         *       </ul>\n         *     </li>\n         *     <li>The following syntax is expected:\n         *       <ul>\n         *         <li>'&lt;' and '&gt;' - div elements</li>\n         *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n         *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n         *       </ul>\n         *     </li>\n         *     <li>Examples:\n         *       <ul>\n         *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n         *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n         *       </ul>\n         *     </li>\n         *   </ul>\n         *  @type string\n         *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n         *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n         *  @dtopt Options\n         *  @name DataTable.defaults.dom\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n         *      } );\n         *    } );\n         */\n        \"sDom\": \"lfrtip\",\n        /**\n         * Search delay option. This will throttle full table searches that use the\n         * DataTables provided search input element (it does not effect calls to\n         * `dt-api search()`, providing a delay before the search is made.\n         *  @type integer\n         *  @default 0\n         *  @dtopt Options\n         *  @name DataTable.defaults.searchDelay\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"searchDelay\": 200\n         *      } );\n         *    } )\n         */\n        \"searchDelay\": null,\n        /**\n         * DataTables features six different built-in options for the buttons to\n         * display for pagination control:\n         *\n         * * `numbers` - Page number buttons only\n         * * `simple` - 'Previous' and 'Next' buttons only\n         * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n         * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n         * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n         * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n         * Further methods can be added using {@link DataTable.ext.oPagination}.\n         *  @type string\n         *  @default simple_numbers\n         *  @dtopt Options\n         *  @name DataTable.defaults.pagingType\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"pagingType\": \"full_numbers\"\n         *      } );\n         *    } )\n         */\n        \"sPaginationType\": \"simple_numbers\",\n        /**\n         * Enable horizontal scrolling. When a table is too wide to fit into a\n         * certain layout, or you have a large number of columns in the table, you\n         * can enable x-scrolling to show the table in a viewport, which can be\n         * scrolled. This property can be `true` which will allow the table to\n         * scroll horizontally when needed, or any CSS unit, or a number (in which\n         * case it will be treated as a pixel measurement). Setting as simply `true`\n         * is recommended.\n         *  @type boolean|string\n         *  @default <i>blank string - i.e. disabled</i>\n         *  @dtopt Features\n         *  @name DataTable.defaults.scrollX\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollX\": true,\n         *        \"scrollCollapse\": true\n         *      } );\n         *    } );\n         */\n        \"sScrollX\": \"\",\n        /**\n         * This property can be used to force a DataTable to use more width than it\n         * might otherwise do when x-scrolling is enabled. For example if you have a\n         * table which requires to be well spaced, this parameter is useful for\n         * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n         * any CSS unit, or a number (in which case it will be treated as a pixel\n         * measurement).\n         *  @type string\n         *  @default <i>blank string - i.e. disabled</i>\n         *  @dtopt Options\n         *  @name DataTable.defaults.scrollXInner\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollX\": \"100%\",\n         *        \"scrollXInner\": \"110%\"\n         *      } );\n         *    } );\n         */\n        \"sScrollXInner\": \"\",\n        /**\n         * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n         * to the given height, and enable scrolling for any data which overflows the\n         * current viewport. This can be used as an alternative to paging to display\n         * a lot of data in a small area (although paging and scrolling can both be\n         * enabled at the same time). This property can be any CSS unit, or a number\n         * (in which case it will be treated as a pixel measurement).\n         *  @type string\n         *  @default <i>blank string - i.e. disabled</i>\n         *  @dtopt Features\n         *  @name DataTable.defaults.scrollY\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollY\": \"200px\",\n         *        \"paginate\": false\n         *      } );\n         *    } );\n         */\n        \"sScrollY\": \"\",\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * Set the HTTP method that is used to make the Ajax call for server-side\n         * processing or Ajax sourced data.\n         *  @type string\n         *  @default GET\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverMethod\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sServerMethod\": \"GET\",\n        /**\n         * DataTables makes use of renderers when displaying HTML elements for\n         * a table. These renderers can be added or modified by plug-ins to\n         * generate suitable mark-up for a site. For example the Bootstrap\n         * integration plug-in for DataTables uses a paging button renderer to\n         * display pagination buttons in the mark-up required by Bootstrap.\n         * For further information about the renderers available see\n         * DataTable.ext.renderer\n         *  @type string|object\n         *  @default null\n         *  @name DataTable.defaults.renderer\n         */\n        \"renderer\": null,\n        /**\n         * Set the data property name that DataTables should use to get a row's id\n         * to set as the `id` property in the node.\n         *  @type string\n         *  @default DT_RowId\n         *  @name DataTable.defaults.rowId\n         */\n        \"rowId\": \"DT_RowId\"\n    };\n    _fnHungarianMap( DataTable.defaults );\n    /*\n     * Developer note - See note in model.defaults.js about the use of Hungarian\n     * notation and camel case.\n     */\n    /**\n     * Column options that can be given to DataTables at initialisation time.\n     *  @namespace\n     */\n    DataTable.defaults.column = {\n        /**\n         * Define which column(s) an order will occur on for this column. This\n         * allows a column's ordering to take multiple columns into account when\n         * doing a sort or use the data from a different column. For example first\n         * name / last name columns make sense to do a multi-column sort over the\n         * two columns.\n         *  @type array|int\n         *  @default null <i>Takes the value of the column index automatically</i>\n         *  @name DataTable.defaults.column.orderData\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n         *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n         *          { \"orderData\": 2, \"targets\": [ 2 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"orderData\": [ 0, 1 ] },\n         *          { \"orderData\": [ 1, 0 ] },\n         *          { \"orderData\": 2 },\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"aDataSort\": null,\n        \"iDataSort\": -1,\n        /**\n         * You can control the default ordering direction, and even alter the\n         * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n         * using this parameter.\n         *  @type array\n         *  @default [ 'asc', 'desc' ]\n         *  @name DataTable.defaults.column.orderSequence\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n         *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n         *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          { \"orderSequence\": [ \"asc\" ] },\n         *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n         *          { \"orderSequence\": [ \"desc\" ] },\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"asSorting\": [ 'asc', 'desc' ],\n        /**\n         * Enable or disable filtering on the data in this column.\n         *  @type boolean\n         *  @default true\n         *  @name DataTable.defaults.column.searchable\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"searchable\": false, \"targets\": [ 0 ] }\n         *        ] } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"searchable\": false },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ] } );\n         *    } );\n         */\n        \"bSearchable\": true,\n        /**\n         * Enable or disable ordering on this column.\n         *  @type boolean\n         *  @default true\n         *  @name DataTable.defaults.column.orderable\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderable\": false, \"targets\": [ 0 ] }\n         *        ] } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"orderable\": false },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ] } );\n         *    } );\n         */\n        \"bSortable\": true,\n        /**\n         * Enable or disable the display of this column.\n         *  @type boolean\n         *  @default true\n         *  @name DataTable.defaults.column.visible\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"visible\": false, \"targets\": [ 0 ] }\n         *        ] } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"visible\": false },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ] } );\n         *    } );\n         */\n        \"bVisible\": true,\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         *  @type function\n         *  @param {element} td The TD node that has been created\n         *  @param {*} cellData The Data for the cell\n         *  @param {array|object} rowData The data for the whole row\n         *  @param {int} row The row index for the aoData data store\n         *  @param {int} col The column index for aoColumns\n         *  @name DataTable.defaults.column.createdCell\n         *  @dtopt Columns\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [3],\n         *          \"createdCell\": function (td, cellData, rowData, row, col) {\n         *            if ( cellData == \"1.7\" ) {\n         *              $(td).css('color', 'blue')\n         *            }\n         *          }\n         *        } ]\n         *      });\n         *    } );\n         */\n        \"fnCreatedCell\": null,\n        /**\n         * This parameter has been replaced by `data` in DataTables to ensure naming\n         * consistency. `dataProp` can still be used, as there is backwards\n         * compatibility in DataTables for this option, but it is strongly\n         * recommended that you use `data` in preference to `dataProp`.\n         *  @name DataTable.defaults.column.dataProp\n         */\n        /**\n         * This property can be used to read data from any data source property,\n         * including deeply nested objects / properties. `data` can be given in a\n         * number of different ways which effect its behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object. Note that\n         *      function notation is recommended for use in `render` rather than\n         *      `data` as it is much simpler to use as a renderer.\n         * * `null` - use the original data source for the row rather than plucking\n         *   data directly from it. This action has effects on two other\n         *   initialisation options:\n         *    * `defaultContent` - When null is given as the `data` option and\n         *      `defaultContent` is specified for the column, the value defined by\n         *      `defaultContent` will be used for the cell.\n         *    * `render` - When null is used for the `data` option and the `render`\n         *      option is specified for the column, the whole data source for the\n         *      row is used for the renderer.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * `{array|object}` The data source for the row\n         *      * `{string}` The type call data requested - this will be 'set' when\n         *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n         *        when gathering data. Note that when `undefined` is given for the\n         *        type DataTables expects to get the raw data for the object back<\n         *      * `{*}` Data to set when the second parameter is 'set'.\n         *    * Return:\n         *      * The return value from the function is not required when 'set' is\n         *        the type of call, but otherwise the return is what will be used\n         *        for the data requested.\n         *\n         * Note that `data` is a getter and setter option. If you just require\n         * formatting of data for output, you will likely want to use `render` which\n         * is simply a getter and thus simpler to use.\n         *\n         * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n         * name change reflects the flexibility of this property and is consistent\n         * with the naming of mRender. If 'mDataProp' is given, then it will still\n         * be used by DataTables, as it automatically maps the old name to the new\n         * if required.\n         *  @type string|int|function|null\n         *  @default null <i>Use automatically calculated column index</i>\n         *  @name DataTable.defaults.column.data\n         *  @dtopt Columns\n         *  @example\n         *    // Read table data from objects\n         *    // JSON structure for each row:\n         *    //   {\n         *    //      \"engine\": {value},\n         *    //      \"browser\": {value},\n         *    //      \"platform\": {value},\n         *    //      \"version\": {value},\n         *    //      \"grade\": {value}\n         *    //   }\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajaxSource\": \"sources/objects.txt\",\n         *        \"columns\": [\n         *          { \"data\": \"engine\" },\n         *          { \"data\": \"browser\" },\n         *          { \"data\": \"platform\" },\n         *          { \"data\": \"version\" },\n         *          { \"data\": \"grade\" }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Read information from deeply nested objects\n         *    // JSON structure for each row:\n         *    //   {\n         *    //      \"engine\": {value},\n         *    //      \"browser\": {value},\n         *    //      \"platform\": {\n         *    //         \"inner\": {value}\n         *    //      },\n         *    //      \"details\": [\n         *    //         {value}, {value}\n         *    //      ]\n         *    //   }\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajaxSource\": \"sources/deep.txt\",\n         *        \"columns\": [\n         *          { \"data\": \"engine\" },\n         *          { \"data\": \"browser\" },\n         *          { \"data\": \"platform.inner\" },\n         *          { \"data\": \"platform.details.0\" },\n         *          { \"data\": \"platform.details.1\" }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `data` as a function to provide different information for\n         *    // sorting, filtering and display. In this case, currency (price)\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": function ( source, type, val ) {\n         *            if (type === 'set') {\n         *              source.price = val;\n         *              // Store the computed dislay and filter values for efficiency\n         *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n         *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n         *              return;\n         *            }\n         *            else if (type === 'display') {\n         *              return source.price_display;\n         *            }\n         *            else if (type === 'filter') {\n         *              return source.price_filter;\n         *            }\n         *            // 'sort', 'type' and undefined all just use the integer\n         *            return source.price;\n         *          }\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using default content\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": null,\n         *          \"defaultContent\": \"Click to edit\"\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using array notation - outputting a list from an array\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": \"name[, ]\"\n         *        } ]\n         *      } );\n         *    } );\n         *\n         */\n        \"mData\": null,\n        /**\n         * This property is the rendering partner to `data` and it is suggested that\n         * when you want to manipulate data for display (including filtering,\n         * sorting etc) without altering the underlying data for the table, use this\n         * property. `render` can be considered to be the the read only companion to\n         * `data` which is read / write (then as such more complex). Like `data`\n         * this option can be given in a number of different ways to effect its\n         * behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object.\n         * * `object` - use different data for the different data types requested by\n         *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n         *   of the object is the data type the property refers to and the value can\n         *   defined using an integer, string or function using the same rules as\n         *   `render` normally does. Note that an `_` option _must_ be specified.\n         *   This is the default value to use if you haven't specified a value for\n         *   the data type requested by DataTables.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * {array|object} The data source for the row (based on `data`)\n         *      * {string} The type call data requested - this will be 'filter',\n         *        'display', 'type' or 'sort'.\n         *      * {array|object} The full data source for the row (not based on\n         *        `data`)\n         *    * Return:\n         *      * The return value from the function is what will be used for the\n         *        data requested.\n         *  @type string|int|function|object|null\n         *  @default null Use the data source value.\n         *  @name DataTable.defaults.column.render\n         *  @dtopt Columns\n         *  @example\n         *    // Create a comma separated list from an array of objects\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajaxSource\": \"sources/deep.txt\",\n         *        \"columns\": [\n         *          { \"data\": \"engine\" },\n         *          { \"data\": \"browser\" },\n         *          {\n         *            \"data\": \"platform\",\n         *            \"render\": \"[, ].name\"\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Execute a function to obtain data\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": null, // Use the full data source object for the renderer's source\n         *          \"render\": \"browserName()\"\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // As an object, extracting different data for the different types\n         *    // This would be used with a data source such as:\n         *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n         *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n         *    // (which has both forms) is used for filtering for if a user inputs either format, while\n         *    // the formatted phone number is the one that is shown in the table.\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": null, // Use the full data source object for the renderer's source\n         *          \"render\": {\n         *            \"_\": \"phone\",\n         *            \"filter\": \"phone_filter\",\n         *            \"display\": \"phone_display\"\n         *          }\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Use as a function to create a link from the data source\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": \"download_link\",\n         *          \"render\": function ( data, type, full ) {\n         *            return '<a href=\"'+data+'\">Download</a>';\n         *          }\n         *        } ]\n         *      } );\n         *    } );\n         */\n        \"mRender\": null,\n        /**\n         * Change the cell type created for the column - either TD cells or TH cells. This\n         * can be useful as TH cells have semantic meaning in the table body, allowing them\n         * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n         *  @type string\n         *  @default td\n         *  @name DataTable.defaults.column.cellType\n         *  @dtopt Columns\n         *  @example\n         *    // Make the first column use TH cells\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"cellType\": \"th\"\n         *        } ]\n         *      } );\n         *    } );\n         */\n        \"sCellType\": \"td\",\n        /**\n         * Class to give to each cell in this column.\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @name DataTable.defaults.column.class\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"class\": \"my_class\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sClass\": \"\",\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         * Generally you shouldn't need this!\n         *  @type string\n         *  @default <i>Empty string<i>\n         *  @name DataTable.defaults.column.contentPadding\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          null,\n         *          null,\n         *          {\n         *            \"contentPadding\": \"mmm\"\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sContentPadding\": \"\",\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because `data`\n         * is set to null, or because the data source itself is null).\n         *  @type string\n         *  @default null\n         *  @name DataTable.defaults.column.defaultContent\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          {\n         *            \"data\": null,\n         *            \"defaultContent\": \"Edit\",\n         *            \"targets\": [ -1 ]\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          null,\n         *          null,\n         *          {\n         *            \"data\": null,\n         *            \"defaultContent\": \"Edit\"\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sDefaultContent\": null,\n        /**\n         * This parameter is only used in DataTables' server-side processing. It can\n         * be exceptionally useful to know what columns are being displayed on the\n         * client side, and to map these to database fields. When defined, the names\n         * also allow DataTables to reorder information from the server if it comes\n         * back in an unexpected order (i.e. if you switch your columns around on the\n         * client-side, your server-side code does not also need updating).\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @name DataTable.defaults.column.name\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n         *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n         *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n         *          { \"name\": \"version\", \"targets\": [ 3 ] },\n         *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"name\": \"engine\" },\n         *          { \"name\": \"browser\" },\n         *          { \"name\": \"platform\" },\n         *          { \"name\": \"version\" },\n         *          { \"name\": \"grade\" }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sName\": \"\",\n        /**\n         * Defines a data source type for the ordering which can be used to read\n         * real-time information from the table (updating the internally cached\n         * version) prior to ordering. This allows ordering to occur on user\n         * editable elements such as form inputs.\n         *  @type string\n         *  @default std\n         *  @name DataTable.defaults.column.orderDataType\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n         *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n         *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n         *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          null,\n         *          { \"orderDataType\": \"dom-text\" },\n         *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n         *          { \"orderDataType\": \"dom-select\" },\n         *          { \"orderDataType\": \"dom-checkbox\" }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sSortDataType\": \"std\",\n        /**\n         * The title of this column.\n         *  @type string\n         *  @default null <i>Derived from the 'TH' value for this column in the\n         *    original HTML table.</i>\n         *  @name DataTable.defaults.column.title\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"title\": \"My column title\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sTitle\": null,\n        /**\n         * The type allows you to specify how the data for this column will be\n         * ordered. Four types (string, numeric, date and html (which will strip\n         * HTML tags before ordering)) are currently available. Note that only date\n         * formats understood by Javascript's Date() object will be accepted as type\n         * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n         * 'numeric', 'date' or 'html' (by default). Further types can be adding\n         * through plug-ins.\n         *  @type string\n         *  @default null <i>Auto-detected from raw data</i>\n         *  @name DataTable.defaults.column.type\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"type\": \"html\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"type\": \"html\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sType\": null,\n        /**\n         * Defining the width of the column, this parameter may take any CSS value\n         * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n         * been given a specific width through this interface ensuring that the table\n         * remains readable.\n         *  @type string\n         *  @default null <i>Automatic</i>\n         *\n         *  @name DataTable.defaults.column.width\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"width\": \"20%\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sWidth\": null\n    };\n    _fnHungarianMap( DataTable.defaults.column );\n    /**\n     * DataTables settings object - this holds all the information needed for a\n     * given table, including configuration, data and current application of the\n     * table options. DataTables does not have a single instance for each DataTable\n     * with the settings attached to that instance, but rather instances of the\n     * DataTable \"class\" are created on-the-fly as needed (typically by a\n     * $().dataTable() call) and the settings object is then applied to that\n     * instance.\n     * Note that this object is related to {@link DataTable.defaults} but this\n     * one is the internal data store for DataTables's cache of columns. It should\n     * NOT be manipulated outside of DataTables. Any configuration should be done\n     * through the initialisation options.\n     *  @namespace\n     *  @todo Really should attach the settings object to individual instances so we\n     *    don't need to create new instances on each $().dataTable() call (if the\n     *    table already exists). It would also save passing oSettings around and\n     *    into every single function. However, this is a very significant\n     *    architecture change for DataTables and will almost certainly break\n     *    backwards compatibility with older installations. This is something that\n     *    will be done in 2.0.\n     */\n    DataTable.models.oSettings = {\n        /**\n         * Primary features of DataTables and their enablement state.\n         *  @namespace\n         */\n        \"oFeatures\": {\n            /**\n             * Flag to say if DataTables should automatically try to calculate the\n             * optimum table and columns widths (true) or not (false).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bAutoWidth\": null,\n            /**\n             * Delay the creation of TR and TD elements until they are actually\n             * needed by a driven page draw. This can give a significant speed\n             * increase for Ajax source and Javascript source data, but makes no\n             * difference at all fro DOM and server-side processing tables.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bDeferRender\": null,\n            /**\n             * Enable filtering on the table or not. Note that if this is disabled\n             * then there is no filtering at all on the table, including fnFilter.\n             * To just remove the filtering input use sDom and remove the 'f' option.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bFilter\": null,\n            /**\n             * Table information element (the 'Showing x of y records' div) enable\n             * flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bInfo\": null,\n            /**\n             * Present a user control allowing the end user to change the page size\n             * when pagination is enabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bLengthChange\": null,\n            /**\n             * Pagination enabled or not. Note that if this is disabled then length\n             * changing must also be disabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bPaginate\": null,\n            /**\n             * Processing indicator enable flag whenever DataTables is enacting a\n             * user request - typically an Ajax request for server-side processing.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bProcessing\": null,\n            /**\n             * Server-side processing enabled flag - when enabled DataTables will\n             * get all data from the server for every draw - there is no filtering,\n             * sorting or paging done on the client-side.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bServerSide\": null,\n            /**\n             * Sorting enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSort\": null,\n            /**\n             * Multi-column sorting\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortMulti\": null,\n            /**\n             * Apply a class to the columns which are being sorted to provide a\n             * visual highlight or not. This can slow things down when enabled since\n             * there is a lot of DOM interaction.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortClasses\": null,\n            /**\n             * State saving enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bStateSave\": null\n        },\n        /**\n         * Scrolling settings for a table.\n         *  @namespace\n         */\n        \"oScroll\": {\n            /**\n             * When the table is shorter in height than sScrollY, collapse the\n             * table container down to the height of the table (when true).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bCollapse\": null,\n            /**\n             * Width of the scrollbar for the web-browser's platform. Calculated\n             * during table initialisation.\n             *  @type int\n             *  @default 0\n             */\n            \"iBarWidth\": 0,\n            /**\n             * Viewport width for horizontal scrolling. Horizontal scrolling is\n             * disabled if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sX\": null,\n            /**\n             * Width to expand the table to when using x-scrolling. Typically you\n             * should not need to use this.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @deprecated\n             */\n            \"sXInner\": null,\n            /**\n             * Viewport height for vertical scrolling. Vertical scrolling is disabled\n             * if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sY\": null\n        },\n        /**\n         * Language information for the table.\n         *  @namespace\n         *  @extends DataTable.defaults.oLanguage\n         */\n        \"oLanguage\": {\n            /**\n             * Information callback function. See\n             * {@link DataTable.defaults.fnInfoCallback}\n             *  @type function\n             *  @default null\n             */\n            \"fnInfoCallback\": null\n        },\n        /**\n         * Browser support parameters\n         *  @namespace\n         */\n        \"oBrowser\": {\n            /**\n             * Indicate if the browser incorrectly calculates width:100% inside a\n             * scrolling element (IE6/7)\n             *  @type boolean\n             *  @default false\n             */\n            \"bScrollOversize\": false,\n            /**\n             * Determine if the vertical scrollbar is on the right or left of the\n             * scrolling container - needed for rtl language layout, although not\n             * all browsers move the scrollbar (Safari).\n             *  @type boolean\n             *  @default false\n             */\n            \"bScrollbarLeft\": false,\n            /**\n             * Flag for if `getBoundingClientRect` is fully supported or not\n             *  @type boolean\n             *  @default false\n             */\n            \"bBounding\": false,\n            /**\n             * Browser scrollbar width\n             *  @type integer\n             *  @default 0\n             */\n            \"barWidth\": 0\n        },\n        \"ajax\": null,\n        /**\n         * Array referencing the nodes which are used for the features. The\n         * parameters of this object match what is allowed by sDom - i.e.\n         *   <ul>\n         *     <li>'l' - Length changing</li>\n         *     <li>'f' - Filtering input</li>\n         *     <li>'t' - The table!</li>\n         *     <li>'i' - Information</li>\n         *     <li>'p' - Pagination</li>\n         *     <li>'r' - pRocessing</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aanFeatures\": [],\n        /**\n         * Store data information - see {@link DataTable.models.oRow} for detailed\n         * information.\n         *  @type array\n         *  @default []\n         */\n        \"aoData\": [],\n        /**\n         * Array of indexes which are in the current display (after filtering etc)\n         *  @type array\n         *  @default []\n         */\n        \"aiDisplay\": [],\n        /**\n         * Array of indexes for display - no filtering\n         *  @type array\n         *  @default []\n         */\n        \"aiDisplayMaster\": [],\n        /**\n         * Map of row ids to data indexes\n         *  @type object\n         *  @default {}\n         */\n        \"aIds\": {},\n        /**\n         * Store information about each column that is in use\n         *  @type array\n         *  @default []\n         */\n        \"aoColumns\": [],\n        /**\n         * Store information about the table's header\n         *  @type array\n         *  @default []\n         */\n        \"aoHeader\": [],\n        /**\n         * Store information about the table's footer\n         *  @type array\n         *  @default []\n         */\n        \"aoFooter\": [],\n        /**\n         * Store the applied global search information in case we want to force a\n         * research or compare the old search to a new one.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @namespace\n         *  @extends DataTable.models.oSearch\n         */\n        \"oPreviousSearch\": {},\n        /**\n         * Store the applied search for each column - see\n         * {@link DataTable.models.oSearch} for the format that is used for the\n         * filtering information for each column.\n         *  @type array\n         *  @default []\n         */\n        \"aoPreSearchCols\": [],\n        /**\n         * Sorting that is applied to the table. Note that the inner arrays are\n         * used in the following manner:\n         * <ul>\n         *   <li>Index 0 - column number</li>\n         *   <li>Index 1 - current sorting direction</li>\n         * </ul>\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @todo These inner arrays should really be objects\n         */\n        \"aaSorting\": null,\n        /**\n         * Sorting that is always applied to the table (i.e. prefixed in front of\n         * aaSorting).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"aaSortingFixed\": [],\n        /**\n         * Classes to use for the striping of a table.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"asStripeClasses\": null,\n        /**\n         * If restoring a table - we should restore its striping classes as well\n         *  @type array\n         *  @default []\n         */\n        \"asDestroyStripes\": [],\n        /**\n         * If restoring a table - we should restore its width\n         *  @type int\n         *  @default 0\n         */\n        \"sDestroyWidth\": 0,\n        /**\n         * Callback functions array for every time a row is inserted (i.e. on a draw).\n         *  @type array\n         *  @default []\n         */\n        \"aoRowCallback\": [],\n        /**\n         * Callback functions for the header on each draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoHeaderCallback\": [],\n        /**\n         * Callback function for the footer on each draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoFooterCallback\": [],\n        /**\n         * Array of callback functions for draw callback functions\n         *  @type array\n         *  @default []\n         */\n        \"aoDrawCallback\": [],\n        /**\n         * Array of callback functions for row created function\n         *  @type array\n         *  @default []\n         */\n        \"aoRowCreatedCallback\": [],\n        /**\n         * Callback functions for just before the table is redrawn. A return of\n         * false will be used to cancel the draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoPreDrawCallback\": [],\n        /**\n         * Callback functions for when the table has been initialised.\n         *  @type array\n         *  @default []\n         */\n        \"aoInitComplete\": [],\n        /**\n         * Callbacks for modifying the settings to be stored for state saving, prior to\n         * saving state.\n         *  @type array\n         *  @default []\n         */\n        \"aoStateSaveParams\": [],\n        /**\n         * Callbacks for modifying the settings that have been stored for state saving\n         * prior to using the stored values to restore the state.\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoadParams\": [],\n        /**\n         * Callbacks for operating on the settings object once the saved state has been\n         * loaded\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoaded\": [],\n        /**\n         * Cache the table ID for quick access\n         *  @type string\n         *  @default <i>Empty string</i>\n         */\n        \"sTableId\": \"\",\n        /**\n         * The TABLE node for the main table\n         *  @type node\n         *  @default null\n         */\n        \"nTable\": null,\n        /**\n         * Permanent ref to the thead element\n         *  @type node\n         *  @default null\n         */\n        \"nTHead\": null,\n        /**\n         * Permanent ref to the tfoot element - if it exists\n         *  @type node\n         *  @default null\n         */\n        \"nTFoot\": null,\n        /**\n         * Permanent ref to the tbody element\n         *  @type node\n         *  @default null\n         */\n        \"nTBody\": null,\n        /**\n         * Cache the wrapper node (contains all DataTables controlled elements)\n         *  @type node\n         *  @default null\n         */\n        \"nTableWrapper\": null,\n        /**\n         * Indicate if when using server-side processing the loading of data\n         * should be deferred until the second draw.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         *  @default false\n         */\n        \"bDeferLoading\": false,\n        /**\n         * Indicate if all required information has been read in\n         *  @type boolean\n         *  @default false\n         */\n        \"bInitialised\": false,\n        /**\n         * Information about open rows. Each object in the array has the parameters\n         * 'nTr' and 'nParent'\n         *  @type array\n         *  @default []\n         */\n        \"aoOpenRows\": [],\n        /**\n         * Dictate the positioning of DataTables' control elements - see\n         * {@link DataTable.model.oInit.sDom}.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default null\n         */\n        \"sDom\": null,\n        /**\n         * Search delay (in mS)\n         *  @type integer\n         *  @default null\n         */\n        \"searchDelay\": null,\n        /**\n         * Which type of pagination should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default two_button\n         */\n        \"sPaginationType\": \"two_button\",\n        /**\n         * The state duration (for `stateSave`) in seconds.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type int\n         *  @default 0\n         */\n        \"iStateDuration\": 0,\n        /**\n         * Array of callback functions for state saving. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the JSON string to save that has been thus far created. Returns\n         *       a JSON string to be inserted into a json object\n         *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aoStateSave\": [],\n        /**\n         * Array of callback functions for state loading. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the object stored. May return false to cancel state loading</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoad\": [],\n        /**\n         * State that was saved. Useful for back reference\n         *  @type object\n         *  @default null\n         */\n        \"oSavedState\": null,\n        /**\n         * State that was loaded. Useful for back reference\n         *  @type object\n         *  @default null\n         */\n        \"oLoadedState\": null,\n        /**\n         * Source url for AJAX data for the table.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default null\n         */\n        \"sAjaxSource\": null,\n        /**\n         * Property from a given object from which to read the table data from. This\n         * can be an empty string (when not server-side processing), in which case\n         * it is  assumed an an array is given directly.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         */\n        \"sAjaxDataProp\": null,\n        /**\n         * Note if draw should be blocked while getting data\n         *  @type boolean\n         *  @default true\n         */\n        \"bAjaxDataGet\": true,\n        /**\n         * The last jQuery XHR object that was used for server-side data gathering.\n         * This can be used for working with the XHR information in one of the\n         * callbacks\n         *  @type object\n         *  @default null\n         */\n        \"jqXHR\": null,\n        /**\n         * JSON returned from the server in the last Ajax request\n         *  @type object\n         *  @default undefined\n         */\n        \"json\": undefined,\n        /**\n         * Data submitted as part of the last Ajax request\n         *  @type object\n         *  @default undefined\n         */\n        \"oAjaxData\": undefined,\n        /**\n         * Function to get the server-side data.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type function\n         */\n        \"fnServerData\": null,\n        /**\n         * Functions which are called prior to sending an Ajax request so extra\n         * parameters can easily be sent to the server\n         *  @type array\n         *  @default []\n         */\n        \"aoServerParams\": [],\n        /**\n         * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n         * required).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         */\n        \"sServerMethod\": null,\n        /**\n         * Format numbers for display.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type function\n         */\n        \"fnFormatNumber\": null,\n        /**\n         * List of options that can be used for the user selectable length menu.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"aLengthMenu\": null,\n        /**\n         * Counter for the draws that the table does. Also used as a tracker for\n         * server-side processing\n         *  @type int\n         *  @default 0\n         */\n        \"iDraw\": 0,\n        /**\n         * Indicate if a redraw is being done - useful for Ajax\n         *  @type boolean\n         *  @default false\n         */\n        \"bDrawing\": false,\n        /**\n         * Draw index (iDraw) of the last error when parsing the returned data\n         *  @type int\n         *  @default -1\n         */\n        \"iDrawError\": -1,\n        /**\n         * Paging display length\n         *  @type int\n         *  @default 10\n         */\n        \"_iDisplayLength\": 10,\n        /**\n         * Paging start point - aiDisplay index\n         *  @type int\n         *  @default 0\n         */\n        \"_iDisplayStart\": 0,\n        /**\n         * Server-side processing - number of records in the result set\n         * (i.e. before filtering), Use fnRecordsTotal rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         *  @type int\n         *  @default 0\n         *  @private\n         */\n        \"_iRecordsTotal\": 0,\n        /**\n         * Server-side processing - number of records in the current display set\n         * (i.e. after filtering). Use fnRecordsDisplay rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         *  @type boolean\n         *  @default 0\n         *  @private\n         */\n        \"_iRecordsDisplay\": 0,\n        /**\n         * Flag to indicate if jQuery UI marking and classes should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         */\n        \"bJUI\": null,\n        /**\n         * The classes to use for the table\n         *  @type object\n         *  @default {}\n         */\n        \"oClasses\": {},\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if filtering has been done in the draw. Deprecated in favour of\n         * events.\n         *  @type boolean\n         *  @default false\n         *  @deprecated\n         */\n        \"bFiltered\": false,\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if sorting has been done in the draw. Deprecated in favour of\n         * events.\n         *  @type boolean\n         *  @default false\n         *  @deprecated\n         */\n        \"bSorted\": false,\n        /**\n         * Indicate that if multiple rows are in the header and there is more than\n         * one unique cell per column, if the top one (true) or bottom one (false)\n         * should be used for sorting / title by DataTables.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         */\n        \"bSortCellsTop\": null,\n        /**\n         * Initialisation object that is used for the table\n         *  @type object\n         *  @default null\n         */\n        \"oInit\": null,\n        /**\n         * Destroy callback functions - for plug-ins to attach themselves to the\n         * destroy so they can clean up markup and events.\n         *  @type array\n         *  @default []\n         */\n        \"aoDestroyCallback\": [],\n        /**\n         * Get the number of records in the current record set, before filtering\n         *  @type function\n         */\n        \"fnRecordsTotal\": function ()\n        {\n            return _fnDataSource( this ) == 'ssp' ?\n                this._iRecordsTotal * 1 :\n                this.aiDisplayMaster.length;\n        },\n        /**\n         * Get the number of records in the current record set, after filtering\n         *  @type function\n         */\n        \"fnRecordsDisplay\": function ()\n        {\n            return _fnDataSource( this ) == 'ssp' ?\n                this._iRecordsDisplay * 1 :\n                this.aiDisplay.length;\n        },\n        /**\n         * Get the display end point - aiDisplay index\n         *  @type function\n         */\n        \"fnDisplayEnd\": function ()\n        {\n            var\n                len      = this._iDisplayLength,\n                start    = this._iDisplayStart,\n                calc     = start + len,\n                records  = this.aiDisplay.length,\n                features = this.oFeatures,\n                paginate = features.bPaginate;\n            if ( features.bServerSide ) {\n                return paginate === false || len === -1 ?\n                    start + records :\n                    Math.min( start+len, this._iRecordsDisplay );\n            }\n            else {\n                return ! paginate || calc>records || len===-1 ?\n                    records :\n                    calc;\n            }\n        },\n        /**\n         * The DataTables object for this table\n         *  @type object\n         *  @default null\n         */\n        \"oInstance\": null,\n        /**\n         * Unique identifier for each instance of the DataTables object. If there\n         * is an ID on the table node, then it takes that value, otherwise an\n         * incrementing internal counter is used.\n         *  @type string\n         *  @default null\n         */\n        \"sInstance\": null,\n        /**\n         * tabindex attribute value that is added to DataTables control elements, allowing\n         * keyboard navigation of the table and its controls.\n         */\n        \"iTabIndex\": 0,\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollHead\": null,\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollFoot\": null,\n        /**\n         * Last applied sort\n         *  @type array\n         *  @default []\n         */\n        \"aLastSort\": [],\n        /**\n         * Stored plug-in instances\n         *  @type object\n         *  @default {}\n         */\n        \"oPlugins\": {},\n        /**\n         * Function used to get a row's id from the row's data\n         *  @type function\n         *  @default null\n         */\n        \"rowIdFn\": null,\n        /**\n         * Data location where to store a row's id\n         *  @type string\n         *  @default null\n         */\n        \"rowId\": null\n    };\n    /**\n     * Extension object for DataTables that is used to provide all extension\n     * options.\n     * Note that the `DataTable.ext` object is available through\n     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n     *  @namespace\n     *  @extends DataTable.models.ext\n     */\n    /**\n     * DataTables extensions\n     * This namespace acts as a collection area for plug-ins that can be used to\n     * extend DataTables capabilities. Indeed many of the build in methods\n     * use this method to provide their own capabilities (sorting methods for\n     * example).\n     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n     * reasons\n     *  @namespace\n     */\n    DataTable.ext = _ext = {\n        /**\n         * Buttons. For use with the Buttons extension for DataTables. This is\n         * defined here so other extensions can define buttons regardless of load\n         * order. It is _not_ used by DataTables core.\n         *  @type object\n         *  @default {}\n         */\n        buttons: {},\n        /**\n         * Element class names\n         *  @type object\n         *  @default {}\n         */\n        classes: {},\n        /**\n         * DataTables build type (expanded by the download builder)\n         *  @type string\n         */\n        builder: \"-source-\",\n        /**\n         * Error reporting.\n         * How should DataTables report an error. Can take the value 'alert',\n         * 'throw', 'none' or a function.\n         *  @type string|function\n         *  @default alert\n         */\n        errMode: \"alert\",\n        /**\n         * Feature plug-ins.\n         * This is an array of objects which describe the feature plug-ins that are\n         * available to DataTables. These feature plug-ins are then available for\n         * use through the `dom` initialisation option.\n         * Each feature plug-in is described by an object which must have the\n         * following properties:\n         * * `fnInit` - function that is used to initialise the plug-in,\n         * * `cFeature` - a character so the feature can be enabled by the `dom`\n         *   instillation option. This is case sensitive.\n         * The `fnInit` function has the following input parameters:\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * And the following return is expected:\n         * * {node|null} The element which contains your feature. Note that the\n         *   return may also be void if your plug-in does not require to inject any\n         *   DOM elements into DataTables control (`dom`) - for example this might\n         *   be useful when developing a plug-in which allows table control via\n         *   keyboard entry\n         *  @type array\n         *  @example\n         *    $.fn.dataTable.ext.features.push( {\n         *      \"fnInit\": function( oSettings ) {\n         *        return new TableTools( { \"oDTSettings\": oSettings } );\n         *      },\n         *      \"cFeature\": \"T\"\n         *    } );\n         */\n        feature: [],\n        /**\n         * Row searching.\n         * This method of searching is complimentary to the default type based\n         * searching, and a lot more comprehensive as it allows you complete control\n         * over the searching logic. Each element in this array is a function\n         * (parameters described below) that is called for every row in the table,\n         * and your logic decides if it should be included in the searching data set\n         * or not.\n         *\n         * Searching functions have the following input parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{array|object}` Data for the row to be processed (same as the\n         *    original format that was passed in as the data source, or an array\n         *    from a DOM data source\n         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n         *    can be useful to retrieve the `TR` element if you need DOM interaction.\n         *\n         * And the following return is expected:\n         *\n         * * {boolean} Include the row in the searched result set (true) or not\n         *   (false)\n         *\n         * Note that as with the main search ability in DataTables, technically this\n         * is \"filtering\", since it is subtractive. However, for consistency in\n         * naming we call it searching here.\n         *\n         *  @type array\n         *  @default []\n         *  @example\n         *    // The following example shows custom search being applied to the\n         *    // fourth column (i.e. the data[3] index) based on two input values\n         *    // from the end-user, matching the data in a certain range.\n         *    $.fn.dataTable.ext.search.push(\n         *      function( settings, data, dataIndex ) {\n         *        var min = document.getElementById('min').value * 1;\n         *        var max = document.getElementById('max').value * 1;\n         *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n         *\n         *        if ( min == \"\" && max == \"\" ) {\n         *          return true;\n         *        }\n         *        else if ( min == \"\" && version < max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && \"\" == max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && version < max ) {\n         *          return true;\n         *        }\n         *        return false;\n         *      }\n         *    );\n         */\n        search: [],\n        /**\n         * Selector extensions\n         *\n         * The `selector` option can be used to extend the options available for the\n         * selector modifier options (`selector-modifier` object data type) that\n         * each of the three built in selector types offer (row, column and cell +\n         * their plural counterparts). For example the Select extension uses this\n         * mechanism to provide an option to select only rows, columns and cells\n         * that have been marked as selected by the end user (`{selected: true}`),\n         * which can be used in conjunction with the existing built in selector\n         * options.\n         *\n         * Each property is an array to which functions can be pushed. The functions\n         * take three attributes:\n         *\n         * * Settings object for the host table\n         * * Options object (`selector-modifier` object type)\n         * * Array of selected item indexes\n         * The return is an array of the resulting item indexes after the custom\n         * selector has been applied.\n         *  @type object\n         */\n        selector: {\n            cell: [],\n            column: [],\n            row: []\n        },\n        /**\n         * Internal functions, exposed for used in plug-ins.\n         * Please note that you should not need to use the internal methods for\n         * anything other than a plug-in (and even then, try to avoid if possible).\n         * The internal function may change between releases.\n         *\n         *  @type object\n         *  @default {}\n         */\n        internal: {},\n        /**\n         * Legacy configuration options. Enable and disable legacy options that\n         * are available in DataTables.\n         *\n         *  @type object\n         */\n        legacy: {\n            /**\n             * Enable / disable DataTables 1.9 compatible server-side processing\n             * requests\n             *\n             *  @type boolean\n             *  @default null\n             */\n            ajax: null\n        },\n        /**\n         * Pagination plug-in methods.\n         * Each entry in this object is a function and defines which buttons should\n         * be shown by the pagination rendering method that is used for the table:\n         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n         * buttons are displayed in the document, while the functions here tell it\n         * what buttons to display. This is done by returning an array of button\n         * descriptions (what each button will do).\n         *\n         * Pagination types (the four built in options and any additional plug-in\n         * options defined here) can be used through the `paginationType`\n         * initialisation parameter.\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{int} page` The current page index\n         * 2. `{int} pages` The number of pages in the table\n         *\n         * Each function is expected to return an array where each element of the\n         * array can be one of:\n         *\n         * * `first` - Jump to first page when activated\n         * * `last` - Jump to last page when activated\n         * * `previous` - Show previous page when activated\n         * * `next` - Show next page when activated\n         * * `{int}` - Show page of the index given\n         * * `{array}` - A nested array containing the above elements to add a\n         *   containing 'DIV' element (might be useful for styling).\n         *\n         * Note that DataTables v1.9- used this object slightly differently whereby\n         * an object with two functions would be defined for each plug-in. That\n         * ability is still supported by DataTables 1.10+ to provide backwards\n         * compatibility, but this option of use is now decremented and no longer\n         * documented in DataTables 1.10+.\n         *\n         *  @type object\n         *  @default {}\n         *\n         *  @example\n         *    // Show previous, next and current page buttons only\n         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n         *      return [ 'previous', page, 'next' ];\n         *    };\n         */\n        pager: {},\n        renderer: {\n            pageButton: {},\n            header: {}\n        },\n        /**\n         * Ordering plug-ins - custom data source\n         * The extension options for ordering of data available here is complimentary\n         * to the default type based ordering that DataTables typically uses. It\n         * allows much greater control over the the data that is being used to\n         * order a column, but is necessarily therefore more complex.\n         * This type of ordering is useful if you want to do ordering based on data\n         * live from the DOM (for example the contents of an 'input' element) rather\n         * than just the static string that DataTables knows of.\n         * The way these plug-ins work is that you create an array of the values you\n         * wish to be ordering for the column in question and then return that\n         * array. The data in the array much be in the index order of the rows in\n         * the table (not the currently ordering order!). Which order data gathering\n         * function is run here depends on the `dt-init columns.orderDataType`\n         * parameter that is used for the column (if any).\n         * The functions defined take two parameters:\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{int}` Target column index\n         *\n         * Each function is expected to return an array:\n         *\n         * * `{array}` Data for the column to be ordering upon\n         *\n         *  @type array\n         *\n         *  @example\n         *    // Ordering using `input` node values\n         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n         *    {\n         *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n         *        return $('input', td).val();\n         *      } );\n         *    }\n         */\n        order: {},\n        /**\n         * Type based plug-ins.\n         *\n         * Each column in DataTables has a type assigned to it, either by automatic\n         * detection or by direct assignment using the `type` option for the column.\n         * The type of a column will effect how it is ordering and search (plug-ins\n         * can also make use of the column type if required).\n         * @namespace\n         */\n        type: {\n            /**\n             * Type detection functions.\n             * The functions defined in this object are used to automatically detect\n             * a column's type, making initialisation of DataTables super easy, even\n             * when complex data is in the table.\n             * The functions defined take two parameters:\n             *\n             *  1. `{*}` Data from the column cell to be analysed\n             *  2. `{settings}` DataTables settings object. This can be used to\n             *     perform context specific type detection - for example detection\n             *     based on language settings such as using a comma for a decimal\n             *     place. Generally speaking the options from the settings will not\n             *     be required\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Data type detected, or null if unknown (and thus\n             *   pass it on to the other type detection functions.\n             *\n             *  @type array\n             *\n             *  @example\n             *    // Currency type detection plug-in:\n             *    $.fn.dataTable.ext.type.detect.push(\n             *      function ( data, settings ) {\n             *        // Check the numeric part\n             *        if ( ! $.isNumeric( data.substring(1) ) ) {\n             *          return null;\n             *        }\n             *\n             *        // Check prefixed by currency\n             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n             *          return 'currency';\n             *        }\n             *        return null;\n             *      }\n             *    );\n             */\n            detect: [],\n            /**\n             * Type based search formatting.\n             * The type based searching functions can be used to pre-format the\n             * data to be search on. For example, it can be used to strip HTML\n             * tags or to de-format telephone numbers for numeric only searching.\n             * Note that is a search is not defined for a column of a given type,\n             * no search formatting will be performed.\n             * Pre-processing of searching data plug-ins - When you assign the sType\n             * for a column (or have it automatically detected for you by DataTables\n             * or a type detection plug-in), you will typically be using this for\n             * custom sorting, but it can also be used to provide custom searching\n             * by allowing you to pre-processing the data and returning the data in\n             * the format that should be searched upon. This is done by adding\n             * functions this object with a parameter name which matches the sType\n             * for that target column. This is the corollary of <i>afnSortData</i>\n             * for searching data.\n             *\n             * The functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for searching\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Formatted string that will be used for the searching.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n             *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n             *    }\n             */\n            search: {},\n            /**\n             * Type based ordering.\n             *\n             * The column type tells DataTables what ordering to apply to the table\n             * when a column is sorted upon. The order for each type that is defined,\n             * is defined by the functions available in this object.\n             *\n             * Each ordering option can be described by three properties added to\n             * this object:\n             *\n             * * `{type}-pre` - Pre-formatting function\n             * * `{type}-asc` - Ascending order function\n             * * `{type}-desc` - Descending order function\n             *\n             * All three can be used together, only `{type}-pre` or only\n             * `{type}-asc` and `{type}-desc` together. It is generally recommended\n             * that only `{type}-pre` is used, as this provides the optimal\n             * implementation in terms of speed, although the others are provided\n             * for compatibility with existing Javascript sort functions.\n             *\n             * `{type}-pre`: Functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for ordering\n             *\n             * And return:\n             *\n             * * `{*}` Data to be sorted upon\n             *\n             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n             * functions, taking two parameters:\n             *  1. `{*}` Data to compare to the second parameter\n             *  2. `{*}` Data to compare to the first parameter\n             * And returning:\n             * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n             *   than the second parameter, ===0 if the two parameters are equal and\n             *   >0 if the first parameter should be sorted height than the second\n             *   parameter.\n             *  @type object\n             *  @default {}\n             *  @example\n             *    // Numeric ordering of formatted numbers with a pre-formatter\n             *    $.extend( $.fn.dataTable.ext.type.order, {\n             *      \"string-pre\": function(x) {\n             *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n             *        return parseFloat( a );\n             *      }\n             *    } );\n             *  @example\n             *    // Case-sensitive string ordering, with no pre-formatting method\n             *    $.extend( $.fn.dataTable.ext.order, {\n             *      \"string-case-asc\": function(x,y) {\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n             *      },\n             *      \"string-case-desc\": function(x,y) {\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n             *      }\n             *    } );\n             */\n            order: {}\n        },\n        /**\n         * Unique DataTables instance counter\n         *\n         * @type int\n         * @private\n         */\n        _unique: 0,\n        // Depreciated\n        // The following properties are retained for backwards compatiblity only.\n        // The should not be used in new projects and will be removed in a future\n        // version\n        /**\n         * Version check function.\n         *  @type function\n         *  @depreciated Since 1.10\n         */\n        fnVersionCheck: DataTable.fnVersionCheck,\n        /**\n         * Index for what 'this' index API functions should use\n         *  @type int\n         *  @deprecated Since v1.10\n         */\n        iApiIndex: 0,\n        /**\n         * jQuery UI class container\n         *  @type object\n         *  @deprecated Since v1.10\n         */\n        oJUIClasses: {},\n        /**\n         * Software version\n         *  @type string\n         *  @deprecated Since v1.10\n         */\n        sVersion: DataTable.version\n    };\n    //\n    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n    //\n    $.extend( _ext, {\n        afnFiltering: _ext.search,\n        aTypes:       _ext.type.detect,\n        ofnSearch:    _ext.type.search,\n        oSort:        _ext.type.order,\n        afnSortData:  _ext.order,\n        aoFeatures:   _ext.feature,\n        oApi:         _ext.internal,\n        oStdClasses:  _ext.classes,\n        oPagination:  _ext.pager\n    } );\n    $.extend( DataTable.ext.classes, {\n        \"sTable\": \"dataTable\",\n        \"sNoFooter\": \"no-footer\",\n        /* Paging buttons */\n        \"sPageButton\": \"paginate_button\",\n        \"sPageButtonActive\": \"current\",\n        \"sPageButtonDisabled\": \"disabled\",\n        /* Striping classes */\n        \"sStripeOdd\": \"odd\",\n        \"sStripeEven\": \"even\",\n        /* Empty row */\n        \"sRowEmpty\": \"dataTables_empty\",\n        /* Features */\n        \"sWrapper\": \"dataTables_wrapper\",\n        \"sFilter\": \"dataTables_filter\",\n        \"sInfo\": \"dataTables_info\",\n        \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n        \"sLength\": \"dataTables_length\",\n        \"sProcessing\": \"dataTables_processing\",\n        /* Sorting */\n        \"sSortAsc\": \"sorting_asc\",\n        \"sSortDesc\": \"sorting_desc\",\n        \"sSortable\": \"sorting\", /* Sortable in both directions */\n        \"sSortableAsc\": \"sorting_asc_disabled\",\n        \"sSortableDesc\": \"sorting_desc_disabled\",\n        \"sSortableNone\": \"sorting_disabled\",\n        \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n        /* Filtering */\n        \"sFilterInput\": \"\",\n        /* Page length */\n        \"sLengthSelect\": \"\",\n        /* Scrolling */\n        \"sScrollWrapper\": \"dataTables_scroll\",\n        \"sScrollHead\": \"dataTables_scrollHead\",\n        \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n        \"sScrollBody\": \"dataTables_scrollBody\",\n        \"sScrollFoot\": \"dataTables_scrollFoot\",\n        \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n        /* Misc */\n        \"sHeaderTH\": \"\",\n        \"sFooterTH\": \"\",\n        // Deprecated\n        \"sSortJUIAsc\": \"\",\n        \"sSortJUIDesc\": \"\",\n        \"sSortJUI\": \"\",\n        \"sSortJUIAscAllowed\": \"\",\n        \"sSortJUIDescAllowed\": \"\",\n        \"sSortJUIWrapper\": \"\",\n        \"sSortIcon\": \"\",\n        \"sJUIHeader\": \"\",\n        \"sJUIFooter\": \"\"\n    } );\n    (function() {\n    // Reused strings for better compression. Closure compiler appears to have a\n    // weird edge case where it is trying to expand strings rather than use the\n    // variable version. This results in about 200 bytes being added, for very\n    // little preference benefit since it this run on script load only.\n    var _empty = '';\n    _empty = '';\n    var _stateDefault = _empty + 'ui-state-default';\n    var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\n    var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\n    $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\n        /* Full numbers paging buttons */\n        \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\n        \"sPageButtonActive\":   \"ui-state-disabled\",\n        \"sPageButtonDisabled\": \"ui-state-disabled\",\n        /* Features */\n        \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\n            \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n        /* Sorting */\n        \"sSortAsc\":            _stateDefault+\" sorting_asc\",\n        \"sSortDesc\":           _stateDefault+\" sorting_desc\",\n        \"sSortable\":           _stateDefault+\" sorting\",\n        \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\n        \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\n        \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\n        \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\n        \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\n        \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\n        \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\n        \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\n        \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\n        \"sSortIcon\":           \"DataTables_sort_icon\",\n        /* Scrolling */\n        \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\n        \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\n        /* Misc */\n        \"sHeaderTH\":  _stateDefault,\n        \"sFooterTH\":  _stateDefault,\n        \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\n        \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\n    } );\n    }());\n    var extPagination = DataTable.ext.pager;\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {page} page dataTables settings object\n     *  @param {pages} pages Name of the array storage for the callbacks in\n     *      oSettings\n     */\n    function _numbers ( page, pages ) {\n        var\n            numbers = [],\n            buttons = extPagination.numbers_length,\n            half = Math.floor( buttons / 2 );\n        if ( pages <= buttons ) {\n            numbers = _range( 0, pages );\n        }\n        else if ( page <= half ) {\n            numbers = _range( 0, buttons-2 );\n            numbers.push( 'ellipsis' );\n            numbers.push( pages-1 );\n        }\n        else if ( page >= pages - 1 - half ) {\n            numbers = _range( pages-(buttons-2), pages );\n            numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n            numbers.splice( 0, 0, 0 );\n        }\n        else {\n            numbers = _range( page-half+2, page+half-1 );\n            numbers.push( 'ellipsis' );\n            numbers.push( pages-1 );\n            numbers.splice( 0, 0, 'ellipsis' );\n            numbers.splice( 0, 0, 0 );\n        }\n        numbers.DT_el = 'span';\n        return numbers;\n    }\n    $.extend( extPagination, {\n        // simple: function ( page, pages ) {\n        //     return [ 'previous', 'next' ];\n        // },\n        full: function () {\n            return [  'first', 'previous', 'next', 'last' ];\n        },\n        numbers: function ( page, pages ) {\n            return [ _numbers(page, pages) ];\n        },\n        simple_numbers: function ( page, pages ) {\n            return [ 'previous', _numbers(page, pages), 'next' ];\n        },\n        full_numbers: function ( page, pages ) {\n            return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n        },\n        first_last_numbers: function (page, pages) {\n            return ['first', _numbers(page, pages), 'last'];\n        },\n        // For testing and plug-ins to use\n        _numbers: _numbers,\n        // Number of number buttons (including ellipsis) to show. _Must be odd!_\n        numbers_length: 7\n    } );\n    $.extend( true, DataTable.ext.renderer, {\n        pageButton: {\n            _: function ( settings, host, idx, buttons, page, pages ) {\n                var classes = settings.oClasses;\n                var lang = settings.oLanguage.oPaginate;\n                var aria = settings.oLanguage.oAria.paginate || {};\n                var btnDisplay, btnClass, counter=0;\n                var attach = function( container, buttons ) {\n                    var i, ien, node, button;\n                    var clickHandler = function ( e ) {\n                        _fnPageChange( settings, e.data.action, true );\n                    };\n                    for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n                        button = buttons[i];\n                        if ( $.isArray( button ) ) {\n                            var inner = $( '<'+(button.DT_el || 'div')+'/>' )\n                                .appendTo( container );\n                            attach( inner, button );\n                        }\n                        else {\n                            btnDisplay = null;\n                            btnClass = '';\n                            switch ( button ) {\n                                case 'ellipsis':\n                                    container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                                    break;\n                                case 'first':\n                                    btnDisplay = lang.sFirst;\n                                    btnClass = button + (page > 0 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                case 'previous':\n                                    btnDisplay = lang.sPrevious;\n                                    btnClass = button + (page > 0 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                case 'next':\n                                    btnDisplay = lang.sNext;\n                                    btnClass = button + (page < pages-1 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                case 'last':\n                                    btnDisplay = lang.sLast;\n                                    btnClass = button + (page < pages-1 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                default:\n                                    btnDisplay = button + 1;\n                                    btnClass = page === button ?\n                                        classes.sPageButtonActive : '';\n                                    break;\n                            }\n                            if ( btnDisplay !== null ) {\n                                node = $('<a>', {\n                                        'class': classes.sPageButton+' '+btnClass,\n                                        'aria-controls': settings.sTableId,\n                                        'aria-label': aria[button],\n                                        'data-dt-idx': counter,\n                                        'tabindex': settings.iTabIndex,\n                                        'id': idx === 0 && typeof button === 'string' ?\n                                            settings.sTableId +'_'+ button :\n                                            null\n                                    } )\n                                    .html( btnDisplay )\n                                    .appendTo( container );\n                                _fnBindAction(\n                                    node, {action: button}, clickHandler\n                                );\n                                counter++;\n                            }\n                        }\n                    }\n                };\n                // IE9 throws an 'unknown error' if document.activeElement is used\n                // inside an iframe or frame. Try / catch the error. Not good for\n                // accessibility, but neither are frames.\n                var activeEl;\n                try {\n                    // Because this approach is destroying and recreating the paging\n                    // elements, focus is lost on the select button which is bad for\n                    // accessibility. So we want to restore focus once the draw has\n                    // completed\n                    activeEl = $(host).find(document.activeElement).data('dt-idx');\n                }\n                catch (e) {}\n                attach( $(host).empty(), buttons );\n                if ( activeEl !== undefined ) {\n                    $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n                }\n            }\n        }\n    } );\n    // Built in type detection. See model.ext.aTypes for information about\n    // what is required from this methods.\n    $.extend( DataTable.ext.type.detect, [\n        // Plain numbers - first since V8 detects some plain numbers as dates\n        // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber( d, decimal ) ? 'num'+decimal : null;\n        },\n        // Dates (only those recognised by the browser's Date.parse)\n        function ( d )\n        {\n            // V8 tries _very_ hard to make a string passed into `Date.parse()`\n            // valid, so we need to use a regex to restrict date formats. Use a\n            // plug-in for anything other than ISO8601 style strings\n            if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\n                return null;\n            }\n            var parsed = Date.parse(d);\n            return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n        },\n        // Formatted numbers\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n        },\n        // HTML numeric\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n        },\n        // HTML numeric, formatted\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n        },\n        // HTML (this is strict checking - there must be html)\n        function ( d )\n        {\n            return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n                'html' : null;\n        }\n    ] );\n    // Filter formatting functions. See model.ext.ofnSearch for information about\n    // what is required from these methods.\n    // Note that additional search methods are added for the html numbers and\n    // html formatted numbers by `_addNumericSort()` when we know what the decimal\n    // place is\n    $.extend( DataTable.ext.type.search, {\n        html: function ( data ) {\n            return _empty(data) ?\n                data :\n                typeof data === 'string' ?\n                    data\n                        .replace( _re_new_lines, \" \" )\n                        .replace( _re_html, \"\" ) :\n                    '';\n        },\n        string: function ( data ) {\n            return _empty(data) ?\n                data :\n                typeof data === 'string' ?\n                    data.replace( _re_new_lines, \" \" ) :\n                    data;\n        }\n    } );\n    var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n        if ( d !== 0 && (!d || d === '-') ) {\n            return -Infinity;\n        }\n        // If a decimal place other than `.` is used, it needs to be given to the\n        // function so we can detect it and replace with a `.` which is the only\n        // decimal place Javascript recognises - it is not locale aware.\n        if ( decimalPlace ) {\n            d = _numToDecimal( d, decimalPlace );\n        }\n        if ( d.replace ) {\n            if ( re1 ) {\n                d = d.replace( re1, '' );\n            }\n            if ( re2 ) {\n                d = d.replace( re2, '' );\n            }\n        }\n        return d * 1;\n    };\n    // Add the numeric 'deformatting' functions for sorting and search. This is done\n    // in a function to provide an easy ability for the language options to add\n    // additional methods if a non-period decimal place is used.\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {decimalPlace} decimalPlace dataTables settings object\n     */\n    function _addNumericSort ( decimalPlace ) {\n        $.each(\n            {\n                // Plain numbers\n                \"num\": function ( d ) {\n                    return __numericReplace( d, decimalPlace );\n                },\n                // Formatted numbers\n                \"num-fmt\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_formatted_numeric );\n                },\n                // HTML numeric\n                \"html-num\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_html );\n                },\n                // HTML numeric, formatted\n                \"html-num-fmt\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n                }\n            },\n            function ( key, fn ) {\n                // Add the ordering method\n                _ext.type.order[key+decimalPlace+'-pre'] = fn;\n                // For HTML types add a search formatter that will strip the HTML\n                if ( key.match(/^html\\-/) ) {\n                    _ext.type.search[key+decimalPlace] = _ext.type.search.html;\n                }\n            }\n        );\n    }\n    // Default sort methods\n    $.extend( _ext.type.order, {\n        // Dates\n        \"date-pre\": function ( d ) {\n            return Date.parse( d ) || -Infinity;\n        },\n        // html\n        \"html-pre\": function ( a ) {\n            return _empty(a) ?\n                '' :\n                a.replace ?\n                    a.replace( /<.*?>/g, \"\" ).toLowerCase() :\n                    a+'';\n        },\n        // string\n        \"string-pre\": function ( a ) {\n            // This is a little complex, but faster than always calling toString,\n            // http://jsperf.com/tostring-v-check\n            return _empty(a) ?\n                '' :\n                typeof a === 'string' ?\n                    a.toLowerCase() :\n                    ! a.toString ?\n                        '' :\n                        a.toString();\n        },\n        // string-asc and -desc are retained only for compatibility with the old\n        // sort methods\n        \"string-asc\": function ( x, y ) {\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        },\n        \"string-desc\": function ( x, y ) {\n            return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n        }\n    } );\n    // Numeric sorting types - order doesn't matter here\n    _addNumericSort( '' );\n    $.extend( true, DataTable.ext.renderer, {\n        header: {\n            _: function ( settings, cell, column, classes ) {\n                // No additional mark-up required\n                // Attach a sort listener to update on sort - note that using the\n                // `DT` namespace will allow the event to be removed automatically\n                // on destroy, while the `dt` namespaced event is the one we are\n                // listening for\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n                    if ( settings !== ctx ) { // need to check this this is the host\n                        return;               // table, not a nested one\n                    }\n                    var colIdx = column.idx;\n                    cell\n                        .removeClass(\n                            column.sSortingClass +' '+\n                            classes.sSortAsc +' '+\n                            classes.sSortDesc\n                        )\n                        .addClass( columns[colIdx] == 'asc' ?\n                            classes.sSortAsc : columns[colIdx] == 'desc' ?\n                                classes.sSortDesc :\n                                column.sSortingClass\n                        );\n                } );\n            },\n            jqueryui: function ( settings, cell, column, classes ) {\n                $('<div/>')\n                    .addClass( classes.sSortJUIWrapper )\n                    .append( cell.contents() )\n                    .append( $('<span/>')\n                        .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n                    )\n                    .appendTo( cell );\n                // Attach a sort listener to update on sort\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n                    if ( settings !== ctx ) {\n                        return;\n                    }\n                    var colIdx = column.idx;\n                    cell\n                        .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n                        .addClass( columns[colIdx] == 'asc' ?\n                            classes.sSortAsc : columns[colIdx] == 'desc' ?\n                                classes.sSortDesc :\n                                column.sSortingClass\n                        );\n                    cell\n                        .find( 'span.'+classes.sSortIcon )\n                        .removeClass(\n                            classes.sSortJUIAsc +\" \"+\n                            classes.sSortJUIDesc +\" \"+\n                            classes.sSortJUI +\" \"+\n                            classes.sSortJUIAscAllowed +\" \"+\n                            classes.sSortJUIDescAllowed\n                        )\n                        .addClass( columns[colIdx] == 'asc' ?\n                            classes.sSortJUIAsc : columns[colIdx] == 'desc' ?\n                                classes.sSortJUIDesc :\n                                column.sSortingClassJUI\n                        );\n                } );\n            }\n        }\n    } );\n    /*\n     * Public helper functions. These aren't used internally by DataTables, or\n     * called by any of the options passed into DataTables, but they can be used\n     * externally by developers working with DataTables. They are helper functions\n     * to make working with DataTables a little bit easier.\n     */\n    var __htmlEscapeEntities = function ( d ) {\n        return typeof d === 'string' ?\n            d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') :\n            d;\n    };\n    /**\n     * Helpers for `columns.render`.\n     *\n     * The options defined here can be used with the `columns.render` initialisation\n     * option to provide a display renderer. The following functions are defined:\n     *\n     * * `number` - Will format numeric data (defined by `columns.data`) for\n     *   display, retaining the original unformatted data for sorting and filtering.\n     *   It takes 5 parameters:\n     *   * `string` - Thousands grouping separator\n     *   * `string` - Decimal point indicator\n     *   * `integer` - Number of decimal points to show\n     *   * `string` (optional) - Prefix.\n     *   * `string` (optional) - Postfix (/suffix).\n     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n     *   parameters.\n     *\n     * @example\n     *   // Column definition using the number renderer\n     *   {\n     *     data: \"salary\",\n     *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n     *   }\n     *\n     * @namespace\n     */\n    DataTable.render = {\n        number: function ( thousands, decimal, precision, prefix, postfix ) {\n            return {\n                display: function ( d ) {\n                    if ( typeof d !== 'number' && typeof d !== 'string' ) {\n                        return d;\n                    }\n                    var negative = d < 0 ? '-' : '';\n                    var flo = parseFloat( d );\n                    // If NaN then there isn't much formatting that we can do - just\n                    // return immediately, escaping any HTML (this was supposed to\n                    // be a number after all)\n                    if ( isNaN( flo ) ) {\n                        return __htmlEscapeEntities( d );\n                    }\n                    flo = flo.toFixed( precision );\n                    d = Math.abs( flo );\n                    var intPart = parseInt( d, 10 );\n                    var floatPart = precision ?\n                        decimal+(d - intPart).toFixed( precision ).substring( 2 ):\n                        '';\n                    return negative + (prefix||'') +\n                        intPart.toString().replace(\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\n                        ) +\n                        floatPart +\n                        (postfix||'');\n                }\n            };\n        },\n        text: function () {\n            return {\n                display: __htmlEscapeEntities\n            };\n        }\n    };\n    /**\n     * Create a wrapper function for exporting an internal functions to an external API.\n     *  @param {string} fn API function name\n     *  @returns {function} wrapped function\n     *  @memberof DataTable#internal\n     */\n    function _fnExternApiFunc (fn)\n    {\n        return function() {\n            var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n                Array.prototype.slice.call(arguments)\n            );\n            return DataTable.ext.internal[fn].apply( this, args );\n        };\n    }\n    /**\n     * Reference to internal functions for use by plug-in developers. Note that\n     * these methods are references to internal functions and are considered to be\n     * private. If you use these methods, be aware that they are liable to change\n     * between versions.\n     *  @namespace\n     */\n    $.extend( DataTable.ext.internal, {\n        _fnExternApiFunc: _fnExternApiFunc,\n        _fnBuildAjax: _fnBuildAjax,\n        _fnAjaxUpdate: _fnAjaxUpdate,\n        _fnAjaxParameters: _fnAjaxParameters,\n        _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n        _fnAjaxDataSrc: _fnAjaxDataSrc,\n        _fnAddColumn: _fnAddColumn,\n        _fnColumnOptions: _fnColumnOptions,\n        _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n        _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n        _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n        _fnVisbleColumns: _fnVisbleColumns,\n        _fnGetColumns: _fnGetColumns,\n        _fnColumnTypes: _fnColumnTypes,\n        _fnApplyColumnDefs: _fnApplyColumnDefs,\n        _fnHungarianMap: _fnHungarianMap,\n        _fnCamelToHungarian: _fnCamelToHungarian,\n        _fnLanguageCompat: _fnLanguageCompat,\n        _fnBrowserDetect: _fnBrowserDetect,\n        _fnAddData: _fnAddData,\n        _fnAddTr: _fnAddTr,\n        _fnNodeToDataIndex: _fnNodeToDataIndex,\n        _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n        _fnGetCellData: _fnGetCellData,\n        _fnSetCellData: _fnSetCellData,\n        _fnSplitObjNotation: _fnSplitObjNotation,\n        _fnGetObjectDataFn: _fnGetObjectDataFn,\n        _fnSetObjectDataFn: _fnSetObjectDataFn,\n        _fnGetDataMaster: _fnGetDataMaster,\n        _fnClearTable: _fnClearTable,\n        _fnDeleteIndex: _fnDeleteIndex,\n        _fnInvalidate: _fnInvalidate,\n        _fnGetRowElements: _fnGetRowElements,\n        _fnCreateTr: _fnCreateTr,\n        _fnBuildHead: _fnBuildHead,\n        _fnDrawHead: _fnDrawHead,\n        _fnDraw: _fnDraw,\n        _fnReDraw: _fnReDraw,\n        _fnAddOptionsHtml: _fnAddOptionsHtml,\n        _fnDetectHeader: _fnDetectHeader,\n        _fnGetUniqueThs: _fnGetUniqueThs,\n        _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n        _fnFilterComplete: _fnFilterComplete,\n        _fnFilterCustom: _fnFilterCustom,\n        _fnFilterColumn: _fnFilterColumn,\n        _fnFilter: _fnFilter,\n        _fnFilterCreateSearch: _fnFilterCreateSearch,\n        _fnEscapeRegex: _fnEscapeRegex,\n        _fnFilterData: _fnFilterData,\n        _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n        _fnUpdateInfo: _fnUpdateInfo,\n        _fnInfoMacros: _fnInfoMacros,\n        _fnInitialise: _fnInitialise,\n        _fnInitComplete: _fnInitComplete,\n        _fnLengthChange: _fnLengthChange,\n        _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n        _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n        _fnPageChange: _fnPageChange,\n        _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n        _fnProcessingDisplay: _fnProcessingDisplay,\n        _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n        _fnScrollDraw: _fnScrollDraw,\n        _fnApplyToChildren: _fnApplyToChildren,\n        _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n        _fnThrottle: _fnThrottle,\n        _fnConvertToWidth: _fnConvertToWidth,\n        _fnGetWidestNode: _fnGetWidestNode,\n        _fnGetMaxLenString: _fnGetMaxLenString,\n        _fnStringToCss: _fnStringToCss,\n        _fnSortFlatten: _fnSortFlatten,\n        _fnSort: _fnSort,\n        _fnSortAria: _fnSortAria,\n        _fnSortListener: _fnSortListener,\n        _fnSortAttachListener: _fnSortAttachListener,\n        _fnSortingClasses: _fnSortingClasses,\n        _fnSortData: _fnSortData,\n        _fnSaveState: _fnSaveState,\n        _fnLoadState: _fnLoadState,\n        _fnSettingsFromNode: _fnSettingsFromNode,\n        _fnLog: _fnLog,\n        _fnMap: _fnMap,\n        _fnBindAction: _fnBindAction,\n        _fnCallbackReg: _fnCallbackReg,\n        _fnCallbackFire: _fnCallbackFire,\n        _fnLengthOverflow: _fnLengthOverflow,\n        _fnRenderer: _fnRenderer,\n        _fnDataSource: _fnDataSource,\n        _fnRowAttributes: _fnRowAttributes,\n        _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n                                        // in 1.10, so this dead-end function is\n                                        // added to prevent errors\n    } );\n    // jQuery access\n    $.fn.dataTable = DataTable;\n    // Provide access to the host jQuery object (circular reference)\n    DataTable.$ = $;\n    // Legacy aliases\n    $.fn.dataTableSettings = DataTable.settings;\n    $.fn.dataTableExt = DataTable.ext;\n    // With a capital `D` we return a DataTables API instance rather than a\n    // jQuery object\n    $.fn.DataTable = function ( opts ) {\n        return $(this).dataTable( opts ).api();\n    };\n    // All properties that are available to $.fn.dataTable should also be\n    // available on $.fn.DataTable\n    $.each( DataTable, function ( prop, val ) {\n        $.fn.DataTable[prop] = val;\n    } );\n    // Information about events fired by DataTables - for documentation.\n    /**\n     * Draw event, fired whenever the table is redrawn on the page, at the same\n     * point as fnDrawCallback. This may be useful for binding events or\n     * performing calculations when the table is altered at all.\n     *  @name DataTable#draw.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Search event, fired when the searching applied to the table (using the\n     * built-in global search, or column filters) is altered.\n     *  @name DataTable#search.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Page change event, fired when the paging of the table is altered.\n     *  @name DataTable#page.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Order event, fired when the ordering applied to the table is altered.\n     *  @name DataTable#order.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * DataTables initialisation complete event, fired when the table is fully\n     * drawn, including Ajax data loaded, if Ajax data is required.\n     *  @name DataTable#init.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The JSON object request from the server - only\n     *    present if client-side Ajax sourced data is used</li></ol>\n     */\n    /**\n     * State save event, fired when the table has changed state a new state save\n     * is required. This event allows modification of the state saving object\n     * prior to actually doing the save, including addition or other state\n     * properties (for plug-ins) or modification of a DataTables core property.\n     *  @name DataTable#stateSaveParams.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The state information to be saved\n     */\n    /**\n     * State load event, fired when the table is loading state from the stored\n     * data, but prior to the settings object being modified by the saved state\n     * - allowing modification of the saved state is required or loading of\n     * state for a plug-in.\n     *  @name DataTable#stateLoadParams.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The saved state information\n     */\n    /**\n     * State loaded event, fired when state has been loaded from stored data and\n     * the settings object has been modified by the loaded data.\n     *  @name DataTable#stateLoaded.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The saved state information\n     */\n    /**\n     * Processing event, fired when DataTables is doing some kind of processing\n     * (be it, order, searcg or anything else). It can be used to indicate to\n     * the end user that there is something happening, or that something has\n     * finished.\n     *  @name DataTable#processing.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n     */\n    /**\n     * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n     * request to made to the server for new data. This event is called before\n     * DataTables processed the returned data, so it can also be used to pre-\n     * process the data returned from the server, if needed.\n     *\n     * Note that this trigger is called in `fnServerData`, if you override\n     * `fnServerData` and which to use this event, you need to trigger it in you\n     * success function.\n     *  @name DataTable#xhr.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {object} json JSON returned from the server\n     *\n     *  @example\n     *     // Use a custom property returned from the server in another DOM element\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n     *       $('#status').html( json.status );\n     *     } );\n     *\n     *  @example\n     *     // Pre-process the data returned from the server\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n     *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n     *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n     *       }\n     *       // Note no return - manipulate the data directly in the JSON object.\n     *     } );\n     */\n    /**\n     * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n     * or passing the bDestroy:true parameter in the initialisation object. This\n     * can be used to remove bound events, added DOM nodes, etc.\n     *  @name DataTable#destroy.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Page length change event, fired when number of records to show on each\n     * page (the length) is changed.\n     *  @name DataTable#length.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {integer} len New length\n     */\n    /**\n     * Column sizing has changed.\n     *  @name DataTable#column-sizing.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Column visibility has changed.\n     *  @name DataTable#column-visibility.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {int} column Column index\n     *  @param {bool} vis `false` if column now hidden, or `true` if visible\n     */\n\n    return $.fn.dataTable;\n}));"],"names":["factory","$","window","document","undefined","_ext","_Api","_api_register","_api_registerPlural","DataTable","options","sSelector","oOpts","this","api","_","rows","data","traditional","_fnSettingsFromNode","iApiIndex","fnAddData","redraw","isArray","isPlainObject","add","row","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","col","type","nodeName","toLowerCase","cell","fnGetNodes","iRow","node","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","length","fn","oApi","internal","ext","_fnExternApiFunc","each","iLen","oInit","_fnExtend","i","sId","getAttribute","bInitHandedOff","defaults","$this","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","_fnLog","sTableId","id","splice","_unique","oSettings","models","style","width","push","dataTable","oLanguage","_fnLanguageCompat","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","bJQueryUI","oJUIClasses","sDom","renderer","header","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","find","eq","inArray","map","el","hasClass","removeClass","join","asDestroyStripes","slice","aoColumnsInit","anThs","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnCallbackFire","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","appendTo","tbody","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","bStateSave","_fnSaveState","_fnLoadState","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_htmlNumeric","html","_isHtml","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","sorted","last","_areAllUnique","j","k","_fnHungarianMap","o","match","newKey","key","indexOf","_hungarianMap","user","force","hungarianKey","charAt","lang","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","sDecimal","_addNumericSort","util","throttle","freq","timer","frequency","that","now","Date","args","arguments","clearTimeout","setTimeout","apply","escapeRegex","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","scrollLeft","height","overflow","append","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","createElement","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","attr","t","mDataProp","sType","_sManualType","className","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","jen","ken","detectedType","cache","types","detect","_fnGetCellData","aoColDefs","aoCols","jLen","kLen","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnSetCellData","__reArray","__reFn","_fnSplitObjNotation","str","mSource","fetchData","arrayNotation","funcNotation","innerSrc","substring","setData","b","aLast","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","anCells","_aSortData","_aFilterData","cols","_fnRowAttributes","contents","tds","td","objectRead","setter","cellProcess","trim","nextSibling","rowNode","nTrIn","nTd","_DT_RowIndex","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","setAttribute","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","anRows","iRowCount","iStripes","oLang","bServerSide","bDrawing","fnRecordsDisplay","iDisplayEnd","fnDisplayEnd","_fnProcessingDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","sRowEmpty","body","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nCell","l","iColShifted","bUnique","nTrs","fnShiftCol","nHeader","aReturn","unique","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","jqXHR","newData","isFunction","baseAjax","sError","sServerMethod","xhr","ret","readyState","oAjaxData","fnServerData","sAjaxSource","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","e","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","fomatters","wasInvalidated","toString","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","_fnInfoMacros","sInfoPostFix","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","buttons","_fnPageChange","action","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooterInner","divFooterTable","tableEl","tableStyle","ie67","dtHeaderCells","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","sInstance","_fnGetMaxLenString","maxIdx","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","state","time","oSavedState","fnStateSaveCallback","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","level","msg","tn","sErrMode","errMode","alert","Error","mappedName","extender","breakRefs","blur","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","trigger","result","host","__apiStruct","__arrayProto","Array","prototype","context","ctxSettings","mixed","jq","tables","_toSettings","selector","opts","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","info","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","sel","selInt","closest","rowObj","__row_selector","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_remove","_details","_detailsShow","__details_display","insertAfter","__details_events","off","drawEvent","_child_obj","klass","addRow","created","colSpan","__details_add","_child_mth","_stateDefault","_sortIcon","_headerFooter","__re_column_selector","__columnData","r1","r2","names","visColumns","jqResult","__column_selector","calc","__setColumnVis","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","set","caseInsen","versionCheck","version","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","get","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","bJUI","sSortIcon","wrapper","sSortJUIWrapper","removedMethod","sDestroyWidth","arg1","arg2","arg3","arg4","token","plural","resolved","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","paginate","min","builder","pageButton","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","extPagination","_numbers","numbers","numbers_length","half","DT_el","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","oPaginate","aria","counter","attach","container","button","clickHandler","sFirst","sPageButtonDisabled","sPrevious","sNext","sLast","sPageButtonActive","sPageButton","empty","focus","parsed","string","__numericReplace","decimalPlace","re1","re2","sSortAsc","sSortDesc","jqueryui","sSortJUIAsc","sSortJUIDesc","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnNodeToDataIndex","_fnNodeToColumnIndex","_fnCalculateEnd","dataTableSettings","dataTableExt","define","amd","exports","module","root","require","jQuery"],"mappings":"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"}