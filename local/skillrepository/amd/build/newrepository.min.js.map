{"version":3,"file":"newrepository.min.js","sources":["../src/newrepository.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_costcenter/costcenter\n * @class      NewCostcenter\n * @package    local_costcenter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewRepository = function(args) {\n        this.contextid = args.contextid;\n        this.repositoryid = args.repositoryid;\n        var self = this;\n        self.init(args);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewRepository.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewRepository.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewRepository.prototype.init = function(args) {\n        console.log(args);\n        //var triggers = $(selector);\n        var self = this;\n        // Fetch the title string.\n        // $('.'+args.selector).click(function(){ \n            // var editid = $(this).data('value');\n            if (args.repositoryid) {\n                // self.repositoryid = editid;\n                var head = Str.get_string('editrepository', 'local_skillrepository');\n            }\n            else {\n               var head = Str.get_string('adnewrepository', 'local_skillrepository');\n            }\n            return head.then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n                // self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n                this.modal.getRoot().addClass('openLMStransition local_skillrepository');\n     \n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 100);\n                }.bind(this));\n                // self.modal.getRoot().on(ModalEvents.hidden, function() {\n                //     self.modal.setBody(self.getBody());\n                // }.bind(this));\n                    self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.hide();\n                        setTimeout(function(){\n                            modal.destroy();\n                        }, 5000);\n                        // modal.destroy();\n                    });\n                }.bind(this));\n                // We want to hide the submit buttons every time it is opened.\n                \n                // self.modal.getRoot().on(ModalEvents.shown, function() {\n                //     self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                // }.bind(this));\n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                self.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                return this.modal;\n            }.bind(this));     \n        // });        \n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewRepository.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {repositoryid:this.repositoryid, jsonformdata: JSON.stringify(formdata)};\n        \n\n        return Fragment.loadFragment('local_skillrepository', 'new_skill_repository_form', this.contextid, params);\n    \n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewRepository.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewRepository.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewRepository.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        \n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_skillrepository_submit_skill_repository_form_form',\n            args: {contextid: this.contextid, jsonformdata: formData},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewRepository.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n \n    return /** @alias module:local_costcenter/newcostcenter */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n          \n            \n            return new NewRepository(args);\n        },\n        load: function(){\n\n        },\n        deleteskill: function(args) {\n            console.log(args);\n            return Str.get_strings([{\n                key: 'confirm'\n            },\n            {\n                key: 'deleteskill',\n                component: 'local_skillrepository',\n                param :args\n            },\n            {\n                key: 'delete',\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    body: s[1]\n                })/*.done(function(modal) {\n                    this.modal = modal;\n                    modal.setSaveButtonText(s[2]);\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        args.confirm = true;\n                        $.ajax({\n                            method: \"POST\",\n                            dataType: \"json\",\n                            url: M.cfg.wwwroot + \"/local/skillrepository/ajax.php?action=\"+args.selector+\"&skillid=\"+args.skillid,\n                            success: function(data){\n                                window.location.reload();\n                            }\n                        });\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));*/\n                .done(function(modal) {\n                    this.modal = modal;\n                    //modal.setSaveButtonText(\"Yes\");\n\n                   modal.setSaveButtonText(Str.get_string('yes_delete', 'local_skillrepository'));\n\n\n                //For cancel button string changed//\n                var value=Str.get_string('cancel', 'local_skillrepository');\n                var button = this.modal.getFooter().find('[data-action=\"cancel\"]');\n                this.modal.asyncSet(value, button.text.bind(button));\n\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        args.confirm = true;\n                        console.log(args);\n                        var params = {};\n                        params.id = args.skillid;\n                        params.contextid = args.contextid;\n                    \n                        var promise = Ajax.call([{\n                            methodname: 'local_skillrepository_delete_skill',\n                            args: params\n                        }]);\n                        promise[0].done(function(resp) {\n                            window.location.href = window.location.href;\n                        }).fail(function(ex) {\n                            // do something with the exception\n                             console.log(ex);\n                        });\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n        nodeleteskill: function (args) {\n        return Str.get_strings([{\n        key: 'reason',\n        component: 'local_skillrepository'\n        },\n        {\n        key: 'deleteskillnotconfirm',\n        component: 'local_skillrepository',\n        param: args\n        }]).then(function (s) {\n        ModalFactory.create({\n         title: s[0],\n         type: ModalFactory.types.DEFAULT,\n         body: s[1],\n        }).done(function (modal) {\n         this.modal = modal;\n         modal.show();\n        }.bind(this));\n        }.bind(this));\n        },\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewRepository","args","contextid","repositoryid","this","init","prototype","modal","console","log","self","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","addClass","on","hidden","animate","setTimeout","destroy","shown","append","getFooter","find","hide","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","setBody","e","preventDefault","formData","serialize","call","methodname","done","fail","submit","load","deleteskill","get_strings","key","component","param","s","setSaveButtonText","value","button","asyncSet","text","confirm","id","skillid","resp","window","href","ex","nodeleteskill","DEFAULT"],"mappings":"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"}