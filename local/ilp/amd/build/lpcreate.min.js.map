{"version":3,"file":"lpcreate.min.js","sources":["../src/lpcreate.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_costcenter/costcenter\n * @class      NewCostcenter\n * @package    local_costcenter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var lpcreate = function(args) {\n        this.contextid = args.contextid;\n        this.planid = args.planid;\n        // this.form_status =args.form_status;\n        this.args = args;\n        var self = this;\n        self.init(args);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    lpcreate.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    lpcreate.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    lpcreate.prototype.init = function(args) {\n        // console.log(args);\n        //var triggers = $(selector);\n        var self = this;\n\n        // Fetch the title string.\n        // $('.'+args.selector).click(function(){\n            \n\n            // var editid = $(this).data('value');\n            // if (editid) {\n                // self.planid = editid;\n                if(self.planid){\n                    console.log(self.planid);\n                    var head = Str.get_string('editilp', 'local_ilp');\n                }\n                else{\n                   var head = Str.get_string('adnewilp', 'local_ilp');\n                }\n                //console.log(self.costcenterid);\n                //alert(self.costcenterid);\n            // }\n            return head.then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody(),\n                    // footer: this.getFooter(),\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n               \n                self.modal.getRoot().addClass('openLMStransition');\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody(self.getBody());\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                    \n                }.bind(this));\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        window.location.href =  window.location.href;\n                });\n                \n                \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', function(form) {\n                    self.submitFormAjax(form, self.args);\n                });\n    \n\n                this.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                $(\".close\").click(function(){\n                    window.location.href =  window.location.href;\n                });\n                return this.modal;\n            }.bind(this));       \n        \n        \n        // });\n        \n    };\n \n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    lpcreate.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // alert(JSON.stringify(formdata));\n        // alert(this.form_status);\n        // alert(this.contextid);\n        // Get the content of the modal.\n        // var params = {planid:this.planid, jsonformdata: JSON.stringify(formdata)};\n        this.args.jsonformdata = JSON.stringify(formdata);\n        return Fragment.loadFragment('local_ilp', 'new_ilp',this.contextid, this.args);\n    };\n \n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    lpcreate.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        window.location.reload();\n    };\n \n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    lpcreate.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    lpcreate.prototype.submitFormAjax = function(e ,args) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n        var self = this;\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // var methodname = args.plugintype + '_' + args.pluginname + '_submit_create_user_form';\n        var methodname = 'local_ilp_submit_ilp_form';\n        var params = {};\n        params.id = this.planid\n        params.contextid = this.contextid;\n        params.jsonformdata = JSON.stringify(formData);\n        params.form_status = args.form_status;\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_ilp_submit_ilp_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    lpcreate.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n    return /** @alias module:local_costcenter/newcostcenter */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function(args) {\n              // console.log(args);\n              //   alert(args.contextid);\n                return new lpcreate(args);\n            },\n            load: function(){\n\n            },\n            deleteConfirm: function(args){\n                // alert('mahesh');\n                // console.log(args);\n                return Str.get_strings([{\n                key: 'confirm'\n                },\n                {\n                key: 'deleteconfirm',\n                component: 'local_ilp',\n                param : args\n                },\n                {\n                key: 'deleteallconfirm',\n                component: 'local_ilp'\n                },\n                {   \n                    key: 'delete'\n                }]).then(function(s) {\n                    ModalFactory.create({\n                        title: s[0],\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: s[1]\n                    }).done(function(modal) {\n                        this.modal = modal;\n                        modal.setSaveButtonText(s[3]);\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            e.preventDefault();\n                            args.confirm = true;\n                            var promise = Ajax.call([{\n                                methodname: 'local_ilp_' + args.action,\n                                args: args\n                            }]);\n                            promise[0].done(function(resp) {\n                                window.location.href = window.location.href;\n                            }).fail(function(ex) {\n                                // do something with the exception\n                                 console.log(ex);\n                            });\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            }, \n            toggleVisible: function(args){\n                return Str.get_strings([{\n                    key: 'confirm'+args.visible,\n                    component: 'local_ilp',\n                },\n                {\n                    key: 'activeconfirm'+args.visible,\n                    component: 'local_ilp',\n                    param : args\n                },\n                {\n                    key: 'ok'\n                }]).then(function(s) {\n                    ModalFactory.create({\n                        title: s[0],\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: s[1]\n                    }).done(function(modal) {\n                        this.modal = modal;\n                        modal.setSaveButtonText(s[2]);\n                        // modal.setCancelButtonText(s[2]);\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            e.preventDefault();\n                            args.confirm = true;\n                            var promise = Ajax.call([{\n                                methodname: 'local_ilp_' + args.action,\n                                args: args\n                            }]);\n                            promise[0].done(function(resp) {\n                                window.location.href = window.location.href;\n                            }).fail(function(ex) {\n                                // do something with the exception\n                                 console.log(ex);\n                            });\n                        }.bind(this));\n                        modal.show();\n                        }.bind(this));\n                }.bind(this));\n            },\n            unassignCourses: function(args){\n                // alert('mahesh');\n                //console.log(args);\n                return Str.get_strings([{\n                key: 'confirm'\n                },\n                {\n                key: 'unassign_courses_confirm',\n                component: 'local_ilp',\n                param : args\n                },\n                {   \n                    key: 'unassign',\n                    component:'local_ilp',\n                }]).then(function(s) {\n                    ModalFactory.create({\n                        title: s[0],\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: s[1]\n                    }).done(function(modal) {\n                        this.modal = modal;\n                        modal.setSaveButtonText(s[2]);\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            e.preventDefault();\n                            params = {};\n                            params.courseid = args.unassigncourseid;\n                            params.planid = args.planid;\n                            var promise = Ajax.call([{\n                                methodname: 'local_ilp_' + args.action,\n                                args: params\n                            }]);\n                            promise[0].done(function(resp) {\n                                window.location.href = window.location.href;\n                            }).fail(function(ex) {\n                                // do something with the exception\n                                 console.log(ex);\n                            });\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            },\n            unassignUsers: function(args){\n                // alert('mahesh');\n                //console.log(args);\n                return Str.get_strings([{\n                key: 'confirm'\n                },\n                {\n                key: 'unassign_users_confirm',\n                component: 'local_ilp',\n                param : args\n                },\n                {   \n                    key: 'unassign',\n                    component:'local_ilp',\n                }]).then(function(s) {\n                    ModalFactory.create({\n                        title: s[0],\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: s[1]\n                    }).done(function(modal) {\n                        this.modal = modal;\n                        modal.setSaveButtonText(s[2]);\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            e.preventDefault();\n                            params = {};\n                            params.userid = args.unassignuserid;\n                            params.planid = args.planid;\n                            var promise = Ajax.call([{\n                                methodname: 'local_ilp_' + args.action,\n                                args: params\n                            }]);\n                            promise[0].done(function(resp) {\n                                window.location.href = window.location.href;\n                            }).fail(function(ex) {\n                                // do something with the exception\n                                 console.log(ex);\n                            });\n                        }.bind(this));\n                        modal.show();\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            },\n        };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","lpcreate","args","contextid","planid","this","init","prototype","modal","self","console","log","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","addClass","setLarge","on","hidden","setBody","animate","setTimeout","destroy","getFooter","find","window","location","href","shown","append","save","submitForm","form","submitFormAjax","show","click","formdata","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","serialize","params","id","form_status","call","methodname","done","fail","submit","load","deleteConfirm","get_strings","key","component","param","s","setSaveButtonText","confirm","action","resp","ex","toggleVisible","visible","unassignCourses","courseid","unassigncourseid","unassignUsers","userid","unassignuserid"],"mappings":"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"}