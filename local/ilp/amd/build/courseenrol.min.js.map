{"version":3,"file":"courseenrol.min.js","sources":["../src/courseenrol.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_costcenter/costcenter\n * @class      courseenrol\n * @package    local_costcenter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'core/yui',\n        'local_ilp/jquery.dataTables'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var courseenrol = function(args) {\n        this.contextid = args.contextid;\n        this.planid = args.planid;\n        this.condition = args.condition;\n        // alert(this.contextid);\n        var self = this;\n        self.init(args.selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    courseenrol.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    courseenrol.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    courseenrol.prototype.init = function(args) {\n        console.log(args);\n        //var triggers = $(selector);\n        var self = this;\n\n        var head =  Str.get_string('enrolcourses', 'local_ilp');\n\n       \n            return head.then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n                \n                // Keep a reference to the modal.\n                self.modal = modal;\n               \n                self.modal.getRoot().addClass('openLMStransition local_costcenter');\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody(self.getBody());\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 1000);\n                    \n                }.bind(this));\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        window.location.href =  window.location.href;\n                });\n                \n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n     \n    \n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n\n                this.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                  $(\".close\").click(function(){\n                    window.location.href =  window.location.href;\n                  });\n                return this.modal;\n            }.bind(this));\n        \n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    courseenrol.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // alert(formdata);\n        // Get the content of the modal.\n        var params = {planid:this.planid, jsonformdata: JSON.stringify(formdata),condition: this.condition};\n        return Fragment.loadFragment('local_ilp', 'lpcourse_enrol', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    courseenrol.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    courseenrol.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n \n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    courseenrol.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n \n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // alert(this.contextid);\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_ilp_lpcourse_enrol_form',\n            args: {planid: this.planid, contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n \n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    courseenrol.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_costcenter/newcostcenter */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n          \n            // alert(args.contextid);\n            return new courseenrol(args);\n        },\n        load: function(){\n\n        },\n        publishilp: function(args){\n            console.log(args);\n            var planvalue = args.planid;\n            return Str.get_strings([{\n                key: 'confirm'\n            },\n            {\n                key: 'ilp_enrol_users',\n                component: 'local_ilp',\n                param :args\n            },\n            {\n                key: 'confirmall',\n                component: 'local_ilp'\n            },\n            {\n                key: 'confirm'\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    body: s[1]\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.setSaveButtonText(s[3]);\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        // args.confirm = true;\n                        $.ajax({\n                            method: \"GET\",\n                            dataType: \"json\",\n                            url: M.cfg.wwwroot + \"/local/ilp/ajax.php?action=publishilp&planid=\"+planvalue,\n                            success: function(data){\n                                modal.destroy();\n                                window.location.href = window.location.href;\n                            }\n                        });\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n        tabsFunction: function(args){\n            // console.log(args);\n            // alert(args.id);\n            return Str.get_strings([{\n                key: 'search',\n                component: 'moodle',\n            }]).then(function(s) {\n\n                $('.ilp_tabs').click(function(){\n                    if ($(this).find('a').hasClass('active')){\n                        return true;\n                    }\n                    var mylink = this;\n                    console.log(mylink);\n                    var ilptab = $(this).data('module');\n                    var id = $(this).data('id');\n                    // console.log(id);\n                    // alert(id);\n                    $.ajax({\n                        method: 'GET',\n                        // dataType: \"json\",\n                        url: M.cfg.wwwroot + '/local/ilp/ajax.php',\n                        data: {\n                            action: \"ilptab\",\n                            tab: ilptab,\n                            id: id\n                        },\n                        success:function(resp){\n                            var html = $.parseJSON(resp);\n                            $('#ilptabscontent').html(html);\n                            $('#ilptabscontent').find('div').addClass('active');\n                            if(ilptab == 'users'){\n                                $(\"table#ilp_users\").dataTable({\n                                    language: {\n                                        \"paginate\": {\n                                            \"next\": \">\",\n                                            \"previous\": \"<\"\n                                        },\n                                        \"search\": \"\",\n                                        \"searchPlaceholder\": s[0]\n                                    }\n                                });\n                            }else if(ilptab == 'requestedusers'){\n                               require(['local_request/requestconfirm'], function(requestconfirm) {\n                                    requestconfirm.requestDatatable();\n                                });\n                            }\n                            // console.log(mylink);\n                        }\n                    });\n                });\n            }.bind(this));\n        },\n        enrolUser : function(args){\n            // console.log(args);\n            // alert('here');\n            var planvalue = args.planid;\n            var userid = args.userid;\n            return Str.get_strings([{\n                key: 'confirm'\n            },\n            {\n                key: 'ilp_self_enrol',\n                component: 'local_ilp',\n                param :args\n            },\n            {\n                key: 'confirm'\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    body: s[1]\n                }).done(function(modal) {\n                    this.modal = modal;\n                    modal.setSaveButtonText(s[2]);\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        // args.confirm = true;\n                        $.ajax({\n                            method: \"GET\",\n                            dataType: \"json\",\n                            url: M.cfg.wwwroot + \"/local/ilp/ajax.php?action=userselfenrol&planid=\"+planvalue+\"&userid=\"+userid,\n                            success: function(data){\n                                modal.destroy();\n                                window.location.href = M.cfg.wwwroot + '/local/ilp/view.php?id='+planvalue;\n                            }\n                        });\n                    }.bind(this));\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","courseenrol","args","contextid","planid","condition","this","init","selector","prototype","modal","console","log","self","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","addClass","setLarge","on","hidden","setBody","animate","setTimeout","destroy","getFooter","find","window","location","href","shown","append","save","submitForm","submitFormAjax","show","click","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","serialize","call","methodname","done","fail","submit","load","publishilp","planvalue","get_strings","key","component","param","s","setSaveButtonText","ajax","method","dataType","url","cfg","wwwroot","success","tabsFunction","hasClass","ilptab","id","action","tab","resp","html","parseJSON","dataTable","language","require","requestconfirm","requestDatatable","enrolUser","userid"],"mappings":"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"}