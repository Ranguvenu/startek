{"version":3,"file":"newroom.min.js","sources":["../src/newroom.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_location/location\n * @class      NewRoom\n * @package    local_location\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewRoom = function(args) {\n        this.contextid = args.contextid;\n\n\n        this.roomid = args.roomid;\n        var self = this;\n        self.init(args.selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewRoom.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewRoom.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewRoom.prototype.init = function(args) {\n        //var triggers = $(selector);\n        var self = this;\n\n\n\n        // Fetch the title string.\n        // $('.'+args.selector).click(function(){\n            return Str.get_strings([{\n                key: 'adnewroom',\n                component: 'local_location'\n            },\n            {\n                key: 'updateroom',\n                component: 'local_location'\n            }\n            ]).then(function(title) {\n                if (self.roomid != 0) {\n                    title[0] = title[1];\n                }\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title[0],\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n\n                // Keep a reference to the modal.\n                self.modal = modal;\n                // self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n                this.modal.getRoot().addClass('openLMStransition');\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 5000);\n                }.bind(this));\n                // self.modal.getRoot().on(ModalEvents.hidden, function() {\n                //     self.modal.setBody(self.getBody());\n                // }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                // self.modal.getRoot().on(ModalEvents.shown, function() {\n                //     self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                // }.bind(this));\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.hide();\n                        setTimeout(function(){\n                            modal.destroy();\n                        }, 5000);\n                    });\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                self.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n                return this.modal;\n            }.bind(this));\n\n\n        // });\n\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewRoom.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {roomid:this.roomid, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('local_location', 'new_roomform', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewRoom.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewRoom.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewRoom.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_location_submit_roomform_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewRoom.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_location/newlocation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new NewRoom(args);\n        },\n        load: function(){\n\n        }\n    };\n});"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewRoom","args","contextid","roomid","this","init","selector","prototype","modal","self","get_strings","key","component","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","addClass","on","hidden","animate","setTimeout","destroy","shown","append","getFooter","find","hide","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","setBody","e","preventDefault","formData","serialize","call","methodname","done","fail","submit","load"],"mappings":";;;;;;;;AAQAA,gCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aAC/F,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAU5DC,QAAU,SAASC,WACdC,UAAYD,KAAKC,eAGjBC,OAASF,KAAKE,OACRC,KACNC,KAAKJ,KAAKK,kBAOnBN,QAAQO,UAAUC,MAAQ,KAM1BR,QAAQO,UAAUL,WAAa,EAS/BF,QAAQO,UAAUF,KAAO,SAASJ,UAE1BQ,KAAOL,YAMAV,IAAIgB,YAAY,CAAC,CACpBC,IAAK,YACLC,UAAW,kBAEf,CACID,IAAK,aACLC,UAAW,oBAEZC,KAAK,SAASC,cACM,GAAfL,KAAKN,SACLW,MAAM,GAAKA,MAAM,IAEdnB,aAAaoB,OAAO,CACvBC,KAAMrB,aAAasB,MAAMC,YACzBJ,MAAOA,MAAM,GACbK,KAAMV,KAAKW,aAEjBC,KAAKZ,OAAOI,KAAK,SAASL,cAGxBC,KAAKD,MAAQA,MAGbC,KAAKD,MAAMc,gBACNd,MAAMe,UAAUC,SAAS,0BAEzBhB,MAAMe,UAAUE,GAAG7B,YAAY8B,OAAQ,gBACnClB,MAAMe,UAAUI,QAAQ,OAAS,QAAS,KAC/CC,YAAW,WACPpB,MAAMqB,YACP,MACLR,KAAKjB,OASPK,KAAKD,MAAMe,UAAUE,GAAG7B,YAAYkC,MAAO,WACvCrB,KAAKD,MAAMe,UAAUQ,OAAO,8EACvBvB,MAAMwB,YAAYC,KAAK,0BAA0BR,GAAG,SAAS,WAC9DjB,MAAM0B,OACNN,YAAW,WACPpB,MAAMqB,YACP,SAETR,KAAKjB,OAKPK,KAAKD,MAAMe,UAAUE,GAAG7B,YAAYuC,KAAM1B,KAAK2B,WAAWf,KAAKZ,OAE/DA,KAAKD,MAAMe,UAAUE,GAAG,SAAU,OAAQhB,KAAK4B,eAAehB,KAAKZ,OACnEA,KAAKD,MAAM8B,YACN9B,MAAMe,UAAUI,QAAQ,OAAS,MAAO,KACtCvB,KAAKI,OACda,KAAKjB,QAYfJ,QAAQO,UAAUa,QAAU,SAASmB,eACT,IAAbA,WACPA,SAAW,QAGXC,OAAS,CAACrC,OAAOC,KAAKD,OAAQsC,aAAcC,KAAKC,UAAUJ,kBACxD1C,SAAS+C,aAAa,iBAAkB,eAAgBxC,KAAKF,UAAWsC,SAQnFxC,QAAQO,UAAUsC,6BAA+B,gBACxCrC,MAAM0B,OAGXnC,EAAE+C,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAE7BC,SAASC,SAASC,UAQtBpD,QAAQO,UAAU8C,4BAA8B,SAASC,WAGhD9C,MAAM+C,QAAQnD,KAAKgB,QAAQkC,QAUpCtD,QAAQO,UAAU8B,eAAiB,SAASmB,GAExCA,EAAEC,qBAGEC,SAAWtD,KAAKI,MAAMe,UAAUU,KAAK,QAAQ0B,YAEjD7D,KAAK8D,KAAK,CAAC,CACPC,WAAY,sCACZ5D,KAAM,CAACC,UAAWE,KAAKF,UAAWuC,aAAcC,KAAKC,UAAUe,WAC/DI,KAAM1D,KAAKyC,6BAA6BxB,KAAKjB,KAAMsD,UACnDK,KAAM3D,KAAKiD,4BAA4BhC,KAAKjB,KAAMsD,cAW1D1D,QAAQO,UAAU6B,WAAa,SAASoB,GACpCA,EAAEC,iBACSrD,KACNI,MAAMe,UAAUU,KAAK,QAAQ+B,UAGiB,CAUnD3D,KAAM,SAASJ,aACJ,IAAID,QAAQC,OAEvBgE,KAAM"}