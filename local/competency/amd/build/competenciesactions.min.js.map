{"version":3,"file":"competenciesactions.min.js","sources":["../src/competenciesactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle selection changes and actions on the competency tree.\n *\n * @module     local_competency/competencyactions\n * @package    local_competency\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery',\n        'core/url',\n        'core/templates',\n        'core/notification',\n        'core/str',\n        'core/ajax',\n        'local_competency/dragdrop-reorder',\n        'local_competency/tree',\n        'local_competency/dialogue',\n        'local_competency/menubar',\n        'local_competency/competencypicker',\n        'local_competency/competency_outcomes',\n        'local_competency/competencyruleconfig'],\n       function($, url, templates, notification, str, ajax, dragdrop, Ariatree, Dialogue, menubar, Picker, Outcomes, RuleConfig) {\n\n    // Private variables and functions.\n    /** @var {Object} treeModels - This is an object representing the nodes in the tree. */\n    var treeModels = null;\n    /** @var {Node} moveSource - The start of a drag operation */\n    var moveSource = null;\n    /** @var {Node} moveTarget - The end of a drag operation */\n    var moveTarget = null;\n    /** @var {Number} pageContextId The page context ID. */\n    var pageContextId;\n    /** @type {Object} Picker instance. */\n    var pickerInstance;\n    /** @type {Object} Rule config instance. */\n    var ruleConfigInstance;\n    /** @type {Object} The competency we're picking a relation to. */\n    var relatedTarget;\n    /** @type {Object} Taxonomy constants indexed per level. */\n    var taxonomiesConstants;\n    /** @type {Array} The rules modules. Values are object containing type, namd and amd. */\n    var rulesModules;\n    /** @type {Number} the selected competency ID. */\n    var selectedCompetencyId = null;\n\n    /**\n     * Respond to choosing the \"Add\" menu item for the selected node in the tree.\n     * @method addHandler\n     */\n    var addHandler = function() {\n        var parent = $('[data-region=\"competencyactions\"]').data('competency');\n\n        var params = {\n            competencyframeworkid: treeModels.getCompetencyFrameworkId(),\n            pagecontextid: pageContextId\n        };\n\n        if (parent !== null) {\n            // We are adding at a sub node.\n            params.parentid = parent.id;\n        }\n\n        var relocate = function() {\n            var queryparams = $.param(params);\n            window.location = url.relativeUrl('/admin/tool/lp/editcompetency.php?' + queryparams);\n        };\n\n        if (parent !== null && treeModels.hasRule(parent.id)) {\n            str.get_strings([\n                {key: 'confirm', component: 'moodle'},\n                {key: 'addingcompetencywillresetparentrule', component: 'local_competency', param: parent.shortname},\n                {key: 'yes', component: 'core'},\n                {key: 'no', component: 'core'}\n            ]).done(function(strings) {\n                notification.confirm(\n                    strings[0],\n                    strings[1],\n                    strings[2],\n                    strings[3],\n                    relocate\n                );\n            }).fail(notification.exception);\n        } else {\n            relocate();\n        }\n    };\n\n    /**\n     * A source and destination has been chosen - so time to complete a move.\n     * @method doMove\n     */\n    var doMove = function() {\n        var frameworkid = $('[data-region=\"filtercompetencies\"]').data('frameworkid');\n        var requests = ajax.call([{\n            methodname: 'core_competency_set_parent_competency',\n            args: {competencyid: moveSource, parentid: moveTarget}\n        }, {\n            methodname: 'local_competency_data_for_competencies_manage_page',\n            args: {competencyframeworkid: frameworkid,\n                    search: $('[data-region=\"filtercompetencies\"] input').val()}\n        }]);\n        requests[1].done(reloadPage).fail(notification.exception);\n    };\n\n    /**\n     * Confirms a competency move.\n     *\n     * @method confirmMove\n     */\n    var confirmMove = function() {\n        moveTarget = typeof moveTarget === \"undefined\" ? 0 : moveTarget;\n        if (moveTarget == moveSource) {\n            // No move to do.\n            return;\n        }\n\n        var targetComp = treeModels.getCompetency(moveTarget) || {},\n            sourceComp = treeModels.getCompetency(moveSource) || {},\n            confirmMessage = 'movecompetencywillresetrules',\n            showConfirm = false;\n\n        // We shouldn't be moving the competency to the same parent.\n        if (sourceComp.parentid == moveTarget) {\n            return;\n        }\n\n        // If we are moving to a child of self.\n        if (targetComp.path && targetComp.path.indexOf('/' + sourceComp.id + '/') >= 0) {\n            confirmMessage = 'movecompetencytochildofselfwillresetrules';\n\n            // Show a confirmation if self has rules, as they'll disappear.\n            showConfirm = showConfirm || treeModels.hasRule(sourceComp.id);\n        }\n\n        // Show a confirmation if the current parent, or the destination have rules.\n        showConfirm = showConfirm || (treeModels.hasRule(targetComp.id) || treeModels.hasRule(sourceComp.parentid));\n\n        // Show confirm, and/or do the things.\n        if (showConfirm) {\n            str.get_strings([\n                {key: 'confirm', component: 'moodle'},\n                {key: confirmMessage, component: 'local_competency'},\n                {key: 'yes', component: 'moodle'},\n                {key: 'no', component: 'moodle'}\n            ]).done(function(strings) {\n                notification.confirm(\n                    strings[0], // Confirm.\n                    strings[1], // Delete competency X?\n                    strings[2], // Delete.\n                    strings[3], // Cancel.\n                    doMove\n                );\n            }).fail(notification.exception);\n\n        } else {\n            doMove();\n        }\n    };\n\n    /**\n     * A move competency popup was opened - initialise the aria tree in it.\n     * @method initMovePopup\n     * @param {dialogue} popup The local_competency/dialogue that was created.\n     */\n    var initMovePopup = function(popup) {\n        var body = $(popup.getContent());\n        var treeRoot = body.find('[data-enhance=movetree]');\n        var tree = new Ariatree(treeRoot, false);\n        tree.on('selectionchanged', function(evt, params) {\n            var target = params.selected;\n            moveTarget = $(target).data('id');\n        });\n        treeRoot.show();\n\n        body.on('click', '[data-action=\"move\"]', function() {\n          popup.close();\n          confirmMove();\n        });\n        body.on('click', '[data-action=\"cancel\"]', function() {\n          popup.close();\n        });\n    };\n\n    /**\n     * Turn a flat list of competencies into a tree structure (recursive).\n     * @method addCompetencyChildren\n     * @param {Object} parent The current parent node in the tree\n     * @param {Object[]} competencies The flat list of competencies\n     */\n    var addCompetencyChildren = function(parent, competencies) {\n        var i;\n\n        for (i = 0; i < competencies.length; i++) {\n            if (competencies[i].parentid == parent.id) {\n                parent.haschildren = true;\n                competencies[i].children = [];\n                competencies[i].haschildren = false;\n                parent.children[parent.children.length] = competencies[i];\n                addCompetencyChildren(competencies[i], competencies);\n            }\n        }\n    };\n\n    /**\n     * A node was chosen and \"Move\" was selected from the menu. Open a popup to select the target.\n     * @param {Event} e\n     * @method moveHandler\n     */\n    var moveHandler = function(e) {\n        e.preventDefault();\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n\n        // Remember what we are moving.\n        moveSource = competency.id;\n\n        // Load data for the template.\n        var requests = ajax.call([\n            {\n                methodname: 'core_competency_search_competencies',\n                args: {\n                    competencyframeworkid: competency.competencyframeworkid,\n                    searchtext: ''\n                }\n            }, {\n                methodname: 'core_competency_read_competency_framework',\n                args: {\n                    id: competency.competencyframeworkid\n                }\n            }\n        ]);\n\n        // When all data has arrived, continue.\n        $.when.apply(null, requests).done(function(competencies, framework) {\n\n            // Expand the list of competencies into a tree.\n            var i;\n            var competenciestree = [];\n            for (i = 0; i < competencies.length; i++) {\n                var onecompetency = competencies[i];\n                if (onecompetency.parentid == \"0\") {\n                    onecompetency.children = [];\n                    onecompetency.haschildren = 0;\n                    competenciestree[competenciestree.length] = onecompetency;\n                    addCompetencyChildren(onecompetency, competencies);\n                }\n            }\n\n            str.get_strings([\n                {key: 'movecompetency', component: 'local_competency', param: competency.shortname},\n                {key: 'move', component: 'local_competency'},\n                {key: 'cancel', component: 'moodle'}\n            ]).done(function(strings) {\n\n                var context = {\n                    framework: framework,\n                    competencies: competenciestree\n                };\n\n                templates.render('local_competency/competencies_move_tree', context)\n                   .done(function(tree) {\n                       new Dialogue(\n                           strings[0], // Move competency x.\n                           tree, // The move tree.\n                           initMovePopup\n                       );\n\n                   }).fail(notification.exception);\n\n           }).fail(notification.exception);\n\n        }).fail(notification.exception);\n\n    };\n\n    /**\n     * Edit the selected competency.\n     * @method editHandler\n     */\n    var editHandler = function() {\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n\n        var params = {\n            competencyframeworkid: treeModels.getCompetencyFrameworkId(),\n            id: competency.id,\n            parentid: competency.parentid,\n            pagecontextid: pageContextId\n        };\n\n        var queryparams = $.param(params);\n        window.location = url.relativeUrl('/admin/tool/lp/editcompetency.php?' + queryparams);\n    };\n\n    /**\n     * Re-render the page with the latest data.\n     * @param {Object} context\n     * @method reloadPage\n     */\n    var reloadPage = function(context) {\n        templates.render('local_competency/manage_competencies_page', context)\n            .done(function(newhtml, newjs) {\n                $('[data-region=\"managecompetencies\"]').replaceWith(newhtml);\n                templates.runTemplateJS(newjs);\n            })\n           .fail(notification.exception);\n    };\n\n    /**\n     * Perform a search and render the page with the new search results.\n     * @param {Event} e\n     * @method updateSearchHandler\n     */\n    var updateSearchHandler = function(e) {\n        e.preventDefault();\n\n        var frameworkid = $('[data-region=\"filtercompetencies\"]').data('frameworkid');\n\n        var requests = ajax.call([{\n            methodname: 'local_competency_data_for_competencies_manage_page',\n            args: {competencyframeworkid: frameworkid,\n                    search: $('[data-region=\"filtercompetencies\"] input').val()}\n        }]);\n        requests[0].done(reloadPage).fail(notification.exception);\n    };\n\n    /**\n     * Move a competency \"up\". This only affects the sort order within the same branch of the tree.\n     * @method moveUpHandler\n     */\n    var moveUpHandler = function() {\n        // We are chaining ajax requests here.\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n        var requests = ajax.call([{\n            methodname: 'core_competency_move_up_competency',\n            args: {id: competency.id}\n        }, {\n            methodname: 'local_competency_data_for_competencies_manage_page',\n            args: {competencyframeworkid: competency.competencyframeworkid,\n                    search: $('[data-region=\"filtercompetencies\"] input').val()}\n        }]);\n        requests[1].done(reloadPage).fail(notification.exception);\n    };\n\n    /**\n     * Move a competency \"down\". This only affects the sort order within the same branch of the tree.\n     * @method moveDownHandler\n     */\n    var moveDownHandler = function() {\n        // We are chaining ajax requests here.\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n        var requests = ajax.call([{\n            methodname: 'core_competency_move_down_competency',\n            args: {id: competency.id}\n        }, {\n            methodname: 'local_competency_data_for_competencies_manage_page',\n            args: {competencyframeworkid: competency.competencyframeworkid,\n                    search: $('[data-region=\"filtercompetencies\"] input').val()}\n        }]);\n        requests[1].done(reloadPage).fail(notification.exception);\n    };\n\n    /**\n     * Open a dialogue to show all the courses using the selected competency.\n     * @method seeCoursesHandler\n     */\n    var seeCoursesHandler = function() {\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n\n        var requests = ajax.call([{\n            methodname: 'local_competency_list_courses_using_competency',\n            args: {id: competency.id}\n        }]);\n\n        requests[0].done(function(courses) {\n            var context = {\n                courses: courses\n            };\n            templates.render('local_competency/linked_courses_summary', context).done(function(html) {\n                str.get_string('linkedcourses', 'local_competency').done(function(linkedcourses) {\n                    new Dialogue(\n                        linkedcourses, // Title.\n                        html, // The linked courses.\n                        initMovePopup\n                    );\n                }).fail(notification.exception);\n            }).fail(notification.exception);\n        }).fail(notification.exception);\n    };\n\n    /**\n     * Open a competencies popup to relate competencies.\n     *\n     * @method relateCompetenciesHandler\n     */\n    var relateCompetenciesHandler = function() {\n        relatedTarget = $('[data-region=\"competencyactions\"]').data('competency');\n\n        if (!pickerInstance) {\n            pickerInstance = new Picker(pageContextId, relatedTarget.competencyframeworkid);\n            pickerInstance.on('save', function(e, data) {\n                var compIds = data.competencyIds;\n\n                var calls = [];\n                $.each(compIds, function(index, value) {\n                    calls.push({\n                        methodname: 'core_competency_add_related_competency',\n                        args: {competencyid: value, relatedcompetencyid: relatedTarget.id}\n                    });\n                });\n\n                calls.push({\n                    methodname: 'local_competency_data_for_related_competencies_section',\n                    args: {competencyid: relatedTarget.id}\n                });\n\n                var promises = ajax.call(calls);\n\n                promises[calls.length - 1].then(function(context) {\n                    return templates.render('local_competency/related_competencies', context);\n                }).then(function(html, js) {\n                    $('[data-region=\"relatedcompetencies\"]').replaceWith(html);\n                    templates.runTemplateJS(js);\n                    updatedRelatedCompetencies();\n                    return;\n                }).catch(notification.exception);\n            });\n        }\n\n        pickerInstance.setDisallowedCompetencyIDs([relatedTarget.id]);\n        pickerInstance.display();\n    };\n\n    var ruleConfigHandler = function(e) {\n        e.preventDefault();\n        relatedTarget = $('[data-region=\"competencyactions\"]').data('competency');\n        ruleConfigInstance.setTargetCompetencyId(relatedTarget.id);\n        ruleConfigInstance.display();\n    };\n\n    var ruleConfigSaveHandler = function(e, config) {\n        var update = {\n            id: relatedTarget.id,\n            shortname: relatedTarget.shortname,\n            idnumber: relatedTarget.idnumber,\n            description: relatedTarget.description,\n            descriptionformat: relatedTarget.descriptionformat,\n            ruletype: config.ruletype,\n            ruleoutcome: config.ruleoutcome,\n            ruleconfig: config.ruleconfig\n        };\n        var promise = ajax.call([{\n            methodname: 'core_competency_update_competency',\n            args: {competency: update}\n        }]);\n        promise[0].then(function(result) {\n            if (result) {\n                relatedTarget.ruletype = config.ruletype;\n                relatedTarget.ruleoutcome = config.ruleoutcome;\n                relatedTarget.ruleconfig = config.ruleconfig;\n                renderCompetencySummary(relatedTarget);\n            }\n            return;\n        }).catch(notification.exception);\n    };\n\n    /**\n     * Delete a competency.\n     * @method doDelete\n     */\n    var doDelete = function() {\n        // We are chaining ajax requests here.\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n        var requests = ajax.call([{\n            methodname: 'core_competency_delete_competency',\n            args: {id: competency.id}\n        }, {\n            methodname: 'local_competency_data_for_competencies_manage_page',\n            args: {competencyframeworkid: competency.competencyframeworkid,\n                    search: $('[data-region=\"filtercompetencies\"] input').val()}\n        }]);\n        requests[0].done(function(success) {\n            if (success === false) {\n                str.get_strings([\n                {key: 'competencycannotbedeleted', component: 'local_competency', param: competency.shortname},\n                {key: 'cancel', component: 'moodle'}\n                ]).done(function(strings) {\n                    notification.alert(\n                        null,\n                        strings[0]\n                    );\n                }).fail(notification.exception);\n            }\n        }).fail(notification.exception);\n        requests[1].done(reloadPage).fail(notification.exception);\n    };\n\n    /**\n     * Show a confirm dialogue before deleting a competency.\n     * @method deleteCompetencyHandler\n     */\n    var deleteCompetencyHandler = function() {\n        var competency = $('[data-region=\"competencyactions\"]').data('competency'),\n            confirmMessage = 'deletecompetency';\n\n        if (treeModels.hasRule(competency.parentid)) {\n            confirmMessage = 'deletecompetencyparenthasrule';\n        }\n\n        str.get_strings([\n            {key: 'confirm', component: 'moodle'},\n            {key: confirmMessage, component: 'local_competency', param: competency.shortname},\n            {key: 'delete', component: 'moodle'},\n            {key: 'cancel', component: 'moodle'}\n        ]).done(function(strings) {\n            notification.confirm(\n                strings[0], // Confirm.\n                strings[1], // Delete competency X?\n                strings[2], // Delete.\n                strings[3], // Cancel.\n                doDelete\n            );\n        }).fail(notification.exception);\n    };\n\n    /**\n     * HTML5 implementation of drag/drop (there is an accesible alternative in the menus).\n     * @method dragStart\n     * @param {Event} e\n     */\n    var dragStart = function(e) {\n        e.originalEvent.dataTransfer.setData('text', $(e.target).parent().data('id'));\n    };\n\n    /**\n     * HTML5 implementation of drag/drop (there is an accesible alternative in the menus).\n     * @method allowDrop\n     * @param {Event} e\n     */\n    var allowDrop = function(e) {\n        e.originalEvent.dataTransfer.dropEffect = 'move';\n        e.preventDefault();\n    };\n\n    /**\n     * HTML5 implementation of drag/drop (there is an accesible alternative in the menus).\n     * @method dragEnter\n     * @param {Event} e\n     */\n    var dragEnter = function(e) {\n        e.preventDefault();\n        $(this).addClass('currentdragtarget');\n    };\n\n    /**\n     * HTML5 implementation of drag/drop (there is an accesible alternative in the menus).\n     * @method dragLeave\n     * @param {Event} e\n     */\n    var dragLeave = function(e) {\n        e.preventDefault();\n        $(this).removeClass('currentdragtarget');\n    };\n\n    /**\n     * HTML5 implementation of drag/drop (there is an accesible alternative in the menus).\n     * @method dropOver\n     * @param {Event} e\n     */\n    var dropOver = function(e) {\n        e.preventDefault();\n        moveSource = e.originalEvent.dataTransfer.getData('text');\n        moveTarget = $(e.target).parent().data('id');\n        $(this).removeClass('currentdragtarget');\n\n        confirmMove();\n    };\n\n    /**\n     * Deletes a related competency without confirmation.\n     *\n     * @param {Event} e The event that triggered the action.\n     * @method deleteRelatedHandler\n     */\n    var deleteRelatedHandler = function(e) {\n        e.preventDefault();\n\n        var relatedid = this.id.substr(11);\n        var competency = $('[data-region=\"competencyactions\"]').data('competency');\n        var removeRelated = ajax.call([\n            {methodname: 'core_competency_remove_related_competency',\n              args: {relatedcompetencyid: relatedid, competencyid: competency.id}},\n            {methodname: 'local_competency_data_for_related_competencies_section',\n              args: {competencyid: competency.id}}\n        ]);\n\n        removeRelated[1].done(function(context) {\n            templates.render('local_competency/related_competencies', context).done(function(html) {\n                $('[data-region=\"relatedcompetencies\"]').replaceWith(html);\n                updatedRelatedCompetencies();\n            }).fail(notification.exception);\n        }).fail(notification.exception);\n    };\n\n\n      /**\n     * Deletes a related competency without confirmation.\n     *\n     * @param {Event} e The event that triggered the action.\n     * @method deleteRelatedHandler\n     */\n    var UserCompentencyBrief = function(competency) {\n      //  e.preventDefault();\n\n\n        var removeRelated = ajax.call([{\n            methodname: 'local_competency_data_for_user_competency_brief',\n                args: {competencyid: competency.id}\n        }\n        ]);\n\n        removeRelated[0].done(function(context) {\n              templates.render('local_competency/loading', {});\n            templates.render('local_competency/user_competency_brief', context).then(function(html,js) {\n                console.log(html);\n                $('[data-region=\"competencyinfo\"]').replaceWith(html);\n                  $('[data-region=\"usercompetencybrief\"]').replaceWith(html);\n               //  templates.runTemplateJS();\n               //updatedRelatedCompetencies();\n               // updatedRelatedCompetencies();\n            }).fail(notification.exception);\n        }).fail(notification.exception); \n    };\n    \n    /**\n     * Updates the competencies list (with relations) and add listeners.\n     *\n     * @method updatedRelatedCompetencies\n     */\n    var updatedRelatedCompetencies = function() {\n\n        // Listeners to newly loaded related competencies.\n        $('[data-action=\"deleterelation\"]').on('click', deleteRelatedHandler);\n\n    };\n\n    /**\n     * Log the competency viewed event.\n     *\n     * @param  {Object} competency The competency.\n     * @method triggerCompetencyViewedEvent\n     */\n    var triggerCompetencyViewedEvent = function(competency) {\n        if (competency.id !== selectedCompetencyId) {\n            // Set the selected competency id.\n            selectedCompetencyId = competency.id;\n            ajax.call([{\n                    methodname: 'core_competency_competency_viewed',\n                    args: {id: competency.id}\n            }]);\n        }\n    };\n\n    /**\n     * Return the taxonomy constant for a level.\n     *\n     * @param  {Number} level The level.\n     * @return {String}\n     * @function getTaxonomyAtLevel\n     */\n    var getTaxonomyAtLevel = function(level) {\n        var constant = taxonomiesConstants[level];\n        if (!constant) {\n            constant = 'competency';\n        }\n        return constant;\n    };\n\n    /**\n     * Render the competency summary.\n     *\n     * @param  {Object} competency The competency.\n     */\n    var renderCompetencySummary = function(competency) {\n        var promise = $.Deferred().resolve().promise(),\n            context = {};\n\n        context.competency = competency;\n        context.showdeleterelatedaction = true;\n        context.showrelatedcompetencies = true;\n        context.showrule = false;\n\n        if (competency.ruleoutcome != Outcomes.NONE) {\n            // Get the outcome and rule name.\n            promise = Outcomes.getString(competency.ruleoutcome).then(function(str) {\n                var name;\n                $.each(rulesModules, function(index, modInfo) {\n                    if (modInfo.type == competency.ruletype) {\n                        name = modInfo.name;\n                    }\n                });\n                return [str, name];\n            });\n        }\n\n        promise.then(function(strs) {\n            if (typeof strs !== 'undefined') {\n                context.showrule = true;\n                context.rule = {\n                    outcome: strs[0],\n                    type: strs[1]\n                };\n            }\n            return context;\n        }).then(function(context) {\n            return templates.render('local_competency/competency_summary', context);\n        }).then(function(html) {\n            $('[data-region=\"competencyinfo\"]').html(html);\n            $('[data-action=\"deleterelation\"]').on('click', deleteRelatedHandler);\n            return templates.render('local_competency/loading', {});\n        }).then(function(html, js) {\n            //console.log(html);\n            //console.log(js);\n            //templates.replaceNodeContents('[data-region=\"relatedcompetencies\"]', html, js);\n            return ajax.call([{\n                methodname: 'local_competency_data_for_user_competency_brief',\n                args: {competencyid: competency.id}\n            }])[0];\n        }).done(function(context) {\n            alert('hi');\n            console.log(context);\n            return templates.render('local_competency/user_competency_brief', context);\n        }).then(function(html, js) {\n            console.log(html);\n            $('[data-region=\"relatedcompetencies\"]').replaceWith(html);\n            templates.runTemplateJS(js);\n            updatedRelatedCompetencies();\n            return;\n        }).catch(notification.exception);\n    };\n\n    /**\n     * Return the string \"Add <taxonomy>\".\n     *\n     * @param  {Number} level The level.\n     * @return {String}\n     * @function strAddTaxonomy\n     */\n    var strAddTaxonomy = function(level) {\n        return str.get_string('taxonomy_add_' + getTaxonomyAtLevel(level), 'local_competency');\n    };\n\n    /**\n     * Return the string \"Selected <taxonomy>\".\n     *\n     * @param  {Number} level The level.\n     * @return {String}\n     * @function strSelectedTaxonomy\n     */\n    var strSelectedTaxonomy = function(level) {\n        return str.get_string('taxonomy_selected_' + getTaxonomyAtLevel(level), 'local_competency');\n    };\n\n    /**\n     * Handler when a node in the aria tree is selected.\n     * @method selectionChanged\n     * @param {Event} evt The event that triggered the selection change.\n     * @param {Object} params The parameters for the event. Contains a list of selected nodes.\n     * @return {Boolean}\n     */\n    var selectionChanged = function(evt, params) {\n        var node = params.selected,\n            id = $(node).data('id'),\n            btn = $('[data-region=\"competencyactions\"] [data-action=\"add\"]'),\n            actionMenu = $('[data-region=\"competencyactionsmenu\"]'),\n            selectedTitle = $('[data-region=\"selected-competency\"]'),\n            level = 0,\n            sublevel = 1;\n\n        menubar.closeAll();\n\n        if (typeof id === \"undefined\") {\n            // Assume this is the root of the tree.\n            // Here we are only getting the text from the top of the tree, to do it we clone the tree,\n            // remove all children and then call text on the result.\n            $('[data-region=\"competencyinfo\"]').html(node.clone().children().remove().end().text());\n            $('[data-region=\"competencyactions\"]').data('competency', null);\n            actionMenu.hide();\n\n        } else {\n            var competency = treeModels.getCompetency(id);\n\n            level = treeModels.getCompetencyLevel(id);\n            sublevel = level + 1;\n\n            actionMenu.show();\n            $('[data-region=\"competencyactions\"]').data('competency', competency);\n           // renderCompetencySummary(competency);\n            UserCompentencyBrief(competency);\n            // Log Competency viewed event.\n            triggerCompetencyViewedEvent(competency);\n        }\n        strSelectedTaxonomy(level).then(function(str) {\n            selectedTitle.text(str);\n            return;\n        }).catch(notification.exception);\n\n        strAddTaxonomy(sublevel).then(function(str) {\n            btn.show()\n                .find('[data-region=\"term\"]')\n                .text(str);\n            return;\n        }).catch(notification.exception);\n\n        // We handled this event so consume it.\n        evt.preventDefault();\n        return false;\n    };\n\n    /**\n     * Return the string \"Selected <taxonomy>\".\n     *\n     * @function parseTaxonomies\n     * @param  {String} taxonomiesstr Comma separated list of taxonomies.\n     * @return {Array} of level => taxonomystr\n     */\n    var parseTaxonomies = function(taxonomiesstr) {\n        var all = taxonomiesstr.split(',');\n        all.unshift(\"\");\n        delete all[0];\n\n        // Note we don't need to fill holes, because other functions check for empty anyway.\n        return all;\n    };\n\n    return {\n        /**\n         * Initialise this page (attach event handlers etc).\n         *\n         * @method init\n         * @param {Object} model The tree model provides some useful functions for loading and searching competencies.\n         * @param {Number} pagectxid The page context ID.\n         * @param {Object} taxonomies Constants indexed by level.\n         * @param {Object} rulesMods The modules of the rules.\n         */\n        init: function(model, pagectxid, taxonomies, rulesMods) {\n            treeModels = model;\n            pageContextId = pagectxid;\n            taxonomiesConstants = parseTaxonomies(taxonomies);\n            rulesModules = rulesMods;\n\n            $('[data-region=\"competencyactions\"] [data-action=\"add\"]').on('click', addHandler);\n\n            menubar.enhance('.competencyactionsmenu', {\n                '[data-action=\"edit\"]': editHandler,\n                '[data-action=\"delete\"]': deleteCompetencyHandler,\n                '[data-action=\"move\"]': moveHandler,\n                '[data-action=\"moveup\"]': moveUpHandler,\n                '[data-action=\"movedown\"]': moveDownHandler,\n                '[data-action=\"linkedcourses\"]': seeCoursesHandler,\n                '[data-action=\"relatedcompetencies\"]': relateCompetenciesHandler.bind(this),\n                '[data-action=\"competencyrules\"]': ruleConfigHandler.bind(this)\n            });\n            $('[data-region=\"competencyactionsmenu\"]').hide();\n            $('[data-region=\"competencyactions\"] [data-action=\"add\"]').hide();\n\n            $('[data-region=\"filtercompetencies\"]').on('submit', updateSearchHandler);\n            // Simple html5 drag drop because we already added an accessible alternative.\n            var top = $('[data-region=\"managecompetencies\"] [data-enhance=\"tree\"]');\n            top.on('dragstart', 'li>span', dragStart)\n                .on('dragover', 'li>span', allowDrop)\n                .on('dragenter', 'li>span', dragEnter)\n                .on('dragleave', 'li>span', dragLeave)\n                .on('drop', 'li>span', dropOver);\n\n            model.on('selectionchanged', selectionChanged);\n\n            // Prepare the configuration tool.\n            ruleConfigInstance = new RuleConfig(treeModels, rulesModules);\n            ruleConfigInstance.on('save', ruleConfigSaveHandler.bind(this));\n        }\n    };\n});\n"],"names":["define","$","url","templates","notification","str","ajax","dragdrop","Ariatree","Dialogue","menubar","Picker","Outcomes","RuleConfig","pageContextId","pickerInstance","ruleConfigInstance","relatedTarget","taxonomiesConstants","rulesModules","treeModels","moveSource","moveTarget","selectedCompetencyId","addHandler","parent","data","params","competencyframeworkid","getCompetencyFrameworkId","pagecontextid","parentid","id","relocate","queryparams","param","window","location","relativeUrl","hasRule","get_strings","key","component","shortname","done","strings","confirm","fail","exception","doMove","frameworkid","call","methodname","args","competencyid","search","val","reloadPage","confirmMove","targetComp","getCompetency","sourceComp","confirmMessage","showConfirm","path","indexOf","initMovePopup","popup","body","getContent","treeRoot","find","on","evt","target","selected","show","close","addCompetencyChildren","competencies","i","length","haschildren","children","moveHandler","e","preventDefault","competency","requests","searchtext","when","apply","framework","competenciestree","onecompetency","context","render","tree","editHandler","newhtml","newjs","replaceWith","runTemplateJS","updateSearchHandler","moveUpHandler","moveDownHandler","seeCoursesHandler","courses","html","get_string","linkedcourses","relateCompetenciesHandler","compIds","competencyIds","calls","each","index","value","push","relatedcompetencyid","then","js","updatedRelatedCompetencies","catch","setDisallowedCompetencyIDs","display","ruleConfigHandler","setTargetCompetencyId","ruleConfigSaveHandler","config","update","idnumber","description","descriptionformat","ruletype","ruleoutcome","ruleconfig","result","renderCompetencySummary","doDelete","success","alert","deleteCompetencyHandler","dragStart","originalEvent","dataTransfer","setData","allowDrop","dropEffect","dragEnter","this","addClass","dragLeave","removeClass","dropOver","getData","deleteRelatedHandler","relatedid","substr","getTaxonomyAtLevel","level","constant","promise","Deferred","resolve","showdeleterelatedaction","showrelatedcompetencies","showrule","NONE","getString","name","modInfo","type","strs","rule","outcome","console","log","selectionChanged","node","btn","actionMenu","selectedTitle","sublevel","closeAll","clone","remove","end","text","hide","getCompetencyLevel","UserCompentencyBrief","triggerCompetencyViewedEvent","strSelectedTaxonomy","strAddTaxonomy","init","model","pagectxid","taxonomies","rulesMods","all","split","unshift","enhance","bind"],"mappings":"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"}