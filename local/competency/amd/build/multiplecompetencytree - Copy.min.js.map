{"version":3,"file":"multiplecompetencytree - Copy.min.js","sources":["../src/multiplecompetencytree - Copy.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle selection changes on the competency tree.\n *\n * @module     local_competency/competencyselect\n * @package    local_competency\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'core/notification', 'core/templates', 'local_competency/tree', 'local_competency/competency_outcomes', 'jquery'],\n       function(ajax, notification, templates, Ariatree, CompOutcomes, $) {\n\n    // Private variables and functions.\n    /** @var {Object[]} competencies - Cached list of competencies */\n    var competencies = {};\n\n    /** @var {Number} competencyFrameworkId - The current framework id */\n    var competencyFrameworkId = 0;\n\n    /** @var {String} competencyFrameworkShortName - The current framework short name */\n    var competencyFrameworkShortName = '';\n\n    /** @var {String} treeSelector - The selector for the root of the tree. */\n    var treeSelector = '';\n\n    /** @var {String} currentNodeId - The data-id of the current node in the tree. */\n    var currentNodeId = '';\n\n     /** @var {Boolean} competencyFramworkCanManage - Can manage the competencies framework */\n    var competencyFramworkCanManage = false;\n\n    var cars= {};\n\n    var carindex=0;\n    /**\n     * Build a tree from the flat list of competencies.\n     * @param {Object} parent The parent competency.\n     * @param {Array} all The list of all competencies.\n     */\n    var addChildren = function(parent, all) {\n        var i = 0;\n        var current = false;\n        parent.haschildren = false;\n        parent.children = [];\n        for (i = 0; i < all.length; i++) {\n            current = all[i];\n            if (current.parentid == parent.id) {\n                parent.haschildren = true;\n                parent.children.push(current);\n                addChildren(current, all);\n            }\n        }\n    };\n\n    \n\n    var searchCompetency = function(frameworkid, searchtext){\n        \n        var def = $.Deferred();     \n        var promises=ajax.call([{\n                methodname: 'core_competency_search_competencies',\n                args: {\n                    searchtext: searchtext,\n                    competencyframeworkid:frameworkid,\n                },\n                done: function(result){\n                      //  console.log(response);\n                      //  alert('hi');\n                       competencies = {};\n                    var i = 0;\n                    for (i = 0; i < result.length; i++) {\n                        competencies[result[i].id] = result[i];\n                    }\n\n                    \n                    var competency = false;\n                    for (i = 0; i < result.length; i++) {\n                        competency = result[i];\n                        if (parseInt(competency.parentid, 10) === 0) {\n                           \n                            children.push(competency);\n                            addChildren(competency, result);\n                        }\n                    }\n                  \n                } // end of done function;\n\n\n        }]);        \n        return children;\n    }// end of  searchCompetency function\n\n\n\n \n\n    /**\n     * Load the list of competencies via ajax. Competencies are filtered by the searchtext.\n     * @param {String} searchtext The text to filter on.\n     * @return {promise}\n     */\n    var loadCompetencies = function(searchtext) {\n        var deferred = $.Deferred();\n     \n          \n      templates.render('local_competency/loading', {}).done(function(loadinghtml, loadingjs) {\n     \n    var cars = [ {\"frameworkSelector\":\"[data-enhance=tree2]\", \"frameworkShortname\":\"Test111\", \"frameworkId\":2},\n                    {\"frameworkSelector\":\"[data-enhance=tree3]\", \"frameworkShortname\":\"Test013\", \"frameworkId\":3} ];\n       for (carindex=0; carindex<cars.length; carindex++){\n                  treeSelector = cars[carindex].frameworkSelector;\n\n           templates.replaceNodeContents($(treeSelector), loadinghtml, loadingjs);\n             \n        \n           competencyFrameworkId = cars[carindex].frameworkId;\n           competencyFrameworkShortName = cars[carindex].frameworkShortname;\n         /*   var promises = ajax.call([{\n                methodname: 'core_competency_search_competencies',\n                args: {\n                    searchtext: searchtext,\n                    competencyframeworkid:  cars[carindex].frameworkId,\n                },\n\n\n            }]); */\n\n\n           \n            children =searchCompetency(cars[carindex].frameworkId, searchtext);\n\n          //  console.log(promises[0]);\n\n            console.log(children);\n\n         /*  response.then(function(data) {\n               // console.log(result);\n               // console.log(cars);\n            console.log(data);\n              result =  data;\n                competencies = {};\n                var i = 0;\n                for (i = 0; i < result.length; i++) {\n                    competencies[result[i].id] = result[i];\n                }\n\n                var children = [];\n                var competency = false;\n                for (i = 0; i < result.length; i++) {\n                    competency = result[i];\n                    if (parseInt(competency.parentid, 10) === 0) {\n                        children.push(competency);\n                        addChildren(competency, result);\n                    }\n                } */\n \n\n                var context = {\n                    frameworkid : cars[carindex].frameworkId,\n                    shortname: cars[carindex].frameworkShortname,\n                    canmanage: competencyFramworkCanManage,\n                    competencies: children\n                };\n               // console.log(context);\n               // console.log(children)\n\n                displayCompetencytree(treeSelector, context);\n          /*      templates.render('local_competency/competencies_tree_root', context).done(function(html, js) {\n                \n                  \n                   \n                    var cars = [ {\"frameworkSelector\":\"[data-enhance=tree2]\", \"frameworkShortname\":\"Test111\", \"frameworkId\":2},\n                    {\"frameworkSelector\":\"[data-enhance=tree3]\", \"frameworkShortname\":\"Test013\", \"frameworkId\":3} ];\n       for (carindex=0; carindex<cars.length; carindex++){\n                      treeSelector = cars[carindex].frameworkSelector;\n                       console.log(treeSelector);\n                          console.log(html);\n                    templates.replaceNodeContents($(treeSelector), $(html).html(), js);\n                    var tree = new Ariatree(treeSelector, false);\n\n                    if (currentNodeId) {\n                        var node = $(treeSelector).find('[data-id=' + currentNodeId + ']');\n                        if (node.length) {\n                            tree.selectItem(node);\n                            tree.updateFocus(node);\n                        }\n                    }\n                    deferred.resolve(competencies);\n                }\n                }).fail(deferred.reject); */\n           // }).fail(deferred.reject); \n        //});\n    };\n\n        });\n\n\n        return deferred.promise();\n    };\n\n\n    var displayCompetencytree = function (selectorkey, context){\n         var deferred = $.Deferred();\n                    \n                   templates.render('local_competency/competencies_tree_root', context).done(function(html, js) {\n                \n                  \n                   \n                     treeSelector =selectorkey;\n                   //   treeSelector = cars[carindex].frameworkSelector;\n                       console.log(treeSelector);\n                          console.log(html);\n                    templates.replaceNodeContents($(treeSelector), $(html).html(), js);\n                    var tree = new Ariatree(treeSelector, false);\n\n                    if (currentNodeId) {\n                        var node = $(treeSelector).find('[data-id=' + currentNodeId + ']');\n                        if (node.length) {\n                            tree.selectItem(node);\n                            tree.updateFocus(node);\n                        }\n                    }  deferred.resolve(competencies);\n                \n                }).fail(deferred.reject);\n\n    } // end of displayCompetencytree\n\n    /**\n     * Whenever the current item in the tree is changed - remember the \"id\".\n     * @param {Event} evt\n     * @param {Object} params The parameters for the event (This is the selected node).\n     */\n    var rememberCurrent = function(evt, params) {\n        var node = params.selected;\n        currentNodeId = node.attr('data-id');\n    };\n\n    return /** @alias module:local_competency/competencytree */ {\n        // Public variables and functions.\n        /**\n         * Initialise the tree.\n         *\n         * @param {Number} id The competency id.\n         * @param {String} shortname The framework shortname\n         * @param {String} search The current search string\n         * @param {String} selector The selector for the tree div\n         * @param {Boolean} canmanage Can manage the competencies\n         */\n        init: function( frameworks) {\n           /* competencyFrameworkId = id;\n            competencyFrameworkShortName = shortname;\n            competencyFramworkCanManage = canmanage;\n            treeSelector = selector;*/\n           // alert(selector);\n           \n           search='';\n            loadCompetencies(search).fail(notification.exception);\n           // console.log(frameworks) ;\n            \n            this.on('selectionchanged', rememberCurrent);\n         },\n\n        /**\n         * Add an event handler for custom events emitted by the tree.\n         *\n         * @param {String} eventname The name of the event - only \"selectionchanged\" for now\n         * @param {Function} handler The handler for the event.\n         */\n        on: function(eventname, handler) {\n            // We can't use the tree on function directly\n            // because the tree gets rebuilt whenever the search string changes,\n            // instead we attach the listner to the root node of the tree which never\n            // gets destroyed (same as \"on()\" code in the tree.js).\n            $(treeSelector).on(eventname, handler);\n        },\n\n        /**\n         * Get the children of a competency.\n         *\n         * @param  {Number} id The competency ID.\n         * @return {Array}\n         * @method getChildren\n         */\n        getChildren: function(id) {\n            var children = [];\n            $.each(competencies, function(index, competency) {\n                if (competency.parentid == id) {\n                    children.push(competency);\n                }\n            });\n            return children;\n        },\n\n        /**\n         * Get the competency framework id this model was initiliased with.\n         *\n         * @return {Number}\n         */\n        getCompetencyFrameworkId: function() {\n            return competencyFrameworkId;\n        },\n\n        /**\n         * Get a competency by id\n         *\n         * @param {Number} id The competency id\n         * @return {Object}\n         */\n        getCompetency: function(id) {\n            return competencies[id];\n        },\n\n        /**\n         * Get the competency level.\n         *\n         * @param  {Number} id The competency ID.\n         * @return {Number}\n         */\n        getCompetencyLevel: function(id) {\n            var competency = this.getCompetency(id),\n                level = competency.path.replace(/^\\/|\\/$/g, '').split('/').length;\n            return level;\n        },\n\n        /**\n         * Whether a competency has children.\n         *\n         * @param  {Number} id The competency ID.\n         * @return {Boolean}\n         * @method hasChildren\n         */\n        hasChildren: function(id) {\n            return this.getChildren(id).length > 0;\n        },\n\n        /**\n         * Does the competency have a rule?\n         *\n         * @param  {Number}  id The competency ID.\n         * @return {Boolean}\n         */\n        hasRule: function(id) {\n            var comp = this.getCompetency(id);\n            if (comp) {\n                return comp.ruleoutcome != CompOutcomes.OUTCOME_NONE\n                    && comp.ruletype;\n            }\n            return false;\n        },\n\n        /**\n         * Reload all the page competencies framework competencies.\n         * @method reloadCompetencies\n         * @return {Promise}\n         */\n        reloadCompetencies: function() {\n            return loadCompetencies('').fail(notification.exception);\n        },\n\n        /**\n         * Get all competencies for this framework.\n         *\n         * @return {Object[]}\n         */\n        listCompetencies: function() {\n            return competencies;\n        },\n\n     };\n });\n"],"names":["define","ajax","notification","templates","Ariatree","CompOutcomes","$","competencies","competencyFrameworkId","treeSelector","currentNodeId","carindex","addChildren","parent","all","i","current","haschildren","children","length","parentid","id","push","searchCompetency","frameworkid","searchtext","Deferred","call","methodname","args","competencyframeworkid","done","result","competency","parseInt","loadCompetencies","deferred","render","loadinghtml","loadingjs","cars","frameworkSelector","replaceNodeContents","frameworkId","frameworkShortname","console","log","context","shortname","canmanage","displayCompetencytree","promise","selectorkey","html","js","tree","node","find","selectItem","updateFocus","resolve","fail","reject","rememberCurrent","evt","params","selected","attr","init","frameworks","search","exception","on","eventname","handler","getChildren","each","index","getCompetencyFrameworkId","getCompetency","getCompetencyLevel","this","path","replace","split","hasChildren","hasRule","comp","ruleoutcome","OUTCOME_NONE","ruletype","reloadCompetencies","listCompetencies"],"mappings":"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"}