{"version":3,"file":"advancedview_courselist.min.js","sources":["../src/advancedview_courselist.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle selection changes and actions on the competency tree.\n *\n * @module     local_competency\n * @package    local_competency\n * @copyright  2018 hemalathacarun <hemalatha@eabyas.in>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery',\n        'core/url',\n        'core/templates',\n        'core/notification',\n        'core/str',\n        'core/ajax',\n        'local_competency/menubar',\n        ], function($,url, templates, notification, str, ajax, menubar) {\n\n\n    var advancedviewCourselist = function(){       \n      self._courseid ='';         \n      self._competencyid='';\n      self._treeModel;\n      self._selectedCompetencyId = null;\n\n      \n    \n    };\n\n    /**\n     * Handler when a node in the aria tree is selected.\n     * @method selectionChanged\n     * @param {Event} evt The event that triggered the selection change.\n     * @param {Object} params The parameters for the event. Contains a list of selected nodes.\n     * @return {Boolean} \n     */\n    advancedviewCourselist.prototype._getajaxCourses = function(evt, params){\n    //selectionChanged\n  \n      // console.log('hi');\n        var node = params.selected,\n            id = $(node).data('id'),\n            btn = $('[data-region=\"competencyactions\"] [data-action=\"add\"]'),\n            actionMenu = $('[data-region=\"competencyactionsmenu\"]'),\n            selectedTitle = $('[data-region=\"selected-competency\"]'),\n            level = 0,\n            sublevel = 1;\n\n        menubar.closeAll();\n       // console.log(id);\n\n       \n\n        if (typeof id === \"undefined\") {            \n            // Assume this is the root of the tree.\n            // Here we are only getting the text from the top of the tree, to do it we clone the tree,\n            // remove all children and then call text on the result.\n            $('[data-region=\"competencyinfo\"]').html(node.clone().children().remove().end().text());\n            $('[data-region=\"competencyactions\"]').data('competency', null);\n            actionMenu.hide();\n\n        } else {\n            \n            var competency = self._treeModel.getCompetency(id);\n\n            level = self._treeModel.getCompetencyLevel(id);\n            sublevel = level + 1;\n\n            actionMenu.show();\n            $('[data-region=\"competencyactions\"]').data('competency', competency);\n           // renderCompetencySummary(competency);\n           // UserCompentencyBrief(competency);\n            AdvancedUserCompentencyView(competency,3);\n            // Log Competency viewed event.\n            triggerCompetencyViewedEvent(competency);\n        }\n        strSelectedTaxonomy(level).then(function(str) {\n            selectedTitle.text(str);\n            return;\n        }).catch(notification.exception);\n\n        strAddTaxonomy(sublevel).then(function(str) {\n            btn.show()\n                .find('[data-region=\"term\"]')\n                .text(str);\n            return;\n        }).catch(notification.exception);\n\n        // We handled this event so consume it.\n        evt.preventDefault();\n        return false;\n    \n\n    };\n\n    /**\n     * Handler when a node in the aria tree is selected.\n     * @method selectionChanged\n     * @param {Event} evt The event that triggered the selection change.\n     * @param {Object} params The parameters for the event. Contains a list of selected nodes.\n     * @return {Boolean}\n     */\n     advancedviewCourselist.prototype._selectionChanged = function(evt, params) {\n      // console.log('hi');\n        var node = params.selected,\n            id = $(node).data('id'),\n            btn = $('[data-region=\"competencyactions\"] [data-action=\"add\"]'),\n            actionMenu = $('[data-region=\"competencyactionsmenu\"]'),\n            selectedTitle = $('[data-region=\"selected-competency\"]'),\n            level = 0,\n            sublevel = 1;\n\n        menubar.closeAll();\n       // console.log(id);\n\n      \n\n        if (typeof id === \"undefined\") {\n\n            console.log('here ');\n            // Assume this is the root of the tree.\n            // Here we are only getting the text from the top of the tree, to do it we clone the tree,\n            // remove all children and then call text on the result.\n            $('[data-region=\"competencyinfo\"]').html(node.clone().children().remove().end().text());\n            $('[data-region=\"competencyactions\"]').data('competency', null);\n            actionMenu.hide();\n\n        } else {\n            \n            var competency = self._treeModel.getCompetency(id);\n            level = self._treeModel.getCompetencyLevel(id);\n            sublevel = level + 1;\n            actionMenu.show();\n            $('[data-region=\"competencyactions\"]').data('competency', competency);\n           // renderCompetencySummary(competency);\n           // UserCompentencyBrief(competency);\n           advancedviewCourselist.prototype._courselistview(competency);\n            // Log Competency viewed event.\n            advancedviewCourselist.prototype._triggerCompetencyViewedEvent(competency);\n        }\n       /* strSelectedTaxonomy(level).then(function(str) {\n            selectedTitle.text(str);\n            return;\n        }).catch(notification.exception);\n\n        strAddTaxonomy(sublevel).then(function(str) {\n            btn.show()\n                .find('[data-region=\"term\"]')\n                .text(str);\n            return;\n        }).catch(notification.exception); */\n\n        // We handled this event so consume it.\n        evt.preventDefault();\n        return false;\n    };\n\n    /**\n    * Deletes a related competency without confirmation.\n    *\n    * @param {Event} e The event that triggered the action.\n    * @method deleteRelatedHandler\n    */ \n    advancedviewCourselist.prototype._courselistview = function(competency) {  \n      \n                   $('[data-region=\"courseactivitiesview'+competency.competencyframeworkid+'\"]').hide();\n                  // console.log('[data-region=\"courseactivitiesview'+competency.competencyframeworkid+'\"]');\n        var competencycourselist = ajax.call([{\n            methodname: 'local_competency_data_for_advancedview_of_courselist',\n                args: {competencyid: competency.id}\n        }\n        ]);\n\n        competencycourselist[0].done(function(context) {\n            context.competencies=$.parseJSON(context.competencies);  \n            //alert(context);\n            //console.log(context);\n            templates.render('local_competency/advancedview_of_courselist', context).then(function(html,js) {\n                          templates.render('local_competency/loading', {});\n            // console.log(html);\n\n              \n                $('[data-region=\"competencyinfo'+competency.competencyframeworkid+'\"]').replaceWith(html);\n                  $('[data-region=\"courselistview'+competency.competencyframeworkid+'\"]').replaceWith(html);\n                  \n               //  templates.runTemplateJS();\n               //updatedRelatedCompetencies();\n               // updatedRelatedCompetencies();\n            }).fail(notification.exception);\n        }).fail(notification.exception); \n\n    \n    }; // end  of function\n\n\n    /**\n    * Deletes a related competency without confirmation.\n    *\n    * @param {Event} e The event that triggered the action.\n    * @method deleteRelatedHandler\n    */ \n    advancedviewCourselist.prototype._courseactvitiesview = function() { \n\n               var competency = self._treeModel.getCompetency(self._competencyid);\n     $('[data-region=\"courseactivitiesview'+competency.competencyframeworkid+'\"]').show();   \n     \n        var removeRelated = ajax.call([{\n            methodname: 'local_competency_data_for_advancedview_of_usercompetency',\n                args: {competencyid: self._competencyid,\n                       courseid: self._courseid,\n                      }\n            }\n        ]);\n\n        removeRelated[0].done(function(context) {\n         \n            context.competency_assignedcmodules=$.parseJSON(context.competency_assignedcmodules);  \n           \n            templates.render('local_competency/advancedview_of_usercompetency', context).then(function(html,js) {\n                          templates.render('local_competency/loading', {});\n     \n                var competency = self._treeModel.getCompetency(self._competencyid);           \n                $('[data-region=\"competencyinfo'+competency.competencyframeworkid+'\"]').replaceWith(html);\n    \n                $('[data-region=\"courseactivitiesview'+competency.competencyframeworkid+'\"]').replaceWith(html);\n               //  templates.runTemplateJS();\n               //updatedRelatedCompetencies();\n               // updatedRelatedCompetencies();\n            }).fail(notification.exception);\n        }).fail(notification.exception); \n\n    \n    }; // end  of function\n\n    /**\n     * Log the competency viewed event.\n     *\n     * @param  {Object} competency The competency.\n     * @method triggerCompetencyViewedEvent\n     */\n   advancedviewCourselist.prototype._triggerCompetencyViewedEvent = function(competency) {\n        if (competency.id !== self._selectedCompetencyId) {\n            // Set the selected competency id.\n            self._selectedCompetencyId = competency.id;\n            ajax.call([{\n                    methodname: 'core_competency_competency_viewed',\n                    args: {id: competency.id}\n            }]);\n        }\n    };\n\n\n    advancedviewCourselist.prototype._setter = function(filter,filter_text){      \n        // alert('3');\n        // alert(filter_text);\n        self._filter = filter;\n        self._filter_text = filter_text;\n        if(self._filter =='inprogress'){\n            self._template='block_userdashboard/elearning_courses_innercontent';\n            self._targetSelector ='#elearning_inprogress';\n        }\n\n        if(self._filter =='completed'){\n           self._template='block_userdashboard/elearning_courses_innercontent';\n           self._targetSelector ='#elearning_completed';\n        }\n\n        if(self._filter=='menu'){\n          self._template ='block_userdashboard/userdashboard_courses';\n          self._targetSelector ='#elearning_inprogress';\n        }\n\n        return  advancedviewCourselist.prototype._getajaxCourses();\n\n    };\n    \n   \n\n    advancedviewCourselist._callcourseview = function(currentselector,treeModel){    \n\n        self._treeModel= treeModel; \n        $(currentselector).on('selectionchanged',  advancedviewCourselist.prototype._selectionChanged);\n       // advancedviewCourselist.prototype._setter(filter,filter_text);\n    };\n\n    advancedviewCourselist._callactivities= function(competencyid, competencycourseid){\n      self._courseid= competencycourseid;\n      self._competencyid=  competencyid;\n      advancedviewCourselist.prototype._courseactvitiesview();\n    }; \n\n    /** @alias module:block_userdashboard/userdashboard_elearning.js userdashboardElearning  **/ \n    return advancedviewCourselist;\n    \n}); // end of main function"],"names":["define","$","url","templates","notification","str","ajax","menubar","advancedviewCourselist","self","_courseid","_competencyid","_treeModel","_selectedCompetencyId","prototype","_getajaxCourses","evt","params","node","selected","id","data","btn","actionMenu","selectedTitle","level","sublevel","closeAll","html","clone","children","remove","end","text","hide","competency","getCompetency","getCompetencyLevel","show","AdvancedUserCompentencyView","triggerCompetencyViewedEvent","strSelectedTaxonomy","then","catch","exception","strAddTaxonomy","find","preventDefault","_selectionChanged","console","log","_courselistview","_triggerCompetencyViewedEvent","competencyframeworkid","call","methodname","args","competencyid","done","context","competencies","parseJSON","render","js","replaceWith","fail","_courseactvitiesview","courseid","competency_assignedcmodules","_setter","filter","filter_text","_filter","_filter_text","_template","_targetSelector","_callcourseview","currentselector","treeModel","on","_callactivities","competencycourseid"],"mappings":";;;;;;;;AAuBAA,kDAAO,CAAC,SACA,WACA,iBACA,oBACA,WACA,YACA,6BACG,SAASC,EAAEC,IAAKC,UAAWC,aAAcC,IAAKC,KAAMC,aAGvDC,uBAAyB,WAC3BC,KAAKC,UAAW,GAChBD,KAAKE,cAAc,GACnBF,KAAKG,WACLH,KAAKI,sBAAwB,aAa/BL,uBAAuBM,UAAUC,gBAAkB,SAASC,IAAKC,YAIzDC,KAAOD,OAAOE,SACdC,GAAKnB,EAAEiB,MAAMG,KAAK,MAClBC,IAAMrB,EAAE,yDACRsB,WAAatB,EAAE,yCACfuB,cAAgBvB,EAAE,uCAClBwB,MAAQ,EACRC,SAAW,KAEfnB,QAAQoB,gBAKU,IAAPP,GAIPnB,EAAE,kCAAkC2B,KAAKV,KAAKW,QAAQC,WAAWC,SAASC,MAAMC,QAChFhC,EAAE,qCAAqCoB,KAAK,aAAc,MAC1DE,WAAWW,WAER,KAECC,WAAa1B,KAAKG,WAAWwB,cAAchB,IAG/CM,UADAD,MAAQhB,KAAKG,WAAWyB,mBAAmBjB,KACxB,EAEnBG,WAAWe,OACXrC,EAAE,qCAAqCoB,KAAK,aAAcc,YAG1DI,4BAA4BJ,WAAW,GAEvCK,6BAA6BL,mBAEjCM,oBAAoBhB,OAAOiB,MAAK,SAASrC,KACrCmB,cAAcS,KAAK5B,QAEpBsC,MAAMvC,aAAawC,WAEtBC,eAAenB,UAAUgB,MAAK,SAASrC,KACnCiB,IAAIgB,OACCQ,KAAK,wBACLb,KAAK5B,QAEXsC,MAAMvC,aAAawC,WAGtB5B,IAAI+B,kBACG,GAYVvC,uBAAuBM,UAAUkC,kBAAoB,SAAShC,IAAKC,YAE5DC,KAAOD,OAAOE,SACdC,GAAKnB,EAAEiB,MAAMG,KAAK,MAElBE,YADMtB,EAAE,yDACKA,EAAE,0CACCA,EAAE,0CAItBM,QAAQoB,gBAKU,IAAPP,GAEP6B,QAAQC,IAAI,SAIZjD,EAAE,kCAAkC2B,KAAKV,KAAKW,QAAQC,WAAWC,SAASC,MAAMC,QAChFhC,EAAE,qCAAqCoB,KAAK,aAAc,MAC1DE,WAAWW,WAER,KAECC,WAAa1B,KAAKG,WAAWwB,cAAchB,IACvCX,KAAKG,WAAWyB,mBAAmBjB,IACxB,EACnBG,WAAWe,OACXrC,EAAE,qCAAqCoB,KAAK,aAAcc,YAG3D3B,uBAAuBM,UAAUqC,gBAAgBhB,YAEhD3B,uBAAuBM,UAAUsC,8BAA8BjB,mBAenEnB,IAAI+B,kBACG,GASXvC,uBAAuBM,UAAUqC,gBAAkB,SAAShB,YAE7ClC,EAAE,qCAAqCkC,WAAWkB,sBAAsB,MAAMnB,OAE9D5B,KAAKgD,KAAK,CAAC,CAClCC,WAAY,uDACRC,KAAM,CAACC,aAActB,WAAWf,OAInB,GAAGsC,MAAK,SAASC,SAClCA,QAAQC,aAAa3D,EAAE4D,UAAUF,QAAQC,cAGzCzD,UAAU2D,OAAO,8CAA+CH,SAASjB,MAAK,SAASd,KAAKmC,IAC9E5D,UAAU2D,OAAO,2BAA4B,IAIvD7D,EAAE,+BAA+BkC,WAAWkB,sBAAsB,MAAMW,YAAYpC,MAClF3B,EAAE,+BAA+BkC,WAAWkB,sBAAsB,MAAMW,YAAYpC,SAKvFqC,KAAK7D,aAAawC,cACtBqB,KAAK7D,aAAawC,YAYzBpC,uBAAuBM,UAAUoD,qBAAuB,eAEzC/B,WAAa1B,KAAKG,WAAWwB,cAAc3B,KAAKE,eAC9DV,EAAE,qCAAqCkC,WAAWkB,sBAAsB,MAAMf,OAEvDhC,KAAKgD,KAAK,CAAC,CAC3BC,WAAY,2DACRC,KAAM,CAACC,aAAchD,KAAKE,cACnBwD,SAAU1D,KAAKC,cAKhB,GAAGgD,MAAK,SAASC,SAE3BA,QAAQS,4BAA4BnE,EAAE4D,UAAUF,QAAQS,6BAExDjE,UAAU2D,OAAO,kDAAmDH,SAASjB,MAAK,SAASd,KAAKmC,IAClF5D,UAAU2D,OAAO,2BAA4B,QAEnD3B,WAAa1B,KAAKG,WAAWwB,cAAc3B,KAAKE,eACpDV,EAAE,+BAA+BkC,WAAWkB,sBAAsB,MAAMW,YAAYpC,MAEpF3B,EAAE,qCAAqCkC,WAAWkB,sBAAsB,MAAMW,YAAYpC,SAI3FqC,KAAK7D,aAAawC,cACtBqB,KAAK7D,aAAawC,YAW1BpC,uBAAuBM,UAAUsC,8BAAgC,SAASjB,YACjEA,WAAWf,KAAOX,KAAKI,wBAEvBJ,KAAKI,sBAAwBsB,WAAWf,GACxCd,KAAKgD,KAAK,CAAC,CACHC,WAAY,oCACZC,KAAM,CAACpC,GAAIe,WAAWf,SAMtCZ,uBAAuBM,UAAUuD,QAAU,SAASC,OAAOC,oBAGvD9D,KAAK+D,QAAUF,OACf7D,KAAKgE,aAAeF,YACF,cAAf9D,KAAK+D,UACJ/D,KAAKiE,UAAU,qDACfjE,KAAKkE,gBAAiB,yBAGR,aAAflE,KAAK+D,UACL/D,KAAKiE,UAAU,qDACfjE,KAAKkE,gBAAiB,wBAGR,QAAdlE,KAAK+D,UACN/D,KAAKiE,UAAW,4CAChBjE,KAAKkE,gBAAiB,yBAGhBnE,uBAAuBM,UAAUC,mBAM7CP,uBAAuBoE,gBAAkB,SAASC,gBAAgBC,WAE9DrE,KAAKG,WAAYkE,UACjB7E,EAAE4E,iBAAiBE,GAAG,mBAAqBvE,uBAAuBM,UAAUkC,oBAIhFxC,uBAAuBwE,gBAAiB,SAASvB,aAAcwB,oBAC7DxE,KAAKC,UAAWuE,mBAChBxE,KAAKE,cAAgB8C,aACrBjD,uBAAuBM,UAAUoD,wBAI5B1D"}